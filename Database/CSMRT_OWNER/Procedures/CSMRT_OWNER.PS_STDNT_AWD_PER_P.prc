DROP PROCEDURE CSMRT_OWNER.PS_STDNT_AWD_PER_P
/

--
-- PS_STDNT_AWD_PER_P  (Procedure) 
--
CREATE OR REPLACE PROCEDURE CSMRT_OWNER.PS_STDNT_AWD_PER_P AUTHID CURRENT_USER IS

------------------------------------------------------------------------
-- George Adams
--
-- Loads stage table PS_STDNT_AWD_PER from PeopleSoft table PS_STDNT_AWD_PER.
--
-- V01  SMT-xxxx 04/18/2017,    Jim Doucette
--                              Converted from PS_STDNT_AWD_PER.SQL
--
------------------------------------------------------------------------

        strMartId                       Varchar2(50)    := 'CSW';
        strProcessName                  Varchar2(100)   := 'PS_STDNT_AWD_PER';
        intProcessSid                   Integer;
        dtProcessStart                  Date            := SYSDATE;
        strMessage01                    Varchar2(4000);
        strMessage02                    Varchar2(512);
        strMessage03                    Varchar2(512)   :='';
        strNewLine                      Varchar2(2)     := chr(13) || chr(10);
        strSqlCommand                   Varchar2(32767) :='';
        strSqlDynamic                   Varchar2(32767) :='';
        strClientInfo                   Varchar2(100);
        intRowCount                     Integer;
        intTotalRowCount                Integer         := 0;
        numSqlCode                      Number;
        strSqlErrm                      Varchar2(4000);
        intTries                        Integer;

BEGIN
strSqlCommand := 'DBMS_APPLICATION_INFO.SET_CLIENT_INFO';
DBMS_APPLICATION_INFO.SET_CLIENT_INFO (strProcessName);

strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_INIT';
COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_INIT
        (
                i_MartId                => strMartId,
                i_ProcessName           => strProcessName,
                i_ProcessStartTime      => dtProcessStart,
                o_ProcessSid            => intProcessSid
        );

strMessage01    := 'Updating CSSTG_OWNER.UM_STAGE_JOBS';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);


strSqlCommand   := 'update START_DT on CSSTG_OWNER.UM_STAGE_JOBS';
update CSSTG_OWNER.UM_STAGE_JOBS
   set TABLE_STATUS = 'Reading',
       START_DT = SYSDATE,
       END_DT = NULL
 where TABLE_NAME = 'PS_STDNT_AWD_PER'
;

strSqlCommand := 'commit';
commit;


strSqlCommand   := 'update TABLE_STATUS on CSSTG_OWNER.UM_STAGE_JOBS';
update CSSTG_OWNER.UM_STAGE_JOBS
   set TABLE_STATUS = 'Truncating',
       NEW_MAX_SCN = (select /*+ full(S) */ max(ORA_ROWSCN) from SYSADM.PS_STDNT_AWD_PER@SASOURCE S)
 where TABLE_NAME = 'PS_STDNT_AWD_PER'
;

strSqlCommand := 'commit';
commit;


strSqlDynamic   := 'truncate table CSSTG_OWNER.PS_T_STDNT_AWD_PER';
strSqlCommand   := 'SMT_UTILITY.EXECUTE_IMMEDIATE: ' || strSqlDynamic;
COMMON_OWNER.SMT_UTILITY.EXECUTE_IMMEDIATE
                (
                i_SqlStatement          => strSqlDynamic,
                i_MaxTries              => 10,
                i_WaitSeconds           => 10,
                o_Tries                 => intTries
                );


strSqlCommand   := 'Loading temp table for CSSTG_OWNER.UM_STAGE_JOBS';
update CSSTG_OWNER.UM_STAGE_JOBS
   set TABLE_STATUS = 'Loading'
 where TABLE_NAME = 'PS_STDNT_AWD_PER'
;

strSqlCommand := 'commit';
commit;


strSqlCommand := 'insert';
insert /*+ append */  into CSSTG_OWNER.PS_T_STDNT_AWD_PER
select /*+ full(S) */
nvl(trim(EMPLID),'-') EMPLID,
nvl(trim(INSTITUTION),'-') INSTITUTION,
nvl(trim(AID_YEAR),'-') AID_YEAR,
nvl(trim(AWARD_PERIOD),'-') AWARD_PERIOD,
'CS90' SRC_SYS_ID,
FED_EFC,
EFC_STATUS,
INST_EFC,
FED_NEED_BASE_AID,
INST_NEED_BASE_AID,
FED_YEAR_COA,
INST_YEAR_COA,
PELL_YEAR_COA,
FED_NEED,
INST_NEED,
FED_UNMET_NEED,
FED_OVRAWD_AMT,
INST_UNMET_NEED,
INST_OVRAWD_AMT,
FED_PARENT_CONTRB,
INST_PARENT_CONTRB,
FED_STDNT_CONTRB,
INST_STDNT_CONTRB,
INST_EFC_OVERIDE,
BASE_WEEKS,
WEEKS_ENROLLED,
WEEKLY_PC,
WEEKLY_SC,
PRORATED_EFC,
FED_SPECIAL_AID,
INST_SPECIAL_AID,
FED_TOTAL_AID,
INST_TOTAL_AID,
FED_UNMET_COA,
INST_UNMET_COA,
FED_OVRAWD_COA,
INST_OVRAWD_COA,
VET_ED_BENEFIT,
VET_ED_FAN_PRINT,
PRORATED_PAR_CNTRB,
PRORATED_STU_CNTRB,
BDGT_DURATION_FED,
BDGT_DURATION_INST,
FANLTR_STATUS,
FANLTR_STATUS_PREH,
INST_CALC_SC,
INST_CALC_PC,
INST_CALC_EFC,
ISIR_CALC_SC,
ISIR_CALC_PC,
ISIR_CALC_EFC,
SFA_PELLYR_COA_LHT,
substr(to_char(trim(COMMENTS)),1,4000) COMMENTS,
to_number(ORA_ROWSCN) SRC_SCN
  from SYSADM.PS_STDNT_AWD_PER@SASOURCE S
 where EMPLID between '00000000' and '99999999'
   and length(EMPLID) = 8
;

strSqlCommand := 'commit';
commit;


strSqlCommand   := 'update TABLE_STATUS on CSSTG_OWNER.UM_STAGE_JOBS';
update CSSTG_OWNER.UM_STAGE_JOBS
   set TABLE_STATUS = 'Merging'
 where TABLE_NAME = 'PS_STDNT_AWD_PER'
;

strSqlCommand := 'commit';
commit;


strMessage01    := 'Merging data into CSSTG_OWNER.PS_STDNT_AWD_PER';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand   := 'merge into CSSTG_OWNER.PS_STDNT_AWD_PER';
merge /*+ use_hash(S,T) */ into CSSTG_OWNER.PS_STDNT_AWD_PER T
using (select /*+ full(S) */
nvl(trim(EMPLID),'-') EMPLID,
nvl(trim(INSTITUTION),'-') INSTITUTION,
nvl(trim(AID_YEAR),'-') AID_YEAR,
nvl(trim(AWARD_PERIOD),'-') AWARD_PERIOD,
nvl(FED_EFC,0) FED_EFC,
nvl(trim(EFC_STATUS),'-') EFC_STATUS,
nvl(INST_EFC,0) INST_EFC,
nvl(FED_NEED_BASE_AID,0) FED_NEED_BASE_AID,
nvl(INST_NEED_BASE_AID,0) INST_NEED_BASE_AID,
nvl(FED_YEAR_COA,0) FED_YEAR_COA,
nvl(INST_YEAR_COA,0) INST_YEAR_COA,
nvl(PELL_YEAR_COA,0) PELL_YEAR_COA,
nvl(FED_NEED,0) FED_NEED,
nvl(INST_NEED,0) INST_NEED,
nvl(FED_UNMET_NEED,0) FED_UNMET_NEED,
nvl(FED_OVRAWD_AMT,0) FED_OVRAWD_AMT,
nvl(INST_UNMET_NEED,0) INST_UNMET_NEED,
nvl(INST_OVRAWD_AMT,0) INST_OVRAWD_AMT,
nvl(FED_PARENT_CONTRB,0) FED_PARENT_CONTRB,
nvl(INST_PARENT_CONTRB,0) INST_PARENT_CONTRB,
nvl(FED_STDNT_CONTRB,0) FED_STDNT_CONTRB,
nvl(INST_STDNT_CONTRB,0) INST_STDNT_CONTRB,
nvl(trim(INST_EFC_OVERIDE),'-') INST_EFC_OVERIDE,
nvl(BASE_WEEKS,0) BASE_WEEKS,
nvl(WEEKS_ENROLLED,0) WEEKS_ENROLLED,
nvl(WEEKLY_PC,0) WEEKLY_PC,
nvl(WEEKLY_SC,0) WEEKLY_SC,
nvl(PRORATED_EFC,0) PRORATED_EFC,
nvl(FED_SPECIAL_AID,0) FED_SPECIAL_AID,
nvl(INST_SPECIAL_AID,0) INST_SPECIAL_AID,
nvl(FED_TOTAL_AID,0) FED_TOTAL_AID,
nvl(INST_TOTAL_AID,0) INST_TOTAL_AID,
nvl(FED_UNMET_COA,0) FED_UNMET_COA,
nvl(INST_UNMET_COA,0) INST_UNMET_COA,
nvl(FED_OVRAWD_COA,0) FED_OVRAWD_COA,
nvl(INST_OVRAWD_COA,0) INST_OVRAWD_COA,
nvl(VET_ED_BENEFIT,0) VET_ED_BENEFIT,
nvl(trim(VET_ED_FAN_PRINT),'-') VET_ED_FAN_PRINT,
nvl(PRORATED_PAR_CNTRB,0) PRORATED_PAR_CNTRB,
nvl(PRORATED_STU_CNTRB,0) PRORATED_STU_CNTRB,
nvl(BDGT_DURATION_FED,0) BDGT_DURATION_FED,
nvl(BDGT_DURATION_INST,0) BDGT_DURATION_INST,
nvl(trim(FANLTR_STATUS),'-') FANLTR_STATUS,
nvl(trim(FANLTR_STATUS_PREH),'-') FANLTR_STATUS_PREH,
nvl(INST_CALC_SC,0) INST_CALC_SC,
nvl(INST_CALC_PC,0) INST_CALC_PC,
nvl(INST_CALC_EFC,0) INST_CALC_EFC,
nvl(ISIR_CALC_SC,0) ISIR_CALC_SC,
nvl(ISIR_CALC_PC,0) ISIR_CALC_PC,
nvl(ISIR_CALC_EFC,0) ISIR_CALC_EFC,
nvl(SFA_PELLYR_COA_LHT,0) SFA_PELLYR_COA_LHT,
COMMENTS COMMENTS
from CSSTG_OWNER.PS_T_STDNT_AWD_PER S
where SRC_SCN > (select OLD_MAX_SCN from CSSTG_OWNER.UM_STAGE_JOBS where TABLE_NAME = 'PS_STDNT_AWD_PER') ) S
   on (
T.EMPLID = S.EMPLID and
T.INSTITUTION = S.INSTITUTION and
T.AID_YEAR = S.AID_YEAR and
T.AWARD_PERIOD = S.AWARD_PERIOD and
T.SRC_SYS_ID = 'CS90')
when matched then update set
T.FED_EFC = S.FED_EFC,
T.EFC_STATUS = S.EFC_STATUS,
T.INST_EFC = S.INST_EFC,
T.FED_NEED_BASE_AID = S.FED_NEED_BASE_AID,
T.INST_NEED_BASE_AID = S.INST_NEED_BASE_AID,
T.FED_YEAR_COA = S.FED_YEAR_COA,
T.INST_YEAR_COA = S.INST_YEAR_COA,
T.PELL_YEAR_COA = S.PELL_YEAR_COA,
T.FED_NEED = S.FED_NEED,
T.INST_NEED = S.INST_NEED,
T.FED_UNMET_NEED = S.FED_UNMET_NEED,
T.FED_OVRAWD_AMT = S.FED_OVRAWD_AMT,
T.INST_UNMET_NEED = S.INST_UNMET_NEED,
T.INST_OVRAWD_AMT = S.INST_OVRAWD_AMT,
T.FED_PARENT_CONTRB = S.FED_PARENT_CONTRB,
T.INST_PARENT_CONTRB = S.INST_PARENT_CONTRB,
T.FED_STDNT_CONTRB = S.FED_STDNT_CONTRB,
T.INST_STDNT_CONTRB = S.INST_STDNT_CONTRB,
T.INST_EFC_OVERIDE = S.INST_EFC_OVERIDE,
T.BASE_WEEKS = S.BASE_WEEKS,
T.WEEKS_ENROLLED = S.WEEKS_ENROLLED,
T.WEEKLY_PC = S.WEEKLY_PC,
T.WEEKLY_SC = S.WEEKLY_SC,
T.PRORATED_EFC = S.PRORATED_EFC,
T.FED_SPECIAL_AID = S.FED_SPECIAL_AID,
T.INST_SPECIAL_AID = S.INST_SPECIAL_AID,
T.FED_TOTAL_AID = S.FED_TOTAL_AID,
T.INST_TOTAL_AID = S.INST_TOTAL_AID,
T.FED_UNMET_COA = S.FED_UNMET_COA,
T.INST_UNMET_COA = S.INST_UNMET_COA,
T.FED_OVRAWD_COA = S.FED_OVRAWD_COA,
T.INST_OVRAWD_COA = S.INST_OVRAWD_COA,
T.VET_ED_BENEFIT = S.VET_ED_BENEFIT,
T.VET_ED_FAN_PRINT = S.VET_ED_FAN_PRINT,
T.PRORATED_PAR_CNTRB = S.PRORATED_PAR_CNTRB,
T.PRORATED_STU_CNTRB = S.PRORATED_STU_CNTRB,
T.BDGT_DURATION_FED = S.BDGT_DURATION_FED,
T.BDGT_DURATION_INST = S.BDGT_DURATION_INST,
T.FANLTR_STATUS = S.FANLTR_STATUS,
T.FANLTR_STATUS_PREH = S.FANLTR_STATUS_PREH,
T.INST_CALC_SC = S.INST_CALC_SC,
T.INST_CALC_PC = S.INST_CALC_PC,
T.INST_CALC_EFC = S.INST_CALC_EFC,
T.ISIR_CALC_SC = S.ISIR_CALC_SC,
T.ISIR_CALC_PC = S.ISIR_CALC_PC,
T.ISIR_CALC_EFC = S.ISIR_CALC_EFC,
T.SFA_PELLYR_COA_LHT = S.SFA_PELLYR_COA_LHT,
T.COMMENTS = S.COMMENTS,
T.DATA_ORIGIN = 'S',
T.LASTUPD_EW_DTTM = sysdate,
T.BATCH_SID   = 1234
where
T.FED_EFC <> S.FED_EFC or
T.EFC_STATUS <> S.EFC_STATUS or
T.INST_EFC <> S.INST_EFC or
T.FED_NEED_BASE_AID <> S.FED_NEED_BASE_AID or
T.INST_NEED_BASE_AID <> S.INST_NEED_BASE_AID or
T.FED_YEAR_COA <> S.FED_YEAR_COA or
T.INST_YEAR_COA <> S.INST_YEAR_COA or
T.PELL_YEAR_COA <> S.PELL_YEAR_COA or
T.FED_NEED <> S.FED_NEED or
T.INST_NEED <> S.INST_NEED or
T.FED_UNMET_NEED <> S.FED_UNMET_NEED or
T.FED_OVRAWD_AMT <> S.FED_OVRAWD_AMT or
T.INST_UNMET_NEED <> S.INST_UNMET_NEED or
T.INST_OVRAWD_AMT <> S.INST_OVRAWD_AMT or
T.FED_PARENT_CONTRB <> S.FED_PARENT_CONTRB or
T.INST_PARENT_CONTRB <> S.INST_PARENT_CONTRB or
T.FED_STDNT_CONTRB <> S.FED_STDNT_CONTRB or
T.INST_STDNT_CONTRB <> S.INST_STDNT_CONTRB or
T.INST_EFC_OVERIDE <> S.INST_EFC_OVERIDE or
T.BASE_WEEKS <> S.BASE_WEEKS or
T.WEEKS_ENROLLED <> S.WEEKS_ENROLLED or
T.WEEKLY_PC <> S.WEEKLY_PC or
T.WEEKLY_SC <> S.WEEKLY_SC or
T.PRORATED_EFC <> S.PRORATED_EFC or
T.FED_SPECIAL_AID <> S.FED_SPECIAL_AID or
T.INST_SPECIAL_AID <> S.INST_SPECIAL_AID or
T.FED_TOTAL_AID <> S.FED_TOTAL_AID or
T.INST_TOTAL_AID <> S.INST_TOTAL_AID or
T.FED_UNMET_COA <> S.FED_UNMET_COA or
T.INST_UNMET_COA <> S.INST_UNMET_COA or
T.FED_OVRAWD_COA <> S.FED_OVRAWD_COA or
T.INST_OVRAWD_COA <> S.INST_OVRAWD_COA or
T.VET_ED_BENEFIT <> S.VET_ED_BENEFIT or
T.VET_ED_FAN_PRINT <> S.VET_ED_FAN_PRINT or
T.PRORATED_PAR_CNTRB <> S.PRORATED_PAR_CNTRB or
T.PRORATED_STU_CNTRB <> S.PRORATED_STU_CNTRB or
T.BDGT_DURATION_FED <> S.BDGT_DURATION_FED or
T.BDGT_DURATION_INST <> S.BDGT_DURATION_INST or
T.FANLTR_STATUS <> S.FANLTR_STATUS or
T.FANLTR_STATUS_PREH <> S.FANLTR_STATUS_PREH or
T.INST_CALC_SC <> S.INST_CALC_SC or
T.INST_CALC_PC <> S.INST_CALC_PC or
T.INST_CALC_EFC <> S.INST_CALC_EFC or
T.ISIR_CALC_SC <> S.ISIR_CALC_SC or
T.ISIR_CALC_PC <> S.ISIR_CALC_PC or
T.ISIR_CALC_EFC <> S.ISIR_CALC_EFC or
T.SFA_PELLYR_COA_LHT <> S.SFA_PELLYR_COA_LHT or
nvl(trim(T.COMMENTS),0) <> nvl(trim(S.COMMENTS),0) or
T.DATA_ORIGIN = 'D'
when not matched then
insert (
T.EMPLID,
T.INSTITUTION,
T.AID_YEAR,
T.AWARD_PERIOD,
T.SRC_SYS_ID,
T.FED_EFC,
T.EFC_STATUS,
T.INST_EFC,
T.FED_NEED_BASE_AID,
T.INST_NEED_BASE_AID,
T.FED_YEAR_COA,
T.INST_YEAR_COA,
T.PELL_YEAR_COA,
T.FED_NEED,
T.INST_NEED,
T.FED_UNMET_NEED,
T.FED_OVRAWD_AMT,
T.INST_UNMET_NEED,
T.INST_OVRAWD_AMT,
T.FED_PARENT_CONTRB,
T.INST_PARENT_CONTRB,
T.FED_STDNT_CONTRB,
T.INST_STDNT_CONTRB,
T.INST_EFC_OVERIDE,
T.BASE_WEEKS,
T.WEEKS_ENROLLED,
T.WEEKLY_PC,
T.WEEKLY_SC,
T.PRORATED_EFC,
T.FED_SPECIAL_AID,
T.INST_SPECIAL_AID,
T.FED_TOTAL_AID,
T.INST_TOTAL_AID,
T.FED_UNMET_COA,
T.INST_UNMET_COA,
T.FED_OVRAWD_COA,
T.INST_OVRAWD_COA,
T.VET_ED_BENEFIT,
T.VET_ED_FAN_PRINT,
T.PRORATED_PAR_CNTRB,
T.PRORATED_STU_CNTRB,
T.BDGT_DURATION_FED,
T.BDGT_DURATION_INST,
T.FANLTR_STATUS,
T.FANLTR_STATUS_PREH,
T.INST_CALC_SC,
T.INST_CALC_PC,
T.INST_CALC_EFC,
T.ISIR_CALC_SC,
T.ISIR_CALC_PC,
T.ISIR_CALC_EFC,
T.SFA_PELLYR_COA_LHT,
T.LOAD_ERROR,
T.DATA_ORIGIN,
T.CREATED_EW_DTTM,
T.LASTUPD_EW_DTTM,
T.BATCH_SID,
T.COMMENTS
)
values (
S.EMPLID,
S.INSTITUTION,
S.AID_YEAR,
S.AWARD_PERIOD,
'CS90',
S.FED_EFC,
S.EFC_STATUS,
S.INST_EFC,
S.FED_NEED_BASE_AID,
S.INST_NEED_BASE_AID,
S.FED_YEAR_COA,
S.INST_YEAR_COA,
S.PELL_YEAR_COA,
S.FED_NEED,
S.INST_NEED,
S.FED_UNMET_NEED,
S.FED_OVRAWD_AMT,
S.INST_UNMET_NEED,
S.INST_OVRAWD_AMT,
S.FED_PARENT_CONTRB,
S.INST_PARENT_CONTRB,
S.FED_STDNT_CONTRB,
S.INST_STDNT_CONTRB,
S.INST_EFC_OVERIDE,
S.BASE_WEEKS,
S.WEEKS_ENROLLED,
S.WEEKLY_PC,
S.WEEKLY_SC,
S.PRORATED_EFC,
S.FED_SPECIAL_AID,
S.INST_SPECIAL_AID,
S.FED_TOTAL_AID,
S.INST_TOTAL_AID,
S.FED_UNMET_COA,
S.INST_UNMET_COA,
S.FED_OVRAWD_COA,
S.INST_OVRAWD_COA,
S.VET_ED_BENEFIT,
S.VET_ED_FAN_PRINT,
S.PRORATED_PAR_CNTRB,
S.PRORATED_STU_CNTRB,
S.BDGT_DURATION_FED,
S.BDGT_DURATION_INST,
S.FANLTR_STATUS,
S.FANLTR_STATUS_PREH,
S.INST_CALC_SC,
S.INST_CALC_PC,
S.INST_CALC_EFC,
S.ISIR_CALC_SC,
S.ISIR_CALC_PC,
S.ISIR_CALC_EFC,
S.SFA_PELLYR_COA_LHT,
'N',
'S',
sysdate,
sysdate,
1234,
S.COMMENTS);


strSqlCommand   := 'SET intRowCount';
intRowCount     := SQL%ROWCOUNT;

strSqlCommand := 'commit';
commit;


strMessage01    := '# of PS_STDNT_AWD_PER rows merged: ' || TO_CHAR(intRowCount,'999,999,999,999');
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_DETAIL';
COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_DETAIL
        (
                i_TargetTableName   => 'PS_STDNT_AWD_PER',
                i_Action            => 'MERGE',
                i_RowCount          => intRowCount
        );


strMessage01    := 'Updating CSSTG_OWNER.UM_STAGE_JOBS';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand   := 'update TABLE_STATUS on CSSTG_OWNER.UM_STAGE_JOBS';
update CSSTG_OWNER.UM_STAGE_JOBS
   set TABLE_STATUS = 'Deleting',
       OLD_MAX_SCN = NEW_MAX_SCN
 where TABLE_NAME = 'PS_STDNT_AWD_PER';

strSqlCommand := 'commit';
commit;


strMessage01    := 'Updating DATA_ORIGIN on CSSTG_OWNER.PS_STDNT_AWD_PER';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand   := 'update DATA_ORIGIN on CSSTG_OWNER.PS_STDNT_AWD_PER';
update CSSTG_OWNER.PS_STDNT_AWD_PER T
   set T.DATA_ORIGIN = 'D',
          T.LASTUPD_EW_DTTM = SYSDATE
 where T.DATA_ORIGIN <> 'D'
   and exists 
(select 1 from
(select EMPLID, INSTITUTION, AID_YEAR, AWARD_PERIOD
   from CSSTG_OWNER.PS_STDNT_AWD_PER T2
  where (select DELETE_FLG from CSSTG_OWNER.UM_STAGE_JOBS where TABLE_NAME = 'PS_STDNT_AWD_PER') = 'Y'
  minus
 select nvl(trim(EMPLID),'-'), nvl(trim(INSTITUTION),'-'), nvl(trim(AID_YEAR),'-'), nvl(trim(AWARD_PERIOD),'-')
   from SYSADM.PS_STDNT_AWD_PER@SASOURCE S2
  where (select DELETE_FLG from CSSTG_OWNER.UM_STAGE_JOBS where TABLE_NAME = 'PS_STDNT_AWD_PER') = 'Y'
   ) S
 where T.EMPLID = S.EMPLID
   and T.INSTITUTION = S.INSTITUTION
   and T.AID_YEAR = S.AID_YEAR
   and T.AWARD_PERIOD = S.AWARD_PERIOD
   and T.SRC_SYS_ID = 'CS90' 
   ) 
;

strSqlCommand   := 'SET intRowCount';
intRowCount     := SQL%ROWCOUNT;

strSqlCommand := 'commit';
commit;

strMessage01    := '# of PS_STDNT_AWD_PER rows updated: ' || TO_CHAR(intRowCount,'999,999,999,999');
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_DETAIL';
COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_DETAIL
        (
                i_TargetTableName   => 'PS_STDNT_AWD_PER',
                i_Action            => 'UPDATE',
                i_RowCount          => intRowCount
        );


strMessage01    := 'Updating CSSTG_OWNER.UM_STAGE_JOBS';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand   := 'update END_DT on CSSTG_OWNER.UM_STAGE_JOBS';

update CSSTG_OWNER.UM_STAGE_JOBS
   set TABLE_STATUS = 'Complete',
       END_DT = SYSDATE
 where TABLE_NAME = 'PS_STDNT_AWD_PER'
;

strSqlCommand := 'commit';
commit;


strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_SUCCESS';
COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_SUCCESS;

strMessage01    := strProcessName || ' is complete.';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);


EXCEPTION
    WHEN OTHERS THEN

        COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_EXCEPTION
                (
                        i_SqlCommand   => strSqlCommand,
                        i_SqlCode      => SQLCODE,
                        i_SqlErrm      => SQLERRM
                );

END PS_STDNT_AWD_PER_P;
/
