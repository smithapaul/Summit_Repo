CREATE OR REPLACE PROCEDURE             "PS_STDNT_PKG_VAR_P" AUTHID CURRENT_USER IS

------------------------------------------------------------------------
-- George Adams
--
-- Loads stage table PS_STDNT_PKG_VAR from PeopleSoft table PS_STDNT_PKG_VAR.
--
-- V01  SMT-xxxx 04/04/2017,    Jim Doucette
--                              Converted from PS_STDNT_PKG_VAR.SQL
--
------------------------------------------------------------------------

        strMartId                       Varchar2(50)    := 'CSW';
        strProcessName                  Varchar2(100)   := 'PS_STDNT_PKG_VAR';
        intProcessSid                   Integer;
        dtProcessStart                  Date            := SYSDATE;
        strMessage01                    Varchar2(4000);
        strMessage02                    Varchar2(512);
        strMessage03                    Varchar2(512)   :='';
        strNewLine                      Varchar2(2)     := chr(13) || chr(10);
        strSqlCommand                   Varchar2(32767) :='';
        strSqlDynamic                   Varchar2(32767) :='';
        strClientInfo                   Varchar2(100);
        intRowCount                     Integer;
        intTotalRowCount                Integer         := 0;
        numSqlCode                      Number;
        strSqlErrm                      Varchar2(4000);
        intTries                        Integer;

BEGIN
strSqlCommand := 'DBMS_APPLICATION_INFO.SET_CLIENT_INFO';
DBMS_APPLICATION_INFO.SET_CLIENT_INFO (strProcessName);

strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_INIT';
COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_INIT
        (
                i_MartId                => strMartId,
                i_ProcessName           => strProcessName,
                i_ProcessStartTime      => dtProcessStart,
                o_ProcessSid            => intProcessSid
        );

strMessage01    := 'Updating CSSTG_OWNER.UM_STAGE_JOBS';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);


strSqlCommand   := 'update START_DT on CSSTG_OWNER.UM_STAGE_JOBS';
update CSSTG_OWNER.UM_STAGE_JOBS
   set TABLE_STATUS = 'Reading',
       START_DT = sysdate,
       END_DT = NULL
 where TABLE_NAME = 'PS_STDNT_PKG_VAR'
;

strSqlCommand := 'commit';
commit;


strSqlCommand   := 'update NEW_MAX_SCN on CSSTG_OWNER.UM_STAGE_JOBS';
update CSSTG_OWNER.UM_STAGE_JOBS
   set TABLE_STATUS = 'Merging',
       NEW_MAX_SCN = (select /*+ full(S) */ max(ORA_ROWSCN) from SYSADM.PS_STDNT_PKG_VAR@SASOURCE S)
 where TABLE_NAME = 'PS_STDNT_PKG_VAR'
;

strSqlCommand := 'commit';
commit;


strMessage01    := 'Merging data into CSSTG_OWNER.PS_STDNT_PKG_VAR';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand   := 'merge into CSSTG_OWNER.PS_STDNT_PKG_VAR';
merge /*+ use_hash(S,T) */ into CSSTG_OWNER.PS_STDNT_PKG_VAR T
using (select /*+ full(S) */
    nvl(trim(EMPLID),'-') EMPLID, 
    nvl(trim(INSTITUTION),'-') INSTITUTION, 
    nvl(trim(AID_YEAR),'-') AID_YEAR, 
    nvl(trim(ACAD_CAREER),'-') ACAD_CAREER, 
    nvl(trim(VARIABLE_CHAR1),'-') VARIABLE_CHAR1, 
    nvl(trim(VARIABLE_CHAR10),'-') VARIABLE_CHAR10, 
    nvl(trim(VARIABLE_CHAR2),'-') VARIABLE_CHAR2, 
    nvl(trim(VARIABLE_CHAR3),'-') VARIABLE_CHAR3, 
    nvl(trim(VARIABLE_CHAR4),'-') VARIABLE_CHAR4, 
    nvl(trim(VARIABLE_CHAR5),'-') VARIABLE_CHAR5, 
    nvl(trim(VARIABLE_CHAR6),'-') VARIABLE_CHAR6, 
    nvl(trim(VARIABLE_CHAR7),'-') VARIABLE_CHAR7, 
    nvl(trim(VARIABLE_CHAR8),'-') VARIABLE_CHAR8, 
    nvl(trim(VARIABLE_CHAR9),'-') VARIABLE_CHAR9, 
    nvl(trim(VARIABLE_FLAG1),'-') VARIABLE_FLAG1, 
    nvl(trim(VARIABLE_FLAG10),'-') VARIABLE_FLAG10, 
    nvl(trim(VARIABLE_FLAG2),'-') VARIABLE_FLAG2, 
    nvl(trim(VARIABLE_FLAG3),'-') VARIABLE_FLAG3, 
    nvl(trim(VARIABLE_FLAG4),'-') VARIABLE_FLAG4, 
    nvl(trim(VARIABLE_FLAG5),'-') VARIABLE_FLAG5, 
    nvl(trim(VARIABLE_FLAG6),'-') VARIABLE_FLAG6, 
    nvl(trim(VARIABLE_FLAG7),'-') VARIABLE_FLAG7, 
    nvl(trim(VARIABLE_FLAG8),'-') VARIABLE_FLAG8, 
    nvl(trim(VARIABLE_FLAG9),'-') VARIABLE_FLAG9, 
    nvl(VARIABLE_NUM1,0) VARIABLE_NUM1, 
    nvl(VARIABLE_NUM10,0) VARIABLE_NUM10, 
    nvl(VARIABLE_NUM2,0) VARIABLE_NUM2, 
    nvl(VARIABLE_NUM3,0) VARIABLE_NUM3, 
    nvl(VARIABLE_NUM4,0) VARIABLE_NUM4, 
    nvl(VARIABLE_NUM5,0) VARIABLE_NUM5, 
    nvl(VARIABLE_NUM6,0) VARIABLE_NUM6, 
    nvl(VARIABLE_NUM7,0) VARIABLE_NUM7, 
    nvl(VARIABLE_NUM8,0) VARIABLE_NUM8, 
    nvl(VARIABLE_NUM9,0) VARIABLE_NUM9, 
    nvl(trim(RATING_CMP1),'-') RATING_CMP1, 
    nvl(trim(RATING_CMP2),'-') RATING_CMP2, 
    nvl(trim(RATING_CMP3),'-') RATING_CMP3, 
    nvl(trim(RATING_CMP4),'-') RATING_CMP4, 
    nvl(trim(RATING_CMP5),'-') RATING_CMP5, 
    nvl(trim(RATING_CMP6),'-') RATING_CMP6, 
    nvl(trim(RATING_CMP7),'-') RATING_CMP7, 
    nvl(trim(RATING_CMP8),'-') RATING_CMP8, 
    nvl(trim(RATING_CMP9),'-') RATING_CMP9, 
    nvl(trim(RATING_CMP10),'-') RATING_CMP10, 
    nvl(trim(RATING_CMP11),'-') RATING_CMP11, 
    nvl(trim(RATING_CMP12),'-') RATING_CMP12, 
    nvl(trim(RATING_CMP13),'-') RATING_CMP13, 
    nvl(trim(RATING_CMP14),'-') RATING_CMP14, 
    nvl(trim(RATING_CMP15),'-') RATING_CMP15, 
    nvl(trim(RATING_CMP16),'-') RATING_CMP16, 
    nvl(trim(RATING_CMP17),'-') RATING_CMP17, 
    nvl(trim(RATING_CMP18),'-') RATING_CMP18, 
    nvl(trim(RATING_CMP19),'-') RATING_CMP19, 
    nvl(trim(RATING_CMP20),'-') RATING_CMP20, 
    nvl(RATING_CMP_VALUE1,0) RATING_CMP_VALUE1, 
    nvl(RATING_CMP_VALUE2,0) RATING_CMP_VALUE2, 
    nvl(RATING_CMP_VALUE3,0) RATING_CMP_VALUE3, 
    nvl(RATING_CMP_VALUE4,0) RATING_CMP_VALUE4, 
    nvl(RATING_CMP_VALUE5,0) RATING_CMP_VALUE5, 
    nvl(RATING_CMP_VALUE6,0) RATING_CMP_VALUE6, 
    nvl(RATING_CMP_VALUE7,0) RATING_CMP_VALUE7, 
    nvl(RATING_CMP_VALUE8,0) RATING_CMP_VALUE8, 
    nvl(RATING_CMP_VALUE9,0) RATING_CMP_VALUE9, 
    nvl(RATING_CMP_VALUE10,0) RATING_CMP_VALUE10, 
    nvl(RATING_CMP_VALUE11,0) RATING_CMP_VALUE11, 
    nvl(RATING_CMP_VALUE12,0) RATING_CMP_VALUE12, 
    nvl(RATING_CMP_VALUE13,0) RATING_CMP_VALUE13, 
    nvl(RATING_CMP_VALUE14,0) RATING_CMP_VALUE14, 
    nvl(RATING_CMP_VALUE15,0) RATING_CMP_VALUE15, 
    nvl(RATING_CMP_VALUE16,0) RATING_CMP_VALUE16, 
    nvl(RATING_CMP_VALUE17,0) RATING_CMP_VALUE17, 
    nvl(RATING_CMP_VALUE18,0) RATING_CMP_VALUE18, 
    nvl(RATING_CMP_VALUE19,0) RATING_CMP_VALUE19, 
    nvl(RATING_CMP_VALUE20,0) RATING_CMP_VALUE20
  from SYSADM.PS_STDNT_PKG_VAR@SASOURCE S 
 where ORA_ROWSCN > (select OLD_MAX_SCN from CSSTG_OWNER.UM_STAGE_JOBS where TABLE_NAME = 'PS_STDNT_PKG_VAR')
   and EMPLID between '00000000' and '99999999'
   and length(EMPLID) = 8 ) S
 on ( 
    T.EMPLID = S.EMPLID and 
    T.INSTITUTION = S.INSTITUTION and 
    T.AID_YEAR = S.AID_YEAR and 
    T.ACAD_CAREER = S.ACAD_CAREER and 
    T.SRC_SYS_ID = 'CS90')
when matched then update set
    T.VARIABLE_CHAR1 = S.VARIABLE_CHAR1,
    T.VARIABLE_CHAR10 = S.VARIABLE_CHAR10,
    T.VARIABLE_CHAR2 = S.VARIABLE_CHAR2,
    T.VARIABLE_CHAR3 = S.VARIABLE_CHAR3,
    T.VARIABLE_CHAR4 = S.VARIABLE_CHAR4,
    T.VARIABLE_CHAR5 = S.VARIABLE_CHAR5,
    T.VARIABLE_CHAR6 = S.VARIABLE_CHAR6,
    T.VARIABLE_CHAR7 = S.VARIABLE_CHAR7,
    T.VARIABLE_CHAR8 = S.VARIABLE_CHAR8,
    T.VARIABLE_CHAR9 = S.VARIABLE_CHAR9,
    T.VARIABLE_FLAG1 = S.VARIABLE_FLAG1,
    T.VARIABLE_FLAG10 = S.VARIABLE_FLAG10,
    T.VARIABLE_FLAG2 = S.VARIABLE_FLAG2,
    T.VARIABLE_FLAG3 = S.VARIABLE_FLAG3,
    T.VARIABLE_FLAG4 = S.VARIABLE_FLAG4,
    T.VARIABLE_FLAG5 = S.VARIABLE_FLAG5,
    T.VARIABLE_FLAG6 = S.VARIABLE_FLAG6,
    T.VARIABLE_FLAG7 = S.VARIABLE_FLAG7,
    T.VARIABLE_FLAG8 = S.VARIABLE_FLAG8,
    T.VARIABLE_FLAG9 = S.VARIABLE_FLAG9,
    T.VARIABLE_NUM1 = S.VARIABLE_NUM1,
    T.VARIABLE_NUM10 = S.VARIABLE_NUM10,
    T.VARIABLE_NUM2 = S.VARIABLE_NUM2,
    T.VARIABLE_NUM3 = S.VARIABLE_NUM3,
    T.VARIABLE_NUM4 = S.VARIABLE_NUM4,
    T.VARIABLE_NUM5 = S.VARIABLE_NUM5,
    T.VARIABLE_NUM6 = S.VARIABLE_NUM6,
    T.VARIABLE_NUM7 = S.VARIABLE_NUM7,
    T.VARIABLE_NUM8 = S.VARIABLE_NUM8,
    T.VARIABLE_NUM9 = S.VARIABLE_NUM9,
    T.RATING_CMP1 = S.RATING_CMP1,
    T.RATING_CMP2 = S.RATING_CMP2,
    T.RATING_CMP3 = S.RATING_CMP3,
    T.RATING_CMP4 = S.RATING_CMP4,
    T.RATING_CMP5 = S.RATING_CMP5,
    T.RATING_CMP6 = S.RATING_CMP6,
    T.RATING_CMP7 = S.RATING_CMP7,
    T.RATING_CMP8 = S.RATING_CMP8,
    T.RATING_CMP9 = S.RATING_CMP9,
    T.RATING_CMP10 = S.RATING_CMP10,
    T.RATING_CMP11 = S.RATING_CMP11,
    T.RATING_CMP12 = S.RATING_CMP12,
    T.RATING_CMP13 = S.RATING_CMP13,
    T.RATING_CMP14 = S.RATING_CMP14,
    T.RATING_CMP15 = S.RATING_CMP15,
    T.RATING_CMP16 = S.RATING_CMP16,
    T.RATING_CMP17 = S.RATING_CMP17,
    T.RATING_CMP18 = S.RATING_CMP18,
    T.RATING_CMP19 = S.RATING_CMP19,
    T.RATING_CMP20 = S.RATING_CMP20,
    T.RATING_CMP_VALUE1 = S.RATING_CMP_VALUE1,
    T.RATING_CMP_VALUE2 = S.RATING_CMP_VALUE2,
    T.RATING_CMP_VALUE3 = S.RATING_CMP_VALUE3,
    T.RATING_CMP_VALUE4 = S.RATING_CMP_VALUE4,
    T.RATING_CMP_VALUE5 = S.RATING_CMP_VALUE5,
    T.RATING_CMP_VALUE6 = S.RATING_CMP_VALUE6,
    T.RATING_CMP_VALUE7 = S.RATING_CMP_VALUE7,
    T.RATING_CMP_VALUE8 = S.RATING_CMP_VALUE8,
    T.RATING_CMP_VALUE9 = S.RATING_CMP_VALUE9,
    T.RATING_CMP_VALUE10 = S.RATING_CMP_VALUE10,
    T.RATING_CMP_VALUE11 = S.RATING_CMP_VALUE11,
    T.RATING_CMP_VALUE12 = S.RATING_CMP_VALUE12,
    T.RATING_CMP_VALUE13 = S.RATING_CMP_VALUE13,
    T.RATING_CMP_VALUE14 = S.RATING_CMP_VALUE14,
    T.RATING_CMP_VALUE15 = S.RATING_CMP_VALUE15,
    T.RATING_CMP_VALUE16 = S.RATING_CMP_VALUE16,
    T.RATING_CMP_VALUE17 = S.RATING_CMP_VALUE17,
    T.RATING_CMP_VALUE18 = S.RATING_CMP_VALUE18,
    T.RATING_CMP_VALUE19 = S.RATING_CMP_VALUE19,
    T.RATING_CMP_VALUE20 = S.RATING_CMP_VALUE20,
    T.DATA_ORIGIN = 'S',
    T.LASTUPD_EW_DTTM = sysdate,
    T.BATCH_SID = 1234
where 
    T.VARIABLE_CHAR1 <> S.VARIABLE_CHAR1 or 
    T.VARIABLE_CHAR10 <> S.VARIABLE_CHAR10 or 
    T.VARIABLE_CHAR2 <> S.VARIABLE_CHAR2 or 
    T.VARIABLE_CHAR3 <> S.VARIABLE_CHAR3 or 
    T.VARIABLE_CHAR4 <> S.VARIABLE_CHAR4 or 
    T.VARIABLE_CHAR5 <> S.VARIABLE_CHAR5 or 
    T.VARIABLE_CHAR6 <> S.VARIABLE_CHAR6 or 
    T.VARIABLE_CHAR7 <> S.VARIABLE_CHAR7 or 
    T.VARIABLE_CHAR8 <> S.VARIABLE_CHAR8 or 
    T.VARIABLE_CHAR9 <> S.VARIABLE_CHAR9 or 
    T.VARIABLE_FLAG1 <> S.VARIABLE_FLAG1 or 
    T.VARIABLE_FLAG10 <> S.VARIABLE_FLAG10 or 
    T.VARIABLE_FLAG2 <> S.VARIABLE_FLAG2 or 
    T.VARIABLE_FLAG3 <> S.VARIABLE_FLAG3 or 
    T.VARIABLE_FLAG4 <> S.VARIABLE_FLAG4 or 
    T.VARIABLE_FLAG5 <> S.VARIABLE_FLAG5 or 
    T.VARIABLE_FLAG6 <> S.VARIABLE_FLAG6 or 
    T.VARIABLE_FLAG7 <> S.VARIABLE_FLAG7 or 
    T.VARIABLE_FLAG8 <> S.VARIABLE_FLAG8 or 
    T.VARIABLE_FLAG9 <> S.VARIABLE_FLAG9 or 
    T.VARIABLE_NUM1 <> S.VARIABLE_NUM1 or 
    T.VARIABLE_NUM10 <> S.VARIABLE_NUM10 or 
    T.VARIABLE_NUM2 <> S.VARIABLE_NUM2 or 
    T.VARIABLE_NUM3 <> S.VARIABLE_NUM3 or 
    T.VARIABLE_NUM4 <> S.VARIABLE_NUM4 or 
    T.VARIABLE_NUM5 <> S.VARIABLE_NUM5 or 
    T.VARIABLE_NUM6 <> S.VARIABLE_NUM6 or 
    T.VARIABLE_NUM7 <> S.VARIABLE_NUM7 or 
    T.VARIABLE_NUM8 <> S.VARIABLE_NUM8 or 
    T.VARIABLE_NUM9 <> S.VARIABLE_NUM9 or 
    T.RATING_CMP1 <> S.RATING_CMP1 or 
    T.RATING_CMP2 <> S.RATING_CMP2 or 
    T.RATING_CMP3 <> S.RATING_CMP3 or 
    T.RATING_CMP4 <> S.RATING_CMP4 or 
    T.RATING_CMP5 <> S.RATING_CMP5 or 
    T.RATING_CMP6 <> S.RATING_CMP6 or 
    T.RATING_CMP7 <> S.RATING_CMP7 or 
    T.RATING_CMP8 <> S.RATING_CMP8 or 
    T.RATING_CMP9 <> S.RATING_CMP9 or 
    T.RATING_CMP10 <> S.RATING_CMP10 or 
    T.RATING_CMP11 <> S.RATING_CMP11 or 
    T.RATING_CMP12 <> S.RATING_CMP12 or 
    T.RATING_CMP13 <> S.RATING_CMP13 or 
    T.RATING_CMP14 <> S.RATING_CMP14 or 
    T.RATING_CMP15 <> S.RATING_CMP15 or 
    T.RATING_CMP16 <> S.RATING_CMP16 or 
    T.RATING_CMP17 <> S.RATING_CMP17 or 
    T.RATING_CMP18 <> S.RATING_CMP18 or 
    T.RATING_CMP19 <> S.RATING_CMP19 or 
    T.RATING_CMP20 <> S.RATING_CMP20 or 
    T.RATING_CMP_VALUE1 <> S.RATING_CMP_VALUE1 or 
    T.RATING_CMP_VALUE2 <> S.RATING_CMP_VALUE2 or 
    T.RATING_CMP_VALUE3 <> S.RATING_CMP_VALUE3 or 
    T.RATING_CMP_VALUE4 <> S.RATING_CMP_VALUE4 or 
    T.RATING_CMP_VALUE5 <> S.RATING_CMP_VALUE5 or 
    T.RATING_CMP_VALUE6 <> S.RATING_CMP_VALUE6 or 
    T.RATING_CMP_VALUE7 <> S.RATING_CMP_VALUE7 or 
    T.RATING_CMP_VALUE8 <> S.RATING_CMP_VALUE8 or 
    T.RATING_CMP_VALUE9 <> S.RATING_CMP_VALUE9 or 
    T.RATING_CMP_VALUE10 <> S.RATING_CMP_VALUE10 or 
    T.RATING_CMP_VALUE11 <> S.RATING_CMP_VALUE11 or 
    T.RATING_CMP_VALUE12 <> S.RATING_CMP_VALUE12 or 
    T.RATING_CMP_VALUE13 <> S.RATING_CMP_VALUE13 or 
    T.RATING_CMP_VALUE14 <> S.RATING_CMP_VALUE14 or 
    T.RATING_CMP_VALUE15 <> S.RATING_CMP_VALUE15 or 
    T.RATING_CMP_VALUE16 <> S.RATING_CMP_VALUE16 or 
    T.RATING_CMP_VALUE17 <> S.RATING_CMP_VALUE17 or 
    T.RATING_CMP_VALUE18 <> S.RATING_CMP_VALUE18 or 
    T.RATING_CMP_VALUE19 <> S.RATING_CMP_VALUE19 or 
    T.RATING_CMP_VALUE20 <> S.RATING_CMP_VALUE20 or 
    T.DATA_ORIGIN = 'D' 
when not matched then 
insert (
    T.EMPLID, 
    T.INSTITUTION,
    T.AID_YEAR, 
    T.ACAD_CAREER,
    T.SRC_SYS_ID, 
    T.VARIABLE_CHAR1, 
    T.VARIABLE_CHAR10,
    T.VARIABLE_CHAR2, 
    T.VARIABLE_CHAR3, 
    T.VARIABLE_CHAR4, 
    T.VARIABLE_CHAR5, 
    T.VARIABLE_CHAR6, 
    T.VARIABLE_CHAR7, 
    T.VARIABLE_CHAR8, 
    T.VARIABLE_CHAR9, 
    T.VARIABLE_FLAG1, 
    T.VARIABLE_FLAG10,
    T.VARIABLE_FLAG2, 
    T.VARIABLE_FLAG3, 
    T.VARIABLE_FLAG4, 
    T.VARIABLE_FLAG5, 
    T.VARIABLE_FLAG6, 
    T.VARIABLE_FLAG7, 
    T.VARIABLE_FLAG8, 
    T.VARIABLE_FLAG9, 
    T.VARIABLE_NUM1,
    T.VARIABLE_NUM10, 
    T.VARIABLE_NUM2,
    T.VARIABLE_NUM3,
    T.VARIABLE_NUM4,
    T.VARIABLE_NUM5,
    T.VARIABLE_NUM6,
    T.VARIABLE_NUM7,
    T.VARIABLE_NUM8,
    T.VARIABLE_NUM9,
    T.RATING_CMP1,
    T.RATING_CMP2,
    T.RATING_CMP3,
    T.RATING_CMP4,
    T.RATING_CMP5,
    T.RATING_CMP6,
    T.RATING_CMP7,
    T.RATING_CMP8,
    T.RATING_CMP9,
    T.RATING_CMP10, 
    T.RATING_CMP11, 
    T.RATING_CMP12, 
    T.RATING_CMP13, 
    T.RATING_CMP14, 
    T.RATING_CMP15, 
    T.RATING_CMP16, 
    T.RATING_CMP17, 
    T.RATING_CMP18, 
    T.RATING_CMP19, 
    T.RATING_CMP20, 
    T.RATING_CMP_VALUE1,
    T.RATING_CMP_VALUE2,
    T.RATING_CMP_VALUE3,
    T.RATING_CMP_VALUE4,
    T.RATING_CMP_VALUE5,
    T.RATING_CMP_VALUE6,
    T.RATING_CMP_VALUE7,
    T.RATING_CMP_VALUE8,
    T.RATING_CMP_VALUE9,
    T.RATING_CMP_VALUE10, 
    T.RATING_CMP_VALUE11, 
    T.RATING_CMP_VALUE12, 
    T.RATING_CMP_VALUE13, 
    T.RATING_CMP_VALUE14, 
    T.RATING_CMP_VALUE15, 
    T.RATING_CMP_VALUE16, 
    T.RATING_CMP_VALUE17, 
    T.RATING_CMP_VALUE18, 
    T.RATING_CMP_VALUE19, 
    T.RATING_CMP_VALUE20, 
    T.LOAD_ERROR, 
    T.DATA_ORIGIN,
    T.CREATED_EW_DTTM,
    T.LASTUPD_EW_DTTM,
    T.BATCH_SID
    ) 
values (
    S.EMPLID, 
    S.INSTITUTION,
    S.AID_YEAR, 
    S.ACAD_CAREER,
    'CS90', 
    S.VARIABLE_CHAR1, 
    S.VARIABLE_CHAR10,
    S.VARIABLE_CHAR2, 
    S.VARIABLE_CHAR3, 
    S.VARIABLE_CHAR4, 
    S.VARIABLE_CHAR5, 
    S.VARIABLE_CHAR6, 
    S.VARIABLE_CHAR7, 
    S.VARIABLE_CHAR8, 
    S.VARIABLE_CHAR9, 
    S.VARIABLE_FLAG1, 
    S.VARIABLE_FLAG10,
    S.VARIABLE_FLAG2, 
    S.VARIABLE_FLAG3, 
    S.VARIABLE_FLAG4, 
    S.VARIABLE_FLAG5, 
    S.VARIABLE_FLAG6, 
    S.VARIABLE_FLAG7, 
    S.VARIABLE_FLAG8, 
    S.VARIABLE_FLAG9, 
    S.VARIABLE_NUM1,
    S.VARIABLE_NUM10, 
    S.VARIABLE_NUM2,
    S.VARIABLE_NUM3,
    S.VARIABLE_NUM4,
    S.VARIABLE_NUM5,
    S.VARIABLE_NUM6,
    S.VARIABLE_NUM7,
    S.VARIABLE_NUM8,
    S.VARIABLE_NUM9,
    S.RATING_CMP1,
    S.RATING_CMP2,
    S.RATING_CMP3,
    S.RATING_CMP4,
    S.RATING_CMP5,
    S.RATING_CMP6,
    S.RATING_CMP7,
    S.RATING_CMP8,
    S.RATING_CMP9,
    S.RATING_CMP10, 
    S.RATING_CMP11, 
    S.RATING_CMP12, 
    S.RATING_CMP13, 
    S.RATING_CMP14, 
    S.RATING_CMP15, 
    S.RATING_CMP16, 
    S.RATING_CMP17, 
    S.RATING_CMP18, 
    S.RATING_CMP19, 
    S.RATING_CMP20, 
    S.RATING_CMP_VALUE1,
    S.RATING_CMP_VALUE2,
    S.RATING_CMP_VALUE3,
    S.RATING_CMP_VALUE4,
    S.RATING_CMP_VALUE5,
    S.RATING_CMP_VALUE6,
    S.RATING_CMP_VALUE7,
    S.RATING_CMP_VALUE8,
    S.RATING_CMP_VALUE9,
    S.RATING_CMP_VALUE10, 
    S.RATING_CMP_VALUE11, 
    S.RATING_CMP_VALUE12, 
    S.RATING_CMP_VALUE13, 
    S.RATING_CMP_VALUE14, 
    S.RATING_CMP_VALUE15, 
    S.RATING_CMP_VALUE16, 
    S.RATING_CMP_VALUE17, 
    S.RATING_CMP_VALUE18, 
    S.RATING_CMP_VALUE19, 
    S.RATING_CMP_VALUE20, 
    'N',
    'S',
    sysdate,
    sysdate,
    1234);

strSqlCommand   := 'SET intRowCount';
intRowCount     := SQL%ROWCOUNT;

strSqlCommand := 'commit';
commit;

strMessage01    := '# of PS_STDNT_PKG_VAR rows merged: ' || TO_CHAR(intRowCount,'999,999,999,999');
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_DETAIL';
COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_DETAIL
        (
                i_TargetTableName   => 'PS_STDNT_PKG_VAR',
                i_Action            => 'MERGE',
                i_RowCount          => intRowCount
        );


strMessage01    := 'Updating CSSTG_OWNER.UM_STAGE_JOBS';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand   := 'update TABLE_STATUS on CSSTG_OWNER.UM_STAGE_JOBS';
update CSSTG_OWNER.UM_STAGE_JOBS
   set TABLE_STATUS = 'Deleting',
       OLD_MAX_SCN = NEW_MAX_SCN
 where TABLE_NAME = 'PS_STDNT_PKG_VAR';

strSqlCommand := 'commit';
commit;


strMessage01    := 'Updating DATA_ORIGIN on CSSTG_OWNER.PS_STDNT_PKG_VAR';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand   := 'update DATA_ORIGIN on CSSTG_OWNER.PS_STDNT_PKG_VAR';
update CSSTG_OWNER.PS_STDNT_PKG_VAR T
   set T.DATA_ORIGIN = 'D',
          T.LASTUPD_EW_DTTM = SYSDATE
 where T.DATA_ORIGIN <> 'D'
   and exists 
(select 1 from
(select EMPLID, INSTITUTION, AID_YEAR, ACAD_CAREER
   from CSSTG_OWNER.PS_STDNT_PKG_VAR T2
  where (select DELETE_FLG from CSSTG_OWNER.UM_STAGE_JOBS where TABLE_NAME = 'PS_STDNT_PKG_VAR') = 'Y'
  minus
 select EMPLID, INSTITUTION, AID_YEAR, ACAD_CAREER
   from SYSADM.PS_STDNT_PKG_VAR@SASOURCE S2
  where (select DELETE_FLG from CSSTG_OWNER.UM_STAGE_JOBS where TABLE_NAME = 'PS_STDNT_PKG_VAR') = 'Y'
   ) S
 where T.EMPLID = S.EMPLID
   and T.INSTITUTION = S.INSTITUTION
   and T.AID_YEAR = S.AID_YEAR
   and T.ACAD_CAREER = S.ACAD_CAREER
   and T.SRC_SYS_ID = 'CS90' 
   ) 
;

strSqlCommand   := 'SET intRowCount';
intRowCount     := SQL%ROWCOUNT;

strSqlCommand := 'commit';
commit;

strMessage01    := '# of PS_STDNT_PKG_VAR rows updated: ' || TO_CHAR(intRowCount,'999,999,999,999');
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_DETAIL';
COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_DETAIL
        (
                i_TargetTableName   => 'PS_STDNT_PKG_VAR',
                i_Action            => 'UPDATE',
                i_RowCount          => intRowCount
        );


strMessage01    := 'Updating CSSTG_OWNER.UM_STAGE_JOBS';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand   := 'update END_DT on CSSTG_OWNER.UM_STAGE_JOBS';

update CSSTG_OWNER.UM_STAGE_JOBS
   set TABLE_STATUS = 'Complete',
       END_DT = SYSDATE
 where TABLE_NAME = 'PS_STDNT_PKG_VAR'
;

strSqlCommand := 'commit';
commit;


strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_SUCCESS';
COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_SUCCESS;

strMessage01    := strProcessName || ' is complete.';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);


EXCEPTION
    WHEN OTHERS THEN
        numSqlCode := SQLCODE;
        strSqlErrm := SQLERRM;

        ROLLBACK;
  
        strMessage01 := 'Error code: ' || TO_CHAR(SQLCODE) || ' Error Message: ' || SQLERRM;
        strMessage02 := TO_CHAR(SQLCODE);
  
        COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_FAILURE
                       (i_SqlCommand    => strSqlCommand,
                        i_ErrorText     => strMessage01,
                        i_ErrorCode     => strMessage02,
                        i_ErrorMessage  => strSqlErrm
                       );
               
        strMessage01 := 'Error...'
                        || strNewLine   || 'SQL Command:   ' || strSqlCommand
                        || strNewLine   || 'Error code:    ' || numSqlCode
                        || strNewLine   || 'Error Message: ' || strSqlErrm;

        COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);
        RAISE_APPLICATION_ERROR( -20001, strMessage01);

END PS_STDNT_PKG_VAR_P;
/
