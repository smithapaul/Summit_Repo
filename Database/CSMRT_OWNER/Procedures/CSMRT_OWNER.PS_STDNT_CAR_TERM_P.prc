CREATE OR REPLACE PROCEDURE             "PS_STDNT_CAR_TERM_P" AUTHID CURRENT_USER IS

------------------------------------------------------------------------
-- George Adams
--
-- Loads stage table PS_STDNT_CAR_TERM from PeopleSoft table PS_STDNT_CAR_TERM.
--
-- V01  SMT-xxxx 05/11/2017,    Jim Doucette
--                              Converted from PS_STDNT_CAR_TERM.SQL
--
------------------------------------------------------------------------

        strMartId                       Varchar2(50)    := 'CSW';
        strProcessName                  Varchar2(100)   := 'PS_STDNT_CAR_TERM';
        intProcessSid                   Integer;
        dtProcessStart                  Date            := SYSDATE;
        strMessage01                    Varchar2(4000);
        strMessage02                    Varchar2(512);
        strMessage03                    Varchar2(512)   :='';
        strNewLine                      Varchar2(2)     := chr(13) || chr(10);
        strSqlCommand                   Varchar2(32767) :='';
        strSqlDynamic                   Varchar2(32767) :='';
        strClientInfo                   Varchar2(100);
        intRowCount                     Integer;
        intTotalRowCount                Integer         := 0;
        numSqlCode                      Number;
        strSqlErrm                      Varchar2(4000);
        intTries                        Integer;

BEGIN
strSqlCommand := 'DBMS_APPLICATION_INFO.SET_CLIENT_INFO';
DBMS_APPLICATION_INFO.SET_CLIENT_INFO (strProcessName);

strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_INIT';
COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_INIT
        (
                i_MartId                => strMartId,
                i_ProcessName           => strProcessName,
                i_ProcessStartTime      => dtProcessStart,
                o_ProcessSid            => intProcessSid
        );

strMessage01    := 'Updating CSSTG_OWNER.UM_STAGE_JOBS';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);


strSqlCommand   := 'update START_DT on CSSTG_OWNER.UM_STAGE_JOBS';
update CSSTG_OWNER.UM_STAGE_JOBS
   set TABLE_STATUS = 'Reading',
       START_DT = sysdate,
       END_DT = NULL
 where TABLE_NAME = 'PS_STDNT_CAR_TERM'
;

strSqlCommand := 'commit';
commit;


strSqlCommand   := 'update NEW_MAX_SCN on CSSTG_OWNER.UM_STAGE_JOBS';
update CSSTG_OWNER.UM_STAGE_JOBS
   set TABLE_STATUS = 'Merging',
       NEW_MAX_SCN = (select /*+ full(S) */ max(ORA_ROWSCN) from SYSADM.PS_STDNT_CAR_TERM@SASOURCE S)
 where TABLE_NAME = 'PS_STDNT_CAR_TERM'
;

strSqlCommand := 'commit';
commit;


strMessage01    := 'Merging data into CSSTG_OWNER.PS_STDNT_CAR_TERM';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand   := 'merge into CSSTG_OWNER.PS_STDNT_CAR_TERM';
merge /*+ use_hash(S,T) */ into CSSTG_OWNER.PS_STDNT_CAR_TERM T
using (select /*+ full(S) */
    nvl(trim(EMPLID),'-') EMPLID,
    nvl(trim(ACAD_CAREER),'-') ACAD_CAREER,
    nvl(trim(INSTITUTION),'-') INSTITUTION,
    nvl(trim(STRM),'-') STRM,
    to_date(to_char(case when REG_CARD_DATE < '01-JAN-1800' then NULL else REG_CARD_DATE end,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') REG_CARD_DATE,
    nvl(trim(WITHDRAW_CODE),'-') WITHDRAW_CODE,
    nvl(trim(WITHDRAW_REASON),'-') WITHDRAW_REASON,
    to_date(to_char(case when WITHDRAW_DATE < '01-JAN-1800' then NULL else WITHDRAW_DATE end,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') WITHDRAW_DATE,
    to_date(to_char(case when LAST_DATE_ATTENDED < '01-JAN-1800' then NULL else LAST_DATE_ATTENDED end,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') LAST_DATE_ATTENDED,
    nvl(STDNT_CAR_NBR,0) STDNT_CAR_NBR,
    nvl(trim(ACAD_PROG_PRIMARY),'-') ACAD_PROG_PRIMARY,
    nvl(trim(ACAD_LOAD_APPR),'-') ACAD_LOAD_APPR,
    nvl(trim(ACADEMIC_LOAD),'-') ACADEMIC_LOAD,
    nvl(trim(FA_LOAD),'-') FA_LOAD,
    nvl(trim(ACAD_LEVEL_PROJ),'-') ACAD_LEVEL_PROJ,
    nvl(trim(ACAD_LEVEL_BOT),'-') ACAD_LEVEL_BOT,
    nvl(trim(ACAD_LEVEL_EOT),'-') ACAD_LEVEL_EOT,
    nvl(trim(NSLDS_LOAN_YEAR),'-') NSLDS_LOAN_YEAR,
    nvl(trim(OVRD_ACAD_LVL_PROJ),'-') OVRD_ACAD_LVL_PROJ,
    nvl(trim(OVRD_ACAD_LVL_ALL),'-') OVRD_ACAD_LVL_ALL,
    nvl(trim(ELIG_TO_ENROLL),'-') ELIG_TO_ENROLL,
    nvl(trim(OVRD_MAX_UNITS),'-') OVRD_MAX_UNITS,
    nvl(MAX_TOTAL_UNIT,0) MAX_TOTAL_UNIT,
    nvl(MAX_NOGPA_UNIT,0) MAX_NOGPA_UNIT,
    nvl(MAX_AUDIT_UNIT,0) MAX_AUDIT_UNIT,
    nvl(MAX_WAIT_UNIT,0) MAX_WAIT_UNIT,
    nvl(MIN_TOTAL_UNIT,0) MIN_TOTAL_UNIT,
    nvl(trim(OVRD_BILL_UNITS),'-') OVRD_BILL_UNITS,
    nvl(PROJ_BILL_UNT,0) PROJ_BILL_UNT,
    nvl(UNT_TAKEN_PRGRSS,0) UNT_TAKEN_PRGRSS,
    nvl(UNT_PASSD_PRGRSS,0) UNT_PASSD_PRGRSS,
    nvl(UNT_TAKEN_GPA,0) UNT_TAKEN_GPA,
    nvl(UNT_PASSD_GPA,0) UNT_PASSD_GPA,
    nvl(UNT_TAKEN_NOGPA,0) UNT_TAKEN_NOGPA,
    nvl(UNT_PASSD_NOGPA,0) UNT_PASSD_NOGPA,
    nvl(UNT_INPROG_GPA,0) UNT_INPROG_GPA,
    nvl(UNT_INPROG_NOGPA,0) UNT_INPROG_NOGPA,
    nvl(GRADE_POINTS,0) GRADE_POINTS,
    nvl(UNT_AUDIT,0) UNT_AUDIT,
    nvl(UNT_TRNSFR,0) UNT_TRNSFR,
    nvl(TRF_TAKEN_GPA,0) TRF_TAKEN_GPA,
    nvl(TRF_TAKEN_NOGPA,0) TRF_TAKEN_NOGPA,
    nvl(TRF_PASSED_GPA,0) TRF_PASSED_GPA,
    nvl(TRF_PASSED_NOGPA,0) TRF_PASSED_NOGPA,
    nvl(TRF_GRADE_POINTS,0) TRF_GRADE_POINTS,
    nvl(UNT_TEST_CREDIT,0) UNT_TEST_CREDIT,
    nvl(UNT_OTHER,0) UNT_OTHER,
    nvl(UNT_TAKEN_FA,0) UNT_TAKEN_FA,
    nvl(UNT_PASSD_FA,0) UNT_PASSD_FA,
    nvl(UNT_TAKEN_FA_GPA,0) UNT_TAKEN_FA_GPA,
    nvl(GRADE_POINTS_FA,0) GRADE_POINTS_FA,
    nvl(UNT_TERM_TOT,0) UNT_TERM_TOT,
    nvl(trim(RESET_CUM_STATS),'-') RESET_CUM_STATS,
    nvl(TOT_TAKEN_PRGRSS,0) TOT_TAKEN_PRGRSS,
    nvl(TOT_PASSD_PRGRSS,0) TOT_PASSD_PRGRSS,
    nvl(TOT_TAKEN_GPA,0) TOT_TAKEN_GPA,
    nvl(TOT_PASSD_GPA,0) TOT_PASSD_GPA,
    nvl(TOT_TAKEN_NOGPA,0) TOT_TAKEN_NOGPA,
    nvl(TOT_PASSD_NOGPA,0) TOT_PASSD_NOGPA,
    nvl(TOT_INPROG_GPA,0) TOT_INPROG_GPA,
    nvl(TOT_INPROG_NOGPA,0) TOT_INPROG_NOGPA,
    nvl(TOT_AUDIT,0) TOT_AUDIT,
    nvl(TOT_TRNSFR,0) TOT_TRNSFR,
    nvl(TOT_TEST_CREDIT,0) TOT_TEST_CREDIT,
    nvl(TOT_OTHER,0) TOT_OTHER,
    nvl(TOT_CUMULATIVE,0) TOT_CUMULATIVE,
    nvl(TOT_GRADE_POINTS,0) TOT_GRADE_POINTS,
    nvl(TOT_TAKEN_FA,0) TOT_TAKEN_FA,
    nvl(TOT_PASSD_FA,0) TOT_PASSD_FA,
    nvl(TOT_TAKEN_FA_GPA,0) TOT_TAKEN_FA_GPA,
    nvl(TOT_GRD_POINTS_FA,0) TOT_GRD_POINTS_FA,
    nvl(trim(FORM_OF_STUDY),'-') FORM_OF_STUDY,
    nvl(trim(TERM_TYPE),'-') TERM_TYPE,
    nvl(CLASS_RANK_NBR,0) CLASS_RANK_NBR,
    nvl(CLASS_RANK_TOT,0) CLASS_RANK_TOT,
    nvl(trim(SEL_GROUP),'-') SEL_GROUP,
    nvl(trim(TUIT_CALC_REQ),'-') TUIT_CALC_REQ,
    to_date(to_char(case when TUIT_CALC_DTTM < '01-JAN-1800' then NULL else TUIT_CALC_DTTM end,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') TUIT_CALC_DTTM,
    nvl(trim(FA_STATS_CALC_REQ),'-') FA_STATS_CALC_REQ,
    to_date(to_char(case when FA_STATS_CALC_DTTM < '01-JAN-1800' then NULL else FA_STATS_CALC_DTTM end,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') FA_STATS_CALC_DTTM,
    nvl(trim(FA_ELIGIBILITY),'-') FA_ELIGIBILITY,
    nvl(trim(BILLING_CAREER),'-') BILLING_CAREER,
    nvl(UNIT_MULTIPLIER,0) UNIT_MULTIPLIER,
    nvl(trim(ACAD_YEAR),'-') ACAD_YEAR,
    nvl(trim(ACAD_GROUP_ADVIS),'-') ACAD_GROUP_ADVIS,
    nvl(CUR_RESIDENT_TERMS,0) CUR_RESIDENT_TERMS,
    nvl(TRF_RESIDENT_TERMS,0) TRF_RESIDENT_TERMS,
    nvl(CUM_RESIDENT_TERMS,0) CUM_RESIDENT_TERMS,
    nvl(REFUND_PCT,0) REFUND_PCT,
    nvl(trim(REFUND_SCHEME),'-') REFUND_SCHEME,
    nvl(trim(PRO_RATA_ELIGIBLE),'-') PRO_RATA_ELIGIBLE,
    to_date(to_char(case when FULLY_ENRL_DT < '01-JAN-1800' then NULL else FULLY_ENRL_DT end,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') FULLY_ENRL_DT,
    to_date(to_char(case when ENRL_ON_TRANS_DT < '01-JAN-1800' then NULL else ENRL_ON_TRANS_DT end,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') ENRL_ON_TRANS_DT,
    to_date(to_char(case when STATS_ON_TRANS_DT < '01-JAN-1800' then NULL else STATS_ON_TRANS_DT end,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') STATS_ON_TRANS_DT,
    to_date(to_char(case when FULLY_GRADED_DT < '01-JAN-1800' then NULL else FULLY_GRADED_DT end,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') FULLY_GRADED_DT,
    nvl(trim(EXT_ORG_ID),'-') EXT_ORG_ID,
    nvl(trim(COUNTRY),'-') COUNTRY,
    nvl(trim(STUDY_AGREEMENT),'-') STUDY_AGREEMENT,
    to_date(to_char(case when START_DATE < '01-JAN-1800' then NULL else START_DATE end,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') START_DATE,
    to_date(to_char(case when END_DATE < '01-JAN-1800' then NULL else END_DATE end,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') END_DATE,
    nvl(MAX_CRSE_COUNT,0) MAX_CRSE_COUNT,
    nvl(CUR_GPA,0) CUR_GPA,
    nvl(CUM_GPA,0) CUM_GPA,
    nvl(trim(REGISTERED),'-') REGISTERED,
    nvl(trim(OVRD_TUIT_GROUP),'-') OVRD_TUIT_GROUP,
    nvl(trim(OVRD_WDRW_SCHED),'-') OVRD_WDRW_SCHED,
    nvl(TUITION_RES_TERMS,0) TUITION_RES_TERMS,
    nvl(trim(OVRD_INIT_ADD_FEE),'-') OVRD_INIT_ADD_FEE,
    nvl(trim(OVRD_INIT_ENR_FEE),'-') OVRD_INIT_ENR_FEE,
    nvl(TC_UNITS_ADJUST,0) TC_UNITS_ADJUST,
    nvl(LOCK_IN_AMT,0) LOCK_IN_AMT,
    to_date(to_char(case when LOCK_IN_DT < '01-JAN-1800' then NULL else LOCK_IN_DT end,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') LOCK_IN_DT,
    nvl(trim(ACAD_CAREER_FIRST),'-') ACAD_CAREER_FIRST,
    to_date(to_char(case when ACADEMIC_LOAD_DT < '01-JAN-1800' then NULL else ACADEMIC_LOAD_DT end,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') ACADEMIC_LOAD_DT,
    to_date(to_char(case when UNTPRG_CHG_NSLC_DT < '01-JAN-1800' then NULL else UNTPRG_CHG_NSLC_DT end,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') UNTPRG_CHG_NSLC_DT,
    to_date(to_char(case when SSR_ACTIVATION_DT < '01-JAN-1800' then NULL else SSR_ACTIVATION_DT end,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') SSR_ACTIVATION_DT,
    nvl(SSR_TRF_CUR_GPA,0) SSR_TRF_CUR_GPA,
    nvl(SSR_COMB_CUR_GPA,0) SSR_COMB_CUR_GPA,
    nvl(SSR_CUM_EN_GPA,0) SSR_CUM_EN_GPA,
    nvl(SSR_TOT_EN_GRDPTS,0) SSR_TOT_EN_GRDPTS,
    nvl(SSR_TOT_EN_TKNGPA,0) SSR_TOT_EN_TKNGPA,
    nvl(SSR_CUM_TR_GPA,0) SSR_CUM_TR_GPA,
    nvl(SSR_TOT_TR_GRDPTS,0) SSR_TOT_TR_GRDPTS,
    nvl(SSR_TOT_TR_TKNGPA,0) SSR_TOT_TR_TKNGPA
from SYSADM.PS_STDNT_CAR_TERM@SASOURCE S
where ORA_ROWSCN > (select OLD_MAX_SCN from CSSTG_OWNER.UM_STAGE_JOBS where TABLE_NAME = 'PS_STDNT_CAR_TERM') 
   and EMPLID between '00000000' and '99999999'
   and length(EMPLID) = 8) S
   on (
    T.EMPLID = S.EMPLID and
    T.ACAD_CAREER = S.ACAD_CAREER and
    T.INSTITUTION = S.INSTITUTION and
    T.STRM = S.STRM and
    T.SRC_SYS_ID = 'CS90')
when matched then update set
    T.REG_CARD_DATE = S.REG_CARD_DATE,
    T.WITHDRAW_CODE = S.WITHDRAW_CODE,
    T.WITHDRAW_REASON = S.WITHDRAW_REASON,
    T.WITHDRAW_DATE = S.WITHDRAW_DATE,
    T.LAST_DATE_ATTENDED = S.LAST_DATE_ATTENDED,
    T.STDNT_CAR_NBR = S.STDNT_CAR_NBR,
    T.ACAD_PROG_PRIMARY = S.ACAD_PROG_PRIMARY,
    T.ACAD_LOAD_APPR = S.ACAD_LOAD_APPR,
    T.ACADEMIC_LOAD = S.ACADEMIC_LOAD,
    T.FA_LOAD = S.FA_LOAD,
    T.ACAD_LEVEL_PROJ = S.ACAD_LEVEL_PROJ,
    T.ACAD_LEVEL_BOT = S.ACAD_LEVEL_BOT,
    T.ACAD_LEVEL_EOT = S.ACAD_LEVEL_EOT,
    T.NSLDS_LOAN_YEAR = S.NSLDS_LOAN_YEAR,
    T.OVRD_ACAD_LVL_PROJ = S.OVRD_ACAD_LVL_PROJ,
    T.OVRD_ACAD_LVL_ALL = S.OVRD_ACAD_LVL_ALL,
    T.ELIG_TO_ENROLL = S.ELIG_TO_ENROLL,
    T.OVRD_MAX_UNITS = S.OVRD_MAX_UNITS,
    T.MAX_TOTAL_UNIT = S.MAX_TOTAL_UNIT,
    T.MAX_NOGPA_UNIT = S.MAX_NOGPA_UNIT,
    T.MAX_AUDIT_UNIT = S.MAX_AUDIT_UNIT,
    T.MAX_WAIT_UNIT = S.MAX_WAIT_UNIT,
    T.MIN_TOTAL_UNIT = S.MIN_TOTAL_UNIT,
    T.OVRD_BILL_UNITS = S.OVRD_BILL_UNITS,
    T.PROJ_BILL_UNT = S.PROJ_BILL_UNT,
    T.UNT_TAKEN_PRGRSS = S.UNT_TAKEN_PRGRSS,
    T.UNT_PASSD_PRGRSS = S.UNT_PASSD_PRGRSS,
    T.UNT_TAKEN_GPA = S.UNT_TAKEN_GPA,
    T.UNT_PASSD_GPA = S.UNT_PASSD_GPA,
    T.UNT_TAKEN_NOGPA = S.UNT_TAKEN_NOGPA,
    T.UNT_PASSD_NOGPA = S.UNT_PASSD_NOGPA,
    T.UNT_INPROG_GPA = S.UNT_INPROG_GPA,
    T.UNT_INPROG_NOGPA = S.UNT_INPROG_NOGPA,
    T.GRADE_POINTS = S.GRADE_POINTS,
    T.UNT_AUDIT = S.UNT_AUDIT,
    T.UNT_TRNSFR = S.UNT_TRNSFR,
    T.TRF_TAKEN_GPA = S.TRF_TAKEN_GPA,
    T.TRF_TAKEN_NOGPA = S.TRF_TAKEN_NOGPA,
    T.TRF_PASSED_GPA = S.TRF_PASSED_GPA,
    T.TRF_PASSED_NOGPA = S.TRF_PASSED_NOGPA,
    T.TRF_GRADE_POINTS = S.TRF_GRADE_POINTS,
    T.UNT_TEST_CREDIT = S.UNT_TEST_CREDIT,
    T.UNT_OTHER = S.UNT_OTHER,
    T.UNT_TAKEN_FA = S.UNT_TAKEN_FA,
    T.UNT_PASSD_FA = S.UNT_PASSD_FA,
    T.UNT_TAKEN_FA_GPA = S.UNT_TAKEN_FA_GPA,
    T.GRADE_POINTS_FA = S.GRADE_POINTS_FA,
    T.UNT_TERM_TOT = S.UNT_TERM_TOT,
    T.RESET_CUM_STATS = S.RESET_CUM_STATS,
    T.TOT_TAKEN_PRGRSS = S.TOT_TAKEN_PRGRSS,
    T.TOT_PASSD_PRGRSS = S.TOT_PASSD_PRGRSS,
    T.TOT_TAKEN_GPA = S.TOT_TAKEN_GPA,
    T.TOT_PASSD_GPA = S.TOT_PASSD_GPA,
    T.TOT_TAKEN_NOGPA = S.TOT_TAKEN_NOGPA,
    T.TOT_PASSD_NOGPA = S.TOT_PASSD_NOGPA,
    T.TOT_INPROG_GPA = S.TOT_INPROG_GPA,
    T.TOT_INPROG_NOGPA = S.TOT_INPROG_NOGPA,
    T.TOT_AUDIT = S.TOT_AUDIT,
    T.TOT_TRNSFR = S.TOT_TRNSFR,
    T.TOT_TEST_CREDIT = S.TOT_TEST_CREDIT,
    T.TOT_OTHER = S.TOT_OTHER,
    T.TOT_CUMULATIVE = S.TOT_CUMULATIVE,
    T.TOT_GRADE_POINTS = S.TOT_GRADE_POINTS,
    T.TOT_TAKEN_FA = S.TOT_TAKEN_FA,
    T.TOT_PASSD_FA = S.TOT_PASSD_FA,
    T.TOT_TAKEN_FA_GPA = S.TOT_TAKEN_FA_GPA,
    T.TOT_GRD_POINTS_FA = S.TOT_GRD_POINTS_FA,
    T.FORM_OF_STUDY = S.FORM_OF_STUDY,
    T.TERM_TYPE = S.TERM_TYPE,
    T.CLASS_RANK_NBR = S.CLASS_RANK_NBR,
    T.CLASS_RANK_TOT = S.CLASS_RANK_TOT,
    T.SEL_GROUP = S.SEL_GROUP,
    T.TUIT_CALC_REQ = S.TUIT_CALC_REQ,
    T.TUIT_CALC_DTTM = S.TUIT_CALC_DTTM,
    T.FA_STATS_CALC_REQ = S.FA_STATS_CALC_REQ,
    T.FA_STATS_CALC_DTTM = S.FA_STATS_CALC_DTTM,
    T.FA_ELIGIBILITY = S.FA_ELIGIBILITY,
    T.BILLING_CAREER = S.BILLING_CAREER,
    T.UNIT_MULTIPLIER = S.UNIT_MULTIPLIER,
    T.ACAD_YEAR = S.ACAD_YEAR,
    T.ACAD_GROUP_ADVIS = S.ACAD_GROUP_ADVIS,
    T.CUR_RESIDENT_TERMS = S.CUR_RESIDENT_TERMS,
    T.TRF_RESIDENT_TERMS = S.TRF_RESIDENT_TERMS,
    T.CUM_RESIDENT_TERMS = S.CUM_RESIDENT_TERMS,
    T.REFUND_PCT = S.REFUND_PCT,
    T.REFUND_SCHEME = S.REFUND_SCHEME,
    T.PRO_RATA_ELIGIBLE = S.PRO_RATA_ELIGIBLE,
    T.FULLY_ENRL_DT = S.FULLY_ENRL_DT,
    T.ENRL_ON_TRANS_DT = S.ENRL_ON_TRANS_DT,
    T.STATS_ON_TRANS_DT = S.STATS_ON_TRANS_DT,
    T.FULLY_GRADED_DT = S.FULLY_GRADED_DT,
    T.EXT_ORG_ID = S.EXT_ORG_ID,
    T.COUNTRY = S.COUNTRY,
    T.STUDY_AGREEMENT = S.STUDY_AGREEMENT,
    T.START_DATE = S.START_DATE,
    T.END_DATE = S.END_DATE,
    T.MAX_CRSE_COUNT = S.MAX_CRSE_COUNT,
    T.CUR_GPA = S.CUR_GPA,
    T.CUM_GPA = S.CUM_GPA,
    T.REGISTERED = S.REGISTERED,
    T.OVRD_TUIT_GROUP = S.OVRD_TUIT_GROUP,
    T.OVRD_WDRW_SCHED = S.OVRD_WDRW_SCHED,
    T.TUITION_RES_TERMS = S.TUITION_RES_TERMS,
    T.OVRD_INIT_ADD_FEE = S.OVRD_INIT_ADD_FEE,
    T.OVRD_INIT_ENR_FEE = S.OVRD_INIT_ENR_FEE,
    T.TC_UNITS_ADJUST = S.TC_UNITS_ADJUST,
    T.LOCK_IN_AMT = S.LOCK_IN_AMT,
    T.LOCK_IN_DT = S.LOCK_IN_DT,
    T.ACAD_CAREER_FIRST = S.ACAD_CAREER_FIRST,
    T.ACADEMIC_LOAD_DT = S.ACADEMIC_LOAD_DT,
    T.UNTPRG_CHG_NSLC_DT = S.UNTPRG_CHG_NSLC_DT,
    T.SSR_ACTIVATION_DT = S.SSR_ACTIVATION_DT,
    T.SSR_TRF_CUR_GPA = S.SSR_TRF_CUR_GPA,
    T.SSR_COMB_CUR_GPA = S.SSR_COMB_CUR_GPA,
    T.SSR_CUM_EN_GPA = S.SSR_CUM_EN_GPA,
    T.SSR_TOT_EN_GRDPTS = S.SSR_TOT_EN_GRDPTS,
    T.SSR_TOT_EN_TKNGPA = S.SSR_TOT_EN_TKNGPA,
    T.SSR_CUM_TR_GPA = S.SSR_CUM_TR_GPA,
    T.SSR_TOT_TR_GRDPTS = S.SSR_TOT_TR_GRDPTS,
    T.SSR_TOT_TR_TKNGPA = S.SSR_TOT_TR_TKNGPA,
    T.DATA_ORIGIN = 'S',
    T.LASTUPD_EW_DTTM = sysdate,
    T.BATCH_SID   = 1234
where
    nvl(trim(T.REG_CARD_DATE),0) <> nvl(trim(S.REG_CARD_DATE),0) or
    T.WITHDRAW_CODE <> S.WITHDRAW_CODE or
    T.WITHDRAW_REASON <> S.WITHDRAW_REASON or
    nvl(trim(T.WITHDRAW_DATE),0) <> nvl(trim(S.WITHDRAW_DATE),0) or
    nvl(trim(T.LAST_DATE_ATTENDED),0) <> nvl(trim(S.LAST_DATE_ATTENDED),0) or
    T.STDNT_CAR_NBR <> S.STDNT_CAR_NBR or
    T.ACAD_PROG_PRIMARY <> S.ACAD_PROG_PRIMARY or
    T.ACAD_LOAD_APPR <> S.ACAD_LOAD_APPR or
    T.ACADEMIC_LOAD <> S.ACADEMIC_LOAD or
    T.FA_LOAD <> S.FA_LOAD or
    T.ACAD_LEVEL_PROJ <> S.ACAD_LEVEL_PROJ or
    T.ACAD_LEVEL_BOT <> S.ACAD_LEVEL_BOT or
    T.ACAD_LEVEL_EOT <> S.ACAD_LEVEL_EOT or
    T.NSLDS_LOAN_YEAR <> S.NSLDS_LOAN_YEAR or
    T.OVRD_ACAD_LVL_PROJ <> S.OVRD_ACAD_LVL_PROJ or
    T.OVRD_ACAD_LVL_ALL <> S.OVRD_ACAD_LVL_ALL or
    T.ELIG_TO_ENROLL <> S.ELIG_TO_ENROLL or
    T.OVRD_MAX_UNITS <> S.OVRD_MAX_UNITS or
    T.MAX_TOTAL_UNIT <> S.MAX_TOTAL_UNIT or
    T.MAX_NOGPA_UNIT <> S.MAX_NOGPA_UNIT or
    T.MAX_AUDIT_UNIT <> S.MAX_AUDIT_UNIT or
    T.MAX_WAIT_UNIT <> S.MAX_WAIT_UNIT or
    T.MIN_TOTAL_UNIT <> S.MIN_TOTAL_UNIT or
    T.OVRD_BILL_UNITS <> S.OVRD_BILL_UNITS or
    T.PROJ_BILL_UNT <> S.PROJ_BILL_UNT or
    T.UNT_TAKEN_PRGRSS <> S.UNT_TAKEN_PRGRSS or
    T.UNT_PASSD_PRGRSS <> S.UNT_PASSD_PRGRSS or
    T.UNT_TAKEN_GPA <> S.UNT_TAKEN_GPA or
    T.UNT_PASSD_GPA <> S.UNT_PASSD_GPA or
    T.UNT_TAKEN_NOGPA <> S.UNT_TAKEN_NOGPA or
    T.UNT_PASSD_NOGPA <> S.UNT_PASSD_NOGPA or
    T.UNT_INPROG_GPA <> S.UNT_INPROG_GPA or
    T.UNT_INPROG_NOGPA <> S.UNT_INPROG_NOGPA or
    T.GRADE_POINTS <> S.GRADE_POINTS or
    T.UNT_AUDIT <> S.UNT_AUDIT or
    T.UNT_TRNSFR <> S.UNT_TRNSFR or
    T.TRF_TAKEN_GPA <> S.TRF_TAKEN_GPA or
    T.TRF_TAKEN_NOGPA <> S.TRF_TAKEN_NOGPA or
    T.TRF_PASSED_GPA <> S.TRF_PASSED_GPA or
    T.TRF_PASSED_NOGPA <> S.TRF_PASSED_NOGPA or
    T.TRF_GRADE_POINTS <> S.TRF_GRADE_POINTS or
    T.UNT_TEST_CREDIT <> S.UNT_TEST_CREDIT or
    T.UNT_OTHER <> S.UNT_OTHER or
    T.UNT_TAKEN_FA <> S.UNT_TAKEN_FA or
    T.UNT_PASSD_FA <> S.UNT_PASSD_FA or
    T.UNT_TAKEN_FA_GPA <> S.UNT_TAKEN_FA_GPA or
    T.GRADE_POINTS_FA <> S.GRADE_POINTS_FA or
    T.UNT_TERM_TOT <> S.UNT_TERM_TOT or
    T.RESET_CUM_STATS <> S.RESET_CUM_STATS or
    T.TOT_TAKEN_PRGRSS <> S.TOT_TAKEN_PRGRSS or
    T.TOT_PASSD_PRGRSS <> S.TOT_PASSD_PRGRSS or
    T.TOT_TAKEN_GPA <> S.TOT_TAKEN_GPA or
    T.TOT_PASSD_GPA <> S.TOT_PASSD_GPA or
    T.TOT_TAKEN_NOGPA <> S.TOT_TAKEN_NOGPA or
    T.TOT_PASSD_NOGPA <> S.TOT_PASSD_NOGPA or
    T.TOT_INPROG_GPA <> S.TOT_INPROG_GPA or
    T.TOT_INPROG_NOGPA <> S.TOT_INPROG_NOGPA or
    T.TOT_AUDIT <> S.TOT_AUDIT or
    T.TOT_TRNSFR <> S.TOT_TRNSFR or
    T.TOT_TEST_CREDIT <> S.TOT_TEST_CREDIT or
    T.TOT_OTHER <> S.TOT_OTHER or
    T.TOT_CUMULATIVE <> S.TOT_CUMULATIVE or
    T.TOT_GRADE_POINTS <> S.TOT_GRADE_POINTS or
    T.TOT_TAKEN_FA <> S.TOT_TAKEN_FA or
    T.TOT_PASSD_FA <> S.TOT_PASSD_FA or
    T.TOT_TAKEN_FA_GPA <> S.TOT_TAKEN_FA_GPA or
    T.TOT_GRD_POINTS_FA <> S.TOT_GRD_POINTS_FA or
    T.FORM_OF_STUDY <> S.FORM_OF_STUDY or
    T.TERM_TYPE <> S.TERM_TYPE or
    T.CLASS_RANK_NBR <> S.CLASS_RANK_NBR or
    T.CLASS_RANK_TOT <> S.CLASS_RANK_TOT or
    T.SEL_GROUP <> S.SEL_GROUP or
    T.TUIT_CALC_REQ <> S.TUIT_CALC_REQ or
    nvl(trim(T.TUIT_CALC_DTTM),0) <> nvl(trim(S.TUIT_CALC_DTTM),0) or
    T.FA_STATS_CALC_REQ <> S.FA_STATS_CALC_REQ or
    nvl(trim(T.FA_STATS_CALC_DTTM),0) <> nvl(trim(S.FA_STATS_CALC_DTTM),0) or
    T.FA_ELIGIBILITY <> S.FA_ELIGIBILITY or
    T.BILLING_CAREER <> S.BILLING_CAREER or
    T.UNIT_MULTIPLIER <> S.UNIT_MULTIPLIER or
    T.ACAD_YEAR <> S.ACAD_YEAR or
    T.ACAD_GROUP_ADVIS <> S.ACAD_GROUP_ADVIS or
    T.CUR_RESIDENT_TERMS <> S.CUR_RESIDENT_TERMS or
    T.TRF_RESIDENT_TERMS <> S.TRF_RESIDENT_TERMS or
    T.CUM_RESIDENT_TERMS <> S.CUM_RESIDENT_TERMS or
    T.REFUND_PCT <> S.REFUND_PCT or
    T.REFUND_SCHEME <> S.REFUND_SCHEME or
    T.PRO_RATA_ELIGIBLE <> S.PRO_RATA_ELIGIBLE or
    T.FULLY_ENRL_DT <> S.FULLY_ENRL_DT or
    T.ENRL_ON_TRANS_DT <> S.ENRL_ON_TRANS_DT or
    T.STATS_ON_TRANS_DT <> S.STATS_ON_TRANS_DT or
    T.FULLY_GRADED_DT <> S.FULLY_GRADED_DT or
    T.EXT_ORG_ID <> S.EXT_ORG_ID or
    T.COUNTRY <> S.COUNTRY or
    T.STUDY_AGREEMENT <> S.STUDY_AGREEMENT or
    nvl(trim(T.START_DATE),0) <> nvl(trim(S.START_DATE),0) or
    nvl(trim(T.END_DATE),0) <> nvl(trim(S.END_DATE),0) or
    T.MAX_CRSE_COUNT <> S.MAX_CRSE_COUNT or
    T.CUR_GPA <> S.CUR_GPA or
    T.CUM_GPA <> S.CUM_GPA or
    T.REGISTERED <> S.REGISTERED or
    T.OVRD_TUIT_GROUP <> S.OVRD_TUIT_GROUP or
    T.OVRD_WDRW_SCHED <> S.OVRD_WDRW_SCHED or
    T.TUITION_RES_TERMS <> S.TUITION_RES_TERMS or
    T.OVRD_INIT_ADD_FEE <> S.OVRD_INIT_ADD_FEE or
    T.OVRD_INIT_ENR_FEE <> S.OVRD_INIT_ENR_FEE or
    T.TC_UNITS_ADJUST <> S.TC_UNITS_ADJUST or
    T.LOCK_IN_AMT <> S.LOCK_IN_AMT or
    nvl(trim(T.LOCK_IN_DT),0) <> nvl(trim(S.LOCK_IN_DT),0) or
    T.ACAD_CAREER_FIRST <> S.ACAD_CAREER_FIRST or
    nvl(trim(T.ACADEMIC_LOAD_DT),0) <> nvl(trim(S.ACADEMIC_LOAD_DT),0) or
    nvl(trim(T.UNTPRG_CHG_NSLC_DT),0) <> nvl(trim(S.UNTPRG_CHG_NSLC_DT),0) or
    nvl(trim(T.SSR_ACTIVATION_DT),0) <> nvl(trim(S.SSR_ACTIVATION_DT),0) or
    T.SSR_TRF_CUR_GPA <> S.SSR_TRF_CUR_GPA or
    T.SSR_COMB_CUR_GPA <> S.SSR_COMB_CUR_GPA or
    T.SSR_CUM_EN_GPA <> S.SSR_CUM_EN_GPA or
    T.SSR_TOT_EN_GRDPTS <> S.SSR_TOT_EN_GRDPTS or
    T.SSR_TOT_EN_TKNGPA <> S.SSR_TOT_EN_TKNGPA or
    T.SSR_CUM_TR_GPA <> S.SSR_CUM_TR_GPA or
    T.SSR_TOT_TR_GRDPTS <> S.SSR_TOT_TR_GRDPTS or
    T.SSR_TOT_TR_TKNGPA <> S.SSR_TOT_TR_TKNGPA or
    T.DATA_ORIGIN = 'D'
when not matched then
insert (
    T.EMPLID,
    T.ACAD_CAREER,
    T.INSTITUTION,
    T.STRM,
    T.SRC_SYS_ID,
    T.REG_CARD_DATE,
    T.WITHDRAW_CODE,
    T.WITHDRAW_REASON,
    T.WITHDRAW_DATE,
    T.LAST_DATE_ATTENDED,
    T.STDNT_CAR_NBR,
    T.ACAD_PROG_PRIMARY,
    T.ACAD_LOAD_APPR,
    T.ACADEMIC_LOAD,
    T.FA_LOAD,
    T.ACAD_LEVEL_PROJ,
    T.ACAD_LEVEL_BOT,
    T.ACAD_LEVEL_EOT,
    T.NSLDS_LOAN_YEAR,
    T.OVRD_ACAD_LVL_PROJ,
    T.OVRD_ACAD_LVL_ALL,
    T.ELIG_TO_ENROLL,
    T.OVRD_MAX_UNITS,
    T.MAX_TOTAL_UNIT,
    T.MAX_NOGPA_UNIT,
    T.MAX_AUDIT_UNIT,
    T.MAX_WAIT_UNIT,
    T.MIN_TOTAL_UNIT,
    T.OVRD_BILL_UNITS,
    T.PROJ_BILL_UNT,
    T.UNT_TAKEN_PRGRSS,
    T.UNT_PASSD_PRGRSS,
    T.UNT_TAKEN_GPA,
    T.UNT_PASSD_GPA,
    T.UNT_TAKEN_NOGPA,
    T.UNT_PASSD_NOGPA,
    T.UNT_INPROG_GPA,
    T.UNT_INPROG_NOGPA,
    T.GRADE_POINTS,
    T.UNT_AUDIT,
    T.UNT_TRNSFR,
    T.TRF_TAKEN_GPA,
    T.TRF_TAKEN_NOGPA,
    T.TRF_PASSED_GPA,
    T.TRF_PASSED_NOGPA,
    T.TRF_GRADE_POINTS,
    T.UNT_TEST_CREDIT,
    T.UNT_OTHER,
    T.UNT_TAKEN_FA,
    T.UNT_PASSD_FA,
    T.UNT_TAKEN_FA_GPA,
    T.GRADE_POINTS_FA,
    T.UNT_TERM_TOT,
    T.RESET_CUM_STATS,
    T.TOT_TAKEN_PRGRSS,
    T.TOT_PASSD_PRGRSS,
    T.TOT_TAKEN_GPA,
    T.TOT_PASSD_GPA,
    T.TOT_TAKEN_NOGPA,
    T.TOT_PASSD_NOGPA,
    T.TOT_INPROG_GPA,
    T.TOT_INPROG_NOGPA,
    T.TOT_AUDIT,
    T.TOT_TRNSFR,
    T.TOT_TEST_CREDIT,
    T.TOT_OTHER,
    T.TOT_CUMULATIVE,
    T.TOT_GRADE_POINTS,
    T.TOT_TAKEN_FA,
    T.TOT_PASSD_FA,
    T.TOT_TAKEN_FA_GPA,
    T.TOT_GRD_POINTS_FA,
    T.FORM_OF_STUDY,
    T.TERM_TYPE,
    T.CLASS_RANK_NBR,
    T.CLASS_RANK_TOT,
    T.SEL_GROUP,
    T.TUIT_CALC_REQ,
    T.TUIT_CALC_DTTM,
    T.FA_STATS_CALC_REQ,
    T.FA_STATS_CALC_DTTM,
    T.FA_ELIGIBILITY,
    T.BILLING_CAREER,
    T.UNIT_MULTIPLIER,
    T.ACAD_YEAR,
    T.ACAD_GROUP_ADVIS,
    T.CUR_RESIDENT_TERMS,
    T.TRF_RESIDENT_TERMS,
    T.CUM_RESIDENT_TERMS,
    T.REFUND_PCT,
    T.REFUND_SCHEME,
    T.PRO_RATA_ELIGIBLE,
    T.FULLY_ENRL_DT,
    T.ENRL_ON_TRANS_DT,
    T.STATS_ON_TRANS_DT,
    T.FULLY_GRADED_DT,
    T.EXT_ORG_ID,
    T.COUNTRY,
    T.STUDY_AGREEMENT,
    T.START_DATE,
    T.END_DATE,
    T.MAX_CRSE_COUNT,
    T.CUR_GPA,
    T.CUM_GPA,
    T.REGISTERED,
    T.OVRD_TUIT_GROUP,
    T.OVRD_WDRW_SCHED,
    T.TUITION_RES_TERMS,
    T.OVRD_INIT_ADD_FEE,
    T.OVRD_INIT_ENR_FEE,
    T.TC_UNITS_ADJUST,
    T.LOCK_IN_AMT,
    T.LOCK_IN_DT,
    T.ACAD_CAREER_FIRST,
    T.ACADEMIC_LOAD_DT,
    T.UNTPRG_CHG_NSLC_DT,
    T.SSR_ACTIVATION_DT,
    T.SSR_TRF_CUR_GPA,
    T.SSR_COMB_CUR_GPA,
    T.SSR_CUM_EN_GPA,
    T.SSR_TOT_EN_GRDPTS,
    T.SSR_TOT_EN_TKNGPA,
    T.SSR_CUM_TR_GPA,
    T.SSR_TOT_TR_GRDPTS,
    T.SSR_TOT_TR_TKNGPA,
    T.LOAD_ERROR,
    T.DATA_ORIGIN,
    T.CREATED_EW_DTTM,
    T.LASTUPD_EW_DTTM,
    T.BATCH_SID
    )
values (
    S.EMPLID,
    S.ACAD_CAREER,
    S.INSTITUTION,
    S.STRM,
    'CS90',
    S.REG_CARD_DATE,
    S.WITHDRAW_CODE,
    S.WITHDRAW_REASON,
    S.WITHDRAW_DATE,
    S.LAST_DATE_ATTENDED,
    S.STDNT_CAR_NBR,
    S.ACAD_PROG_PRIMARY,
    S.ACAD_LOAD_APPR,
    S.ACADEMIC_LOAD,
    S.FA_LOAD,
    S.ACAD_LEVEL_PROJ,
    S.ACAD_LEVEL_BOT,
    S.ACAD_LEVEL_EOT,
    S.NSLDS_LOAN_YEAR,
    S.OVRD_ACAD_LVL_PROJ,
    S.OVRD_ACAD_LVL_ALL,
    S.ELIG_TO_ENROLL,
    S.OVRD_MAX_UNITS,
    S.MAX_TOTAL_UNIT,
    S.MAX_NOGPA_UNIT,
    S.MAX_AUDIT_UNIT,
    S.MAX_WAIT_UNIT,
    S.MIN_TOTAL_UNIT,
    S.OVRD_BILL_UNITS,
    S.PROJ_BILL_UNT,
    S.UNT_TAKEN_PRGRSS,
    S.UNT_PASSD_PRGRSS,
    S.UNT_TAKEN_GPA,
    S.UNT_PASSD_GPA,
    S.UNT_TAKEN_NOGPA,
    S.UNT_PASSD_NOGPA,
    S.UNT_INPROG_GPA,
    S.UNT_INPROG_NOGPA,
    S.GRADE_POINTS,
    S.UNT_AUDIT,
    S.UNT_TRNSFR,
    S.TRF_TAKEN_GPA,
    S.TRF_TAKEN_NOGPA,
    S.TRF_PASSED_GPA,
    S.TRF_PASSED_NOGPA,
    S.TRF_GRADE_POINTS,
    S.UNT_TEST_CREDIT,
    S.UNT_OTHER,
    S.UNT_TAKEN_FA,
    S.UNT_PASSD_FA,
    S.UNT_TAKEN_FA_GPA,
    S.GRADE_POINTS_FA,
    S.UNT_TERM_TOT,
    S.RESET_CUM_STATS,
    S.TOT_TAKEN_PRGRSS,
    S.TOT_PASSD_PRGRSS,
    S.TOT_TAKEN_GPA,
    S.TOT_PASSD_GPA,
    S.TOT_TAKEN_NOGPA,
    S.TOT_PASSD_NOGPA,
    S.TOT_INPROG_GPA,
    S.TOT_INPROG_NOGPA,
    S.TOT_AUDIT,
    S.TOT_TRNSFR,
    S.TOT_TEST_CREDIT,
    S.TOT_OTHER,
    S.TOT_CUMULATIVE,
    S.TOT_GRADE_POINTS,
    S.TOT_TAKEN_FA,
    S.TOT_PASSD_FA,
    S.TOT_TAKEN_FA_GPA,
    S.TOT_GRD_POINTS_FA,
    S.FORM_OF_STUDY,
    S.TERM_TYPE,
    S.CLASS_RANK_NBR,
    S.CLASS_RANK_TOT,
    S.SEL_GROUP,
    S.TUIT_CALC_REQ,
    S.TUIT_CALC_DTTM,
    S.FA_STATS_CALC_REQ,
    S.FA_STATS_CALC_DTTM,
    S.FA_ELIGIBILITY,
    S.BILLING_CAREER,
    S.UNIT_MULTIPLIER,
    S.ACAD_YEAR,
    S.ACAD_GROUP_ADVIS,
    S.CUR_RESIDENT_TERMS,
    S.TRF_RESIDENT_TERMS,
    S.CUM_RESIDENT_TERMS,
    S.REFUND_PCT,
    S.REFUND_SCHEME,
    S.PRO_RATA_ELIGIBLE,
    S.FULLY_ENRL_DT,
    S.ENRL_ON_TRANS_DT,
    S.STATS_ON_TRANS_DT,
    S.FULLY_GRADED_DT,
    S.EXT_ORG_ID,
    S.COUNTRY,
    S.STUDY_AGREEMENT,
    S.START_DATE,
    S.END_DATE,
    S.MAX_CRSE_COUNT,
    S.CUR_GPA,
    S.CUM_GPA,
    S.REGISTERED,
    S.OVRD_TUIT_GROUP,
    S.OVRD_WDRW_SCHED,
    S.TUITION_RES_TERMS,
    S.OVRD_INIT_ADD_FEE,
    S.OVRD_INIT_ENR_FEE,
    S.TC_UNITS_ADJUST,
    S.LOCK_IN_AMT,
    S.LOCK_IN_DT,
    S.ACAD_CAREER_FIRST,
    S.ACADEMIC_LOAD_DT,
    S.UNTPRG_CHG_NSLC_DT,
    S.SSR_ACTIVATION_DT,
    S.SSR_TRF_CUR_GPA,
    S.SSR_COMB_CUR_GPA,
    S.SSR_CUM_EN_GPA,
    S.SSR_TOT_EN_GRDPTS,
    S.SSR_TOT_EN_TKNGPA,
    S.SSR_CUM_TR_GPA,
    S.SSR_TOT_TR_GRDPTS,
    S.SSR_TOT_TR_TKNGPA,
    'N',
    'S',
    sysdate,
    sysdate,
    1234);

strSqlCommand   := 'SET intRowCount';
intRowCount     := SQL%ROWCOUNT;

strSqlCommand := 'commit';
commit;

strMessage01    := '# of PS_STDNT_CAR_TERM rows merged: ' || TO_CHAR(intRowCount,'999,999,999,999');
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_DETAIL';
COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_DETAIL
        (
                i_TargetTableName   => 'PS_STDNT_CAR_TERM',
                i_Action            => 'MERGE',
                i_RowCount          => intRowCount
        );


strMessage01    := 'Updating CSSTG_OWNER.UM_STAGE_JOBS';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand   := 'update TABLE_STATUS on CSSTG_OWNER.UM_STAGE_JOBS';
update CSSTG_OWNER.UM_STAGE_JOBS
   set TABLE_STATUS = 'Deleting',
       OLD_MAX_SCN = NEW_MAX_SCN
 where TABLE_NAME = 'PS_STDNT_CAR_TERM';

strSqlCommand := 'commit';
commit;


strMessage01    := 'Updating DATA_ORIGIN on CSSTG_OWNER.PS_STDNT_CAR_TERM';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand   := 'update DATA_ORIGIN on CSSTG_OWNER.PS_STDNT_CAR_TERM';
update CSSTG_OWNER.PS_STDNT_CAR_TERM T
   set T.DATA_ORIGIN = 'D',
          T.LASTUPD_EW_DTTM = SYSDATE
 where T.DATA_ORIGIN <> 'D'
   and exists 
(select 1 from
(select EMPLID, ACAD_CAREER, INSTITUTION, STRM
   from CSSTG_OWNER.PS_STDNT_CAR_TERM T2
  where (select DELETE_FLG from CSSTG_OWNER.UM_STAGE_JOBS where TABLE_NAME = 'PS_STDNT_CAR_TERM') = 'Y'
  minus
 select EMPLID, ACAD_CAREER, INSTITUTION, STRM
   from SYSADM.PS_STDNT_CAR_TERM@SASOURCE S2
  where (select DELETE_FLG from CSSTG_OWNER.UM_STAGE_JOBS where TABLE_NAME = 'PS_STDNT_CAR_TERM') = 'Y'
   ) S
 where T.EMPLID = S.EMPLID
   and T.ACAD_CAREER = S.ACAD_CAREER
   and T.INSTITUTION = S.INSTITUTION
   and T.STRM = S.STRM
   and T.SRC_SYS_ID = 'CS90' 
   ) 
;

strSqlCommand   := 'SET intRowCount';
intRowCount     := SQL%ROWCOUNT;

strSqlCommand := 'commit';
commit;

strMessage01    := '# of PS_STDNT_CAR_TERM rows updated: ' || TO_CHAR(intRowCount,'999,999,999,999');
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_DETAIL';
COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_DETAIL
        (
                i_TargetTableName   => 'PS_STDNT_CAR_TERM',
                i_Action            => 'UPDATE',
                i_RowCount          => intRowCount
        );


strMessage01    := 'Updating CSSTG_OWNER.UM_STAGE_JOBS';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand   := 'update END_DT on CSSTG_OWNER.UM_STAGE_JOBS';

update CSSTG_OWNER.UM_STAGE_JOBS
   set TABLE_STATUS = 'Complete',
       END_DT = SYSDATE
 where TABLE_NAME = 'PS_STDNT_CAR_TERM'
;

strSqlCommand := 'commit';
commit;


strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_SUCCESS';
COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_SUCCESS;

strMessage01    := strProcessName || ' is complete.';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);


EXCEPTION
    WHEN OTHERS THEN

        COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_EXCEPTION
                (
                        i_SqlCommand   => strSqlCommand,
                        i_SqlCode      => SQLCODE,
                        i_SqlErrm      => SQLERRM
                );

END PS_STDNT_CAR_TERM_P;
/
