DROP PROCEDURE CSMRT_OWNER.PS_ISIR_INTERPRET_P
/

--
-- PS_ISIR_INTERPRET_P  (Procedure) 
--
CREATE OR REPLACE PROCEDURE CSMRT_OWNER."PS_ISIR_INTERPRET_P" AUTHID CURRENT_USER IS

------------------------------------------------------------------------
-- George Adams
--
-- Loads stage table PS_ISIR_INTERPRET from PeopleSoft table PS_ISIR_INTERPRET.
--
-- V01  SMT-xxxx 04/11/2017,    Jim Doucette
--                              Converted from PS_ISIR_INTERPRET.SQL
--
------------------------------------------------------------------------

        strMartId                       Varchar2(50)    := 'CSW';
        strProcessName                  Varchar2(100)   := 'PS_ISIR_INTERPRET';
        intProcessSid                   Integer;
        dtProcessStart                  Date            := SYSDATE;
        strMessage01                    Varchar2(4000);
        strMessage02                    Varchar2(512);
        strMessage03                    Varchar2(512)   :='';
        strNewLine                      Varchar2(2)     := chr(13) || chr(10);
        strSqlCommand                   Varchar2(32767) :='';
        strSqlDynamic                   Varchar2(32767) :='';
        strClientInfo                   Varchar2(100);
        intRowCount                     Integer;
        intTotalRowCount                Integer         := 0;
        numSqlCode                      Number;
        strSqlErrm                      Varchar2(4000);
        intTries                        Integer;

BEGIN
strSqlCommand := 'DBMS_APPLICATION_INFO.SET_CLIENT_INFO';
DBMS_APPLICATION_INFO.SET_CLIENT_INFO (strProcessName);

strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_INIT';
COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_INIT
        (
                i_MartId                => strMartId,
                i_ProcessName           => strProcessName,
                i_ProcessStartTime      => dtProcessStart,
                o_ProcessSid            => intProcessSid
        );

strMessage01    := 'Updating CSSTG_OWNER.UM_STAGE_JOBS';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);


strSqlCommand   := 'update START_DT on CSSTG_OWNER.UM_STAGE_JOBS';
update CSSTG_OWNER.UM_STAGE_JOBS
   set TABLE_STATUS = 'Reading',
       START_DT = sysdate,
       END_DT = NULL
 where TABLE_NAME = 'PS_ISIR_INTERPRET'
;

strSqlCommand := 'commit';
commit;


strSqlCommand   := 'update NEW_MAX_SCN on CSSTG_OWNER.UM_STAGE_JOBS';
update CSSTG_OWNER.UM_STAGE_JOBS
   set TABLE_STATUS = 'Merging',
       NEW_MAX_SCN = (select /*+ full(S) */ max(ORA_ROWSCN) from SYSADM.PS_ISIR_INTERPRET@SASOURCE S)
 where TABLE_NAME = 'PS_ISIR_INTERPRET'
;

strSqlCommand := 'commit';
commit;


strMessage01    := 'Merging data into CSSTG_OWNER.PS_ISIR_INTERPRET';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand   := 'merge into CSSTG_OWNER.PS_ISIR_INTERPRET';
merge /*+ use_hash(S,T) */ into CSSTG_OWNER.PS_ISIR_INTERPRET T
using (select /*+ full(S) */
nvl(trim(EMPLID),'-') EMPLID,
nvl(trim(INSTITUTION),'-') INSTITUTION,
nvl(trim(AID_YEAR),'-') AID_YEAR,
to_date(to_char(case when EFFDT < '01-JAN-1800' then NULL else EFFDT end,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') EFFDT,
nvl(EFFSEQ,0) EFFSEQ,
nvl(trim(TABLE_ID),'-') TABLE_ID,
nvl(trim(CURRENCY_CD),'-') CURRENCY_CD,
nvl(trim(NSLDS_MATCH),'-') NSLDS_MATCH,
nvl(trim(REJ_OVR_IND_STDNT),'-') REJ_OVR_IND_STDNT,
nvl(trim(REJ_OVR_DEP_STDNT),'-') REJ_OVR_DEP_STDNT,
nvl(trim(REJ_OVR_STDNT_NAME),'-') REJ_OVR_STDNT_NAME,
nvl(trim(REJ_OVR_INV_DEBT),'-') REJ_OVR_INV_DEBT,
nvl(trim(REJ_OVR_BIG_FAMILY),'-') REJ_OVR_BIG_FAMILY,
nvl(trim(ASMPTN_OVR_FAM_MEM),'-') ASMPTN_OVR_FAM_MEM,
nvl(trim(ASMPTN_OVR_COL_P),'-') ASMPTN_OVR_COL_P,
nvl(trim(ASMPTN_OVR_AGI_P),'-') ASMPTN_OVR_AGI_P,
nvl(trim(ASMPTN_OVR_COL_S),'-') ASMPTN_OVR_COL_S,
nvl(trim(ASMPTN_OVR_AGI_S),'-') ASMPTN_OVR_AGI_S,
nvl(trim(ASMPTN_OVR_SSN_BEN),'-') ASMPTN_OVR_SSN_BEN,
nvl(trim(ASMPTN_OVR_WS3_P),'-') ASMPTN_OVR_WS3_P,
nvl(trim(ASMPTN_OVR_WS3_S),'-') ASMPTN_OVR_WS3_S,
nvl(trim(ASMPTN_OVR_WSA_P),'-') ASMPTN_OVR_WSA_P,
nvl(trim(ASMPTN_OVR_WSA_S),'-') ASMPTN_OVR_WSA_S,
nvl(trim(ASMD_STU_TAX_STAT),'-') ASMD_STU_TAX_STAT,
nvl(trim(ASMD_STU_EXP_TAX),'-') ASMD_STU_EXP_TAX,
nvl(trim(ASMD_PAR_TAX_STAT),'-') ASMD_PAR_TAX_STAT,
nvl(trim(ASMD_PAR_EXP_TAX),'-') ASMD_PAR_EXP_TAX,
nvl(ASMD_SPOMO_EXP_INC,0) ASMD_SPOMO_EXP_INC,
nvl(ASMD_STUFA_EXP_INC,0) ASMD_STUFA_EXP_INC,
nvl(ASMD_EXP_TAX_PAID,0) ASMD_EXP_TAX_PAID,
nvl(trim(ASMD_CITIZENSHIP),'-') ASMD_CITIZENSHIP,
nvl(trim(ASMD_STU_MAR_STAT),'-') ASMD_STU_MAR_STAT,
nvl(trim(ASMD_STU_DOB_PRIOR),'-') ASMD_STU_DOB_PRIOR,
nvl(trim(ASMD_STU_MARRIED),'-') ASMD_STU_MARRIED,
nvl(trim(ASMD_STU_VA_STAT),'-') ASMD_STU_VA_STAT,
nvl(trim(ASMD_STU_LGL_DEP),'-') ASMD_STU_LGL_DEP,
nvl(trim(ASMD_STU_NBR_INFAM),'-') ASMD_STU_NBR_INFAM,
nvl(ASMD_STU_NBR_COLL,0) ASMD_STU_NBR_COLL,
nvl(ASMD_STU_AGI,0) ASMD_STU_AGI,
nvl(ASMD_STU_ERN_INC,0) ASMD_STU_ERN_INC,
nvl(ASMD_SPS_ERN_INC,0) ASMD_SPS_ERN_INC,
nvl(ASMD_STU_WKB,0) ASMD_STU_WKB,
nvl(ASMD_STU_TAX_PAID,0) ASMD_STU_TAX_PAID,
nvl(trim(ASMD_PAR_MAR_STAT),'-') ASMD_PAR_MAR_STAT,
nvl(trim(ASMD_PAR_NBR_INFAM),'-') ASMD_PAR_NBR_INFAM,
nvl(ASMD_PAR_NBR_COLL,0) ASMD_PAR_NBR_COLL,
nvl(ASMD_PAR_AGI,0) ASMD_PAR_AGI,
nvl(ASMD_DAD_ERN_INC,0) ASMD_DAD_ERN_INC,
nvl(ASMD_MOM_ERN_INC,0) ASMD_MOM_ERN_INC,
nvl(ASMD_PAR_ERN_INC,0) ASMD_PAR_ERN_INC,
nvl(ASMD_PAR_WKB,0) ASMD_PAR_WKB,
nvl(ASMD_PAR_TAX_PAID,0) ASMD_PAR_TAX_PAID,
nvl(trim(ASMD_FATHER_SSN),'-') ASMD_FATHER_SSN,
nvl(trim(ASMD_MOTHER_SSN),'-') ASMD_MOTHER_SSN,
nvl(ASMD_STU_EIC,0) ASMD_STU_EIC,
nvl(trim(ASMD_CHILDREN),'-') ASMD_CHILDREN,
nvl(ASMD_STU_WKC,0) ASMD_STU_WKC,
nvl(ASMD_PAR_WKC,0) ASMD_PAR_WKC,
nvl(trim(REJ_OVR_BIRTH_YEAR),'-') REJ_OVR_BIRTH_YEAR,
nvl(trim(REJ_OVR_TAX_RANGE),'-') REJ_OVR_TAX_RANGE,
nvl(trim(REJ_OVR_TAXRNG_DEP),'-') REJ_OVR_TAXRNG_DEP,
nvl(trim(SFA_REJ_OVR_TX_PAR),'-') SFA_REJ_OVR_TX_PAR,
nvl(trim(SFA_REJ_OVR_DADSSN),'-') SFA_REJ_OVR_DADSSN,
nvl(trim(SFA_REJ_OVR_MOMSSN),'-') SFA_REJ_OVR_MOMSSN,
nvl(trim(SFA_REJ_OVR_TX_STU),'-') SFA_REJ_OVR_TX_STU,
nvl(trim(SFA_REJ_OVR_MR_STU),'-') SFA_REJ_OVR_MR_STU,
nvl(trim(SFA_REJ_OVR_NO_TAX),'-') SFA_REJ_OVR_NO_TAX,
nvl(trim(SFA_ASM_YTH_SCH_VL),'-') SFA_ASM_YTH_SCH_VL,
nvl(trim(SFA_ASM_YTH_HUD_VL),'-') SFA_ASM_YTH_HUD_VL,
nvl(trim(SFA_ASM_RSK_HOM_VL),'-') SFA_ASM_RSK_HOM_VL,
nvl(trim(SFA_REJ_OVR_MAR_ST),'-') SFA_REJ_OVR_MAR_ST,
nvl(trim(SFA_STU_ASM_AST_VL),'-') SFA_STU_ASM_AST_VL,
nvl(trim(SFA_PAR_ASM_AST_VL),'-') SFA_PAR_ASM_AST_VL
from SYSADM.PS_ISIR_INTERPRET@SASOURCE S
where ORA_ROWSCN > (select OLD_MAX_SCN from CSSTG_OWNER.UM_STAGE_JOBS where TABLE_NAME = 'PS_ISIR_INTERPRET') ) S
   on (
T.EMPLID = S.EMPLID and
T.INSTITUTION = S.INSTITUTION and
T.AID_YEAR = S.AID_YEAR and
T.EFFDT = S.EFFDT and
T.EFFSEQ = S.EFFSEQ and
T.TABLE_ID = S.TABLE_ID and
T.SRC_SYS_ID = 'CS90')
when matched then update set
T.CURRENCY_CD = S.CURRENCY_CD,
T.NSLDS_MATCH = S.NSLDS_MATCH,
T.REJ_OVR_IND_STDNT = S.REJ_OVR_IND_STDNT,
T.REJ_OVR_DEP_STDNT = S.REJ_OVR_DEP_STDNT,
T.REJ_OVR_STDNT_NAME = S.REJ_OVR_STDNT_NAME,
T.REJ_OVR_INV_DEBT = S.REJ_OVR_INV_DEBT,
T.REJ_OVR_BIG_FAMILY = S.REJ_OVR_BIG_FAMILY,
T.ASMPTN_OVR_FAM_MEM = S.ASMPTN_OVR_FAM_MEM,
T.ASMPTN_OVR_COL_P = S.ASMPTN_OVR_COL_P,
T.ASMPTN_OVR_AGI_P = S.ASMPTN_OVR_AGI_P,
T.ASMPTN_OVR_COL_S = S.ASMPTN_OVR_COL_S,
T.ASMPTN_OVR_AGI_S = S.ASMPTN_OVR_AGI_S,
T.ASMPTN_OVR_SSN_BEN = S.ASMPTN_OVR_SSN_BEN,
T.ASMPTN_OVR_WS3_P = S.ASMPTN_OVR_WS3_P,
T.ASMPTN_OVR_WS3_S = S.ASMPTN_OVR_WS3_S,
T.ASMPTN_OVR_WSA_P = S.ASMPTN_OVR_WSA_P,
T.ASMPTN_OVR_WSA_S = S.ASMPTN_OVR_WSA_S,
T.ASMD_STU_TAX_STAT = S.ASMD_STU_TAX_STAT,
T.ASMD_STU_EXP_TAX = S.ASMD_STU_EXP_TAX,
T.ASMD_PAR_TAX_STAT = S.ASMD_PAR_TAX_STAT,
T.ASMD_PAR_EXP_TAX = S.ASMD_PAR_EXP_TAX,
T.ASMD_SPOMO_EXP_INC = S.ASMD_SPOMO_EXP_INC,
T.ASMD_STUFA_EXP_INC = S.ASMD_STUFA_EXP_INC,
T.ASMD_EXP_TAX_PAID = S.ASMD_EXP_TAX_PAID,
T.ASMD_CITIZENSHIP = S.ASMD_CITIZENSHIP,
T.ASMD_STU_MAR_STAT = S.ASMD_STU_MAR_STAT,
T.ASMD_STU_DOB_PRIOR = S.ASMD_STU_DOB_PRIOR,
T.ASMD_STU_MARRIED = S.ASMD_STU_MARRIED,
T.ASMD_STU_VA_STAT = S.ASMD_STU_VA_STAT,
T.ASMD_STU_LGL_DEP = S.ASMD_STU_LGL_DEP,
T.ASMD_STU_NBR_INFAM = S.ASMD_STU_NBR_INFAM,
T.ASMD_STU_NBR_COLL = S.ASMD_STU_NBR_COLL,
T.ASMD_STU_AGI = S.ASMD_STU_AGI,
T.ASMD_STU_ERN_INC = S.ASMD_STU_ERN_INC,
T.ASMD_SPS_ERN_INC = S.ASMD_SPS_ERN_INC,
T.ASMD_STU_WKB = S.ASMD_STU_WKB,
T.ASMD_STU_TAX_PAID = S.ASMD_STU_TAX_PAID,
T.ASMD_PAR_MAR_STAT = S.ASMD_PAR_MAR_STAT,
T.ASMD_PAR_NBR_INFAM = S.ASMD_PAR_NBR_INFAM,
T.ASMD_PAR_NBR_COLL = S.ASMD_PAR_NBR_COLL,
T.ASMD_PAR_AGI = S.ASMD_PAR_AGI,
T.ASMD_DAD_ERN_INC = S.ASMD_DAD_ERN_INC,
T.ASMD_MOM_ERN_INC = S.ASMD_MOM_ERN_INC,
T.ASMD_PAR_ERN_INC = S.ASMD_PAR_ERN_INC,
T.ASMD_PAR_WKB = S.ASMD_PAR_WKB,
T.ASMD_PAR_TAX_PAID = S.ASMD_PAR_TAX_PAID,
T.ASMD_FATHER_SSN = S.ASMD_FATHER_SSN,
T.ASMD_MOTHER_SSN = S.ASMD_MOTHER_SSN,
T.ASMD_STU_EIC = S.ASMD_STU_EIC,
T.ASMD_CHILDREN = S.ASMD_CHILDREN,
T.ASMD_STU_WKC = S.ASMD_STU_WKC,
T.ASMD_PAR_WKC = S.ASMD_PAR_WKC,
T.REJ_OVR_BIRTH_YEAR = S.REJ_OVR_BIRTH_YEAR,
T.REJ_OVR_TAX_RANGE = S.REJ_OVR_TAX_RANGE,
T.REJ_OVR_TAXRNG_DEP = S.REJ_OVR_TAXRNG_DEP,
T.SFA_REJ_OVR_TX_PAR = S.SFA_REJ_OVR_TX_PAR,
T.SFA_REJ_OVR_DADSSN = S.SFA_REJ_OVR_DADSSN,
T.SFA_REJ_OVR_MOMSSN = S.SFA_REJ_OVR_MOMSSN,
T.SFA_REJ_OVR_TX_STU = S.SFA_REJ_OVR_TX_STU,
T.SFA_REJ_OVR_MR_STU = S.SFA_REJ_OVR_MR_STU,
T.SFA_REJ_OVR_NO_TAX = S.SFA_REJ_OVR_NO_TAX,
T.SFA_ASM_YTH_SCH_VL = S.SFA_ASM_YTH_SCH_VL,
T.SFA_ASM_YTH_HUD_VL = S.SFA_ASM_YTH_HUD_VL,
T.SFA_ASM_RSK_HOM_VL = S.SFA_ASM_RSK_HOM_VL,
T.SFA_REJ_OVR_MAR_ST = S.SFA_REJ_OVR_MAR_ST,
T.SFA_STU_ASM_AST_VL = S.SFA_STU_ASM_AST_VL,
T.SFA_PAR_ASM_AST_VL = S.SFA_PAR_ASM_AST_VL,
T.DATA_ORIGIN = 'S',
T.LASTUPD_EW_DTTM = sysdate,
T.BATCH_SID   = 1234
where
T.CURRENCY_CD <> S.CURRENCY_CD or
T.NSLDS_MATCH <> S.NSLDS_MATCH or
T.REJ_OVR_IND_STDNT <> S.REJ_OVR_IND_STDNT or
T.REJ_OVR_DEP_STDNT <> S.REJ_OVR_DEP_STDNT or
T.REJ_OVR_STDNT_NAME <> S.REJ_OVR_STDNT_NAME or
T.REJ_OVR_INV_DEBT <> S.REJ_OVR_INV_DEBT or
T.REJ_OVR_BIG_FAMILY <> S.REJ_OVR_BIG_FAMILY or
T.ASMPTN_OVR_FAM_MEM <> S.ASMPTN_OVR_FAM_MEM or
T.ASMPTN_OVR_COL_P <> S.ASMPTN_OVR_COL_P or
T.ASMPTN_OVR_AGI_P <> S.ASMPTN_OVR_AGI_P or
T.ASMPTN_OVR_COL_S <> S.ASMPTN_OVR_COL_S or
T.ASMPTN_OVR_AGI_S <> S.ASMPTN_OVR_AGI_S or
T.ASMPTN_OVR_SSN_BEN <> S.ASMPTN_OVR_SSN_BEN or
T.ASMPTN_OVR_WS3_P <> S.ASMPTN_OVR_WS3_P or
T.ASMPTN_OVR_WS3_S <> S.ASMPTN_OVR_WS3_S or
T.ASMPTN_OVR_WSA_P <> S.ASMPTN_OVR_WSA_P or
T.ASMPTN_OVR_WSA_S <> S.ASMPTN_OVR_WSA_S or
T.ASMD_STU_TAX_STAT <> S.ASMD_STU_TAX_STAT or
T.ASMD_STU_EXP_TAX <> S.ASMD_STU_EXP_TAX or
T.ASMD_PAR_TAX_STAT <> S.ASMD_PAR_TAX_STAT or
T.ASMD_PAR_EXP_TAX <> S.ASMD_PAR_EXP_TAX or
T.ASMD_SPOMO_EXP_INC <> S.ASMD_SPOMO_EXP_INC or
T.ASMD_STUFA_EXP_INC <> S.ASMD_STUFA_EXP_INC or
T.ASMD_EXP_TAX_PAID <> S.ASMD_EXP_TAX_PAID or
T.ASMD_CITIZENSHIP <> S.ASMD_CITIZENSHIP or
T.ASMD_STU_MAR_STAT <> S.ASMD_STU_MAR_STAT or
T.ASMD_STU_DOB_PRIOR <> S.ASMD_STU_DOB_PRIOR or
T.ASMD_STU_MARRIED <> S.ASMD_STU_MARRIED or
T.ASMD_STU_VA_STAT <> S.ASMD_STU_VA_STAT or
T.ASMD_STU_LGL_DEP <> S.ASMD_STU_LGL_DEP or
T.ASMD_STU_NBR_INFAM <> S.ASMD_STU_NBR_INFAM or
T.ASMD_STU_NBR_COLL <> S.ASMD_STU_NBR_COLL or
T.ASMD_STU_AGI <> S.ASMD_STU_AGI or
T.ASMD_STU_ERN_INC <> S.ASMD_STU_ERN_INC or
T.ASMD_SPS_ERN_INC <> S.ASMD_SPS_ERN_INC or
T.ASMD_STU_WKB <> S.ASMD_STU_WKB or
T.ASMD_STU_TAX_PAID <> S.ASMD_STU_TAX_PAID or
T.ASMD_PAR_MAR_STAT <> S.ASMD_PAR_MAR_STAT or
T.ASMD_PAR_NBR_INFAM <> S.ASMD_PAR_NBR_INFAM or
T.ASMD_PAR_NBR_COLL <> S.ASMD_PAR_NBR_COLL or
T.ASMD_PAR_AGI <> S.ASMD_PAR_AGI or
T.ASMD_DAD_ERN_INC <> S.ASMD_DAD_ERN_INC or
T.ASMD_MOM_ERN_INC <> S.ASMD_MOM_ERN_INC or
T.ASMD_PAR_ERN_INC <> S.ASMD_PAR_ERN_INC or
T.ASMD_PAR_WKB <> S.ASMD_PAR_WKB or
T.ASMD_PAR_TAX_PAID <> S.ASMD_PAR_TAX_PAID or
T.ASMD_FATHER_SSN <> S.ASMD_FATHER_SSN or
T.ASMD_MOTHER_SSN <> S.ASMD_MOTHER_SSN or
T.ASMD_STU_EIC <> S.ASMD_STU_EIC or
T.ASMD_CHILDREN <> S.ASMD_CHILDREN or
T.ASMD_STU_WKC <> S.ASMD_STU_WKC or
T.ASMD_PAR_WKC <> S.ASMD_PAR_WKC or
T.REJ_OVR_BIRTH_YEAR <> S.REJ_OVR_BIRTH_YEAR or
T.REJ_OVR_TAX_RANGE <> S.REJ_OVR_TAX_RANGE or
T.REJ_OVR_TAXRNG_DEP <> S.REJ_OVR_TAXRNG_DEP or
T.SFA_REJ_OVR_TX_PAR <> S.SFA_REJ_OVR_TX_PAR or
T.SFA_REJ_OVR_DADSSN <> S.SFA_REJ_OVR_DADSSN or
T.SFA_REJ_OVR_MOMSSN <> S.SFA_REJ_OVR_MOMSSN or
T.SFA_REJ_OVR_TX_STU <> S.SFA_REJ_OVR_TX_STU or
T.SFA_REJ_OVR_MR_STU <> S.SFA_REJ_OVR_MR_STU or
T.SFA_REJ_OVR_NO_TAX <> S.SFA_REJ_OVR_NO_TAX or
T.SFA_ASM_YTH_SCH_VL <> S.SFA_ASM_YTH_SCH_VL or
T.SFA_ASM_YTH_HUD_VL <> S.SFA_ASM_YTH_HUD_VL or
T.SFA_ASM_RSK_HOM_VL <> S.SFA_ASM_RSK_HOM_VL or
T.SFA_REJ_OVR_MAR_ST <> S.SFA_REJ_OVR_MAR_ST or
T.SFA_STU_ASM_AST_VL <> S.SFA_STU_ASM_AST_VL or
T.SFA_PAR_ASM_AST_VL <> S.SFA_PAR_ASM_AST_VL or
T.DATA_ORIGIN = 'D'
when not matched then
insert (
T.EMPLID,
T.INSTITUTION,
T.AID_YEAR,
T.EFFDT,
T.EFFSEQ,
T.TABLE_ID,
T.SRC_SYS_ID,
T.CURRENCY_CD,
T.NSLDS_MATCH,
T.REJ_OVR_IND_STDNT,
T.REJ_OVR_DEP_STDNT,
T.REJ_OVR_STDNT_NAME,
T.REJ_OVR_INV_DEBT,
T.REJ_OVR_BIG_FAMILY,
T.ASMPTN_OVR_FAM_MEM,
T.ASMPTN_OVR_COL_P,
T.ASMPTN_OVR_AGI_P,
T.ASMPTN_OVR_COL_S,
T.ASMPTN_OVR_AGI_S,
T.ASMPTN_OVR_SSN_BEN,
T.ASMPTN_OVR_WS3_P,
T.ASMPTN_OVR_WS3_S,
T.ASMPTN_OVR_WSA_P,
T.ASMPTN_OVR_WSA_S,
T.ASMD_STU_TAX_STAT,
T.ASMD_STU_EXP_TAX,
T.ASMD_PAR_TAX_STAT,
T.ASMD_PAR_EXP_TAX,
T.ASMD_SPOMO_EXP_INC,
T.ASMD_STUFA_EXP_INC,
T.ASMD_EXP_TAX_PAID,
T.ASMD_CITIZENSHIP,
T.ASMD_STU_MAR_STAT,
T.ASMD_STU_DOB_PRIOR,
T.ASMD_STU_MARRIED,
T.ASMD_STU_VA_STAT,
T.ASMD_STU_LGL_DEP,
T.ASMD_STU_NBR_INFAM,
T.ASMD_STU_NBR_COLL,
T.ASMD_STU_AGI,
T.ASMD_STU_ERN_INC,
T.ASMD_SPS_ERN_INC,
T.ASMD_STU_WKB,
T.ASMD_STU_TAX_PAID,
T.ASMD_PAR_MAR_STAT,
T.ASMD_PAR_NBR_INFAM,
T.ASMD_PAR_NBR_COLL,
T.ASMD_PAR_AGI,
T.ASMD_DAD_ERN_INC,
T.ASMD_MOM_ERN_INC,
T.ASMD_PAR_ERN_INC,
T.ASMD_PAR_WKB,
T.ASMD_PAR_TAX_PAID,
T.ASMD_FATHER_SSN,
T.ASMD_MOTHER_SSN,
T.ASMD_STU_EIC,
T.ASMD_CHILDREN,
T.ASMD_STU_WKC,
T.ASMD_PAR_WKC,
T.REJ_OVR_BIRTH_YEAR,
T.REJ_OVR_TAX_RANGE,
T.REJ_OVR_TAXRNG_DEP,
T.SFA_REJ_OVR_TX_PAR,
T.SFA_REJ_OVR_DADSSN,
T.SFA_REJ_OVR_MOMSSN,
T.SFA_REJ_OVR_TX_STU,
T.SFA_REJ_OVR_MR_STU,
T.SFA_REJ_OVR_NO_TAX,
T.SFA_ASM_YTH_SCH_VL,
T.SFA_ASM_YTH_HUD_VL,
T.SFA_ASM_RSK_HOM_VL,
T.SFA_REJ_OVR_MAR_ST,
T.SFA_STU_ASM_AST_VL,
T.SFA_PAR_ASM_AST_VL,
T.LOAD_ERROR,
T.DATA_ORIGIN,
T.CREATED_EW_DTTM,
T.LASTUPD_EW_DTTM,
T.BATCH_SID
)
values (
S.EMPLID,
S.INSTITUTION,
S.AID_YEAR,
S.EFFDT,
S.EFFSEQ,
S.TABLE_ID,
'CS90',
S.CURRENCY_CD,
S.NSLDS_MATCH,
S.REJ_OVR_IND_STDNT,
S.REJ_OVR_DEP_STDNT,
S.REJ_OVR_STDNT_NAME,
S.REJ_OVR_INV_DEBT,
S.REJ_OVR_BIG_FAMILY,
S.ASMPTN_OVR_FAM_MEM,
S.ASMPTN_OVR_COL_P,
S.ASMPTN_OVR_AGI_P,
S.ASMPTN_OVR_COL_S,
S.ASMPTN_OVR_AGI_S,
S.ASMPTN_OVR_SSN_BEN,
S.ASMPTN_OVR_WS3_P,
S.ASMPTN_OVR_WS3_S,
S.ASMPTN_OVR_WSA_P,
S.ASMPTN_OVR_WSA_S,
S.ASMD_STU_TAX_STAT,
S.ASMD_STU_EXP_TAX,
S.ASMD_PAR_TAX_STAT,
S.ASMD_PAR_EXP_TAX,
S.ASMD_SPOMO_EXP_INC,
S.ASMD_STUFA_EXP_INC,
S.ASMD_EXP_TAX_PAID,
S.ASMD_CITIZENSHIP,
S.ASMD_STU_MAR_STAT,
S.ASMD_STU_DOB_PRIOR,
S.ASMD_STU_MARRIED,
S.ASMD_STU_VA_STAT,
S.ASMD_STU_LGL_DEP,
S.ASMD_STU_NBR_INFAM,
S.ASMD_STU_NBR_COLL,
S.ASMD_STU_AGI,
S.ASMD_STU_ERN_INC,
S.ASMD_SPS_ERN_INC,
S.ASMD_STU_WKB,
S.ASMD_STU_TAX_PAID,
S.ASMD_PAR_MAR_STAT,
S.ASMD_PAR_NBR_INFAM,
S.ASMD_PAR_NBR_COLL,
S.ASMD_PAR_AGI,
S.ASMD_DAD_ERN_INC,
S.ASMD_MOM_ERN_INC,
S.ASMD_PAR_ERN_INC,
S.ASMD_PAR_WKB,
S.ASMD_PAR_TAX_PAID,
S.ASMD_FATHER_SSN,
S.ASMD_MOTHER_SSN,
S.ASMD_STU_EIC,
S.ASMD_CHILDREN,
S.ASMD_STU_WKC,
S.ASMD_PAR_WKC,
S.REJ_OVR_BIRTH_YEAR,
S.REJ_OVR_TAX_RANGE,
S.REJ_OVR_TAXRNG_DEP,
S.SFA_REJ_OVR_TX_PAR,
S.SFA_REJ_OVR_DADSSN,
S.SFA_REJ_OVR_MOMSSN,
S.SFA_REJ_OVR_TX_STU,
S.SFA_REJ_OVR_MR_STU,
S.SFA_REJ_OVR_NO_TAX,
S.SFA_ASM_YTH_SCH_VL,
S.SFA_ASM_YTH_HUD_VL,
S.SFA_ASM_RSK_HOM_VL,
S.SFA_REJ_OVR_MAR_ST,
S.SFA_STU_ASM_AST_VL,
S.SFA_PAR_ASM_AST_VL,
'N',
'S',
sysdate,
sysdate,
1234);

strSqlCommand   := 'SET intRowCount';
intRowCount     := SQL%ROWCOUNT;

strSqlCommand := 'commit';
commit;

strMessage01    := '# of PS_ISIR_INTERPRET rows merged: ' || TO_CHAR(intRowCount,'999,999,999,999');
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_DETAIL';
COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_DETAIL
        (
                i_TargetTableName   => 'PS_ISIR_INTERPRET',
                i_Action            => 'MERGE',
                i_RowCount          => intRowCount
        );


strMessage01    := 'Updating CSSTG_OWNER.UM_STAGE_JOBS';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand   := 'update TABLE_STATUS on CSSTG_OWNER.UM_STAGE_JOBS';
update CSSTG_OWNER.UM_STAGE_JOBS
   set TABLE_STATUS = 'Deleting',
       OLD_MAX_SCN = NEW_MAX_SCN
 where TABLE_NAME = 'PS_ISIR_INTERPRET';

strSqlCommand := 'commit';
commit;


strMessage01    := 'Updating DATA_ORIGIN on CSSTG_OWNER.PS_ISIR_INTERPRET';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand   := 'update DATA_ORIGIN on CSSTG_OWNER.PS_ISIR_INTERPRET';
update CSSTG_OWNER.PS_ISIR_INTERPRET T
   set T.DATA_ORIGIN = 'D',
          T.LASTUPD_EW_DTTM = SYSDATE
 where T.DATA_ORIGIN <> 'D'
   and exists 
(select 1 from
(select EMPLID, INSTITUTION, AID_YEAR, EFFDT, EFFSEQ, TABLE_ID
   from CSSTG_OWNER.PS_ISIR_INTERPRET T2
  where (select DELETE_FLG from CSSTG_OWNER.UM_STAGE_JOBS where TABLE_NAME = 'PS_ISIR_INTERPRET') = 'Y'
  minus
 select nvl(trim(EMPLID),'-'), nvl(trim(INSTITUTION),'-'), nvl(trim(AID_YEAR),'-'), EFFDT, EFFSEQ, nvl(trim(TABLE_ID),'-')
   from SYSADM.PS_ISIR_INTERPRET@SASOURCE S2
  where (select DELETE_FLG from CSSTG_OWNER.UM_STAGE_JOBS where TABLE_NAME = 'PS_ISIR_INTERPRET') = 'Y'
   ) S
 where T.EMPLID = S.EMPLID
   and T.INSTITUTION = S.INSTITUTION
   and T.AID_YEAR = S.AID_YEAR
   and T.EFFDT = S.EFFDT
   and T.EFFSEQ = S.EFFSEQ
   and T.TABLE_ID = S.TABLE_ID
   and T.SRC_SYS_ID = 'CS90' 
   ) 
;

strSqlCommand   := 'SET intRowCount';
intRowCount     := SQL%ROWCOUNT;

strSqlCommand := 'commit';
commit;

strMessage01    := '# of PS_ISIR_INTERPRET rows updated: ' || TO_CHAR(intRowCount,'999,999,999,999');
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_DETAIL';
COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_DETAIL
        (
                i_TargetTableName   => 'PS_ISIR_INTERPRET',
                i_Action            => 'UPDATE',
                i_RowCount          => intRowCount
        );


strMessage01    := 'Updating CSSTG_OWNER.UM_STAGE_JOBS';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand   := 'update END_DT on CSSTG_OWNER.UM_STAGE_JOBS';

update CSSTG_OWNER.UM_STAGE_JOBS
   set TABLE_STATUS = 'Complete',
       END_DT = SYSDATE
 where TABLE_NAME = 'PS_ISIR_INTERPRET'
;

strSqlCommand := 'commit';
commit;


strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_SUCCESS';
COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_SUCCESS;

strMessage01    := strProcessName || ' is complete.';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);


EXCEPTION
    WHEN OTHERS THEN
        numSqlCode := SQLCODE;
        strSqlErrm := SQLERRM;

        ROLLBACK;
  
        strMessage01 := 'Error code: ' || TO_CHAR(SQLCODE) || ' Error Message: ' || SQLERRM;
        strMessage02 := TO_CHAR(SQLCODE);
  
        COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_FAILURE
                       (i_SqlCommand    => strSqlCommand,
                        i_ErrorText     => strMessage01,
                        i_ErrorCode     => strMessage02,
                        i_ErrorMessage  => strSqlErrm
                       );
               
        strMessage01 := 'Error...'
                        || strNewLine   || 'SQL Command:   ' || strSqlCommand
                        || strNewLine   || 'Error code:    ' || numSqlCode
                        || strNewLine   || 'Error Message: ' || strSqlErrm;

        COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);
        RAISE_APPLICATION_ERROR( -20001, strMessage01);

END PS_ISIR_INTERPRET_P;
/
