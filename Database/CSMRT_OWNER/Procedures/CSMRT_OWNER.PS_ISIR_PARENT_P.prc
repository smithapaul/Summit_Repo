DROP PROCEDURE CSMRT_OWNER.PS_ISIR_PARENT_P
/

--
-- PS_ISIR_PARENT_P  (Procedure) 
--
CREATE OR REPLACE PROCEDURE CSMRT_OWNER."PS_ISIR_PARENT_P" AUTHID CURRENT_USER IS

------------------------------------------------------------------------
-- George Adams
--
-- Loads stage table PS_ISIR_PARENT from PeopleSoft table PS_ISIR_PARENT.
--
-- V01  SMT-xxxx 04/11/2017,    Jim Doucette
--                              Converted from PS_ISIR_PARENT.SQL
--
------------------------------------------------------------------------

        strMartId                       Varchar2(50)    := 'CSW';
        strProcessName                  Varchar2(100)   := 'PS_ISIR_PARENT';
        intProcessSid                   Integer;
        dtProcessStart                  Date            := SYSDATE;
        strMessage01                    Varchar2(4000);
        strMessage02                    Varchar2(512);
        strMessage03                    Varchar2(512)   :='';
        strNewLine                      Varchar2(2)     := chr(13) || chr(10);
        strSqlCommand                   Varchar2(32767) :='';
        strSqlDynamic                   Varchar2(32767) :='';
        strClientInfo                   Varchar2(100);
        intRowCount                     Integer;
        intTotalRowCount                Integer         := 0;
        numSqlCode                      Number;
        strSqlErrm                      Varchar2(4000);
        intTries                        Integer;

BEGIN
strSqlCommand := 'DBMS_APPLICATION_INFO.SET_CLIENT_INFO';
DBMS_APPLICATION_INFO.SET_CLIENT_INFO (strProcessName);

strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_INIT';
COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_INIT
        (
                i_MartId                => strMartId,
                i_ProcessName           => strProcessName,
                i_ProcessStartTime      => dtProcessStart,
                o_ProcessSid            => intProcessSid
        );

strMessage01    := 'Updating CSSTG_OWNER.UM_STAGE_JOBS';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);


strSqlCommand   := 'update START_DT on CSSTG_OWNER.UM_STAGE_JOBS';
update CSSTG_OWNER.UM_STAGE_JOBS
   set TABLE_STATUS = 'Reading',
       START_DT = sysdate,
       END_DT = NULL
 where TABLE_NAME = 'PS_ISIR_PARENT'
;

strSqlCommand := 'commit';
commit;


strSqlCommand   := 'update NEW_MAX_SCN on CSSTG_OWNER.UM_STAGE_JOBS';
update CSSTG_OWNER.UM_STAGE_JOBS
   set TABLE_STATUS = 'Merging',
       NEW_MAX_SCN = (select /*+ full(S) */ max(ORA_ROWSCN) from SYSADM.PS_ISIR_PARENT@SASOURCE S)
 where TABLE_NAME = 'PS_ISIR_PARENT'
;

strSqlCommand := 'commit';
commit;


strMessage01    := 'Merging data into CSSTG_OWNER.PS_ISIR_PARENT';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand   := 'merge into CSSTG_OWNER.PS_ISIR_PARENT';
merge /*+ use_hash(S,T) */ into CSSTG_OWNER.PS_ISIR_PARENT T
using (select /*+ full(S) */
nvl(trim(EMPLID),'-') EMPLID,
nvl(trim(INSTITUTION),'-') INSTITUTION,
nvl(trim(AID_YEAR),'-') AID_YEAR,
to_date(to_char(case when EFFDT < '01-JAN-1800' then NULL else EFFDT end,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') EFFDT,
nvl(EFFSEQ,0) EFFSEQ,
nvl(TABLE_ID,0) TABLE_ID,
nvl(trim(MARITAL_STAT),'-') MARITAL_STAT,
nvl(trim(DFLT_MAR_STAT_IND),'-') DFLT_MAR_STAT_IND,
nvl(trim(LEGAL_RESIDENCE),'-') LEGAL_RESIDENCE,
to_date(to_char(case when DT_LEGAL_RES < '01-JAN-1800' then NULL else DT_LEGAL_RES end,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') DT_LEGAL_RES,
nvl(trim(NUMBER_IN_FAMILY),'-') NUMBER_IN_FAMILY,
nvl(trim(DFLT_NUM_FAM_IND),'-') DFLT_NUM_FAM_IND,
nvl(trim(NUM_IN_COLLEGE),'-') NUM_IN_COLLEGE,
nvl(trim(DFLT_NUM_COLL_IND),'-') DFLT_NUM_COLL_IND,
nvl(trim(TAX_FORM_FILED),'-') TAX_FORM_FILED,
nvl(trim(NUMBER_EXEMPTIONS),'-') NUMBER_EXEMPTIONS,
nvl(AGI,0) AGI,
nvl(trim(DFLT_AGI_IND),'-') DFLT_AGI_IND,
nvl(TAXES_PAID,0) TAXES_PAID,
nvl(trim(DFLT_TAXES_PD_IND),'-') DFLT_TAXES_PD_IND,
nvl(FATHER_INCOME,0) FATHER_INCOME,
nvl(trim(DFLT_DAD_INC_IND),'-') DFLT_DAD_INC_IND,
nvl(MOTHER_INCOME,0) MOTHER_INCOME,
nvl(trim(DFLT_MOM_INC_IND),'-') DFLT_MOM_INC_IND,
nvl(SOC_SEC_BENEFITS,0) SOC_SEC_BENEFITS,
nvl(trim(DFLT_SS_BEN_IND),'-') DFLT_SS_BEN_IND,
nvl(AFDC_BENEFITS,0) AFDC_BENEFITS,
nvl(trim(DFLT_AFDC_BEN_IND),'-') DFLT_AFDC_BEN_IND,
nvl(CHILD_SUPPORT,0) CHILD_SUPPORT,
nvl(trim(DFLT_CHLD_SPPT_IND),'-') DFLT_CHLD_SPPT_IND,
nvl(UNTAXED_INCOME,0) UNTAXED_INCOME,
nvl(trim(DFLT_UNTXD_INC_IND),'-') DFLT_UNTXD_INC_IND,
nvl(trim(AGE_OLDER_PARENT),'-') AGE_OLDER_PARENT,
nvl(CASH_SAVINGS,0) CASH_SAVINGS,
nvl(RE_INVEST_VALUE,0) RE_INVEST_VALUE,
nvl(RE_INVEST_DEBT,0) RE_INVEST_DEBT,
nvl(BUSINESS_VALUE,0) BUSINESS_VALUE,
nvl(BUSINESS_DEBT,0) BUSINESS_DEBT,
nvl(FARM_VALUE,0) FARM_VALUE,
nvl(FARM_DEBT,0) FARM_DEBT,
nvl(trim(CURRENCY_CD),'-') CURRENCY_CD,
nvl(trim(FATHER_GRADE_LVL),'-') FATHER_GRADE_LVL,
nvl(trim(MOTHER_GRADE_LVL),'-') MOTHER_GRADE_LVL,
nvl(TOTAL_FROM_WS3,0) TOTAL_FROM_WS3,
nvl(trim(DFLT_WS3_TOT_IND),'-') DFLT_WS3_TOT_IND,
nvl(trim(PROJECTED_YR_INC),'-') PROJECTED_YR_INC,
nvl(ERND_INC_CREDIT,0) ERND_INC_CREDIT,
nvl(trim(DFLT_EIC_IND),'-') DFLT_EIC_IND,
nvl(trim(TAX_RETURN_FILED),'-') TAX_RETURN_FILED,
nvl(trim(ELIG_FOR_1040A_EZ),'-') ELIG_FOR_1040A_EZ,
nvl(TOTAL_FROM_WKA,0) TOTAL_FROM_WKA,
nvl(INV_NET_WORTH,0) INV_NET_WORTH,
nvl(BUS_NET_WORTH,0) BUS_NET_WORTH,
nvl(FARM_NET_WORTH,0) FARM_NET_WORTH,
nvl(trim(LEGAL_RES_PRI_94),'-') LEGAL_RES_PRI_94,
nvl(trim(DFLT_WSA_TOT_IND),'-') DFLT_WSA_TOT_IND,
nvl(trim(FATHER_SSN),'-') FATHER_SSN,
nvl(trim(FATHER_LAST_NAME),'-') FATHER_LAST_NAME,
nvl(trim(MOTHER_SSN),'-') MOTHER_SSN,
nvl(trim(MOTHER_LAST_NAME),'-') MOTHER_LAST_NAME,
nvl(trim(LEGAL_RES_PRIOR),'-') LEGAL_RES_PRIOR,
nvl(TOTAL_FROM_WKC,0) TOTAL_FROM_WKC,
nvl(trim(DFLT_WKC_TOT_IND),'-') DFLT_WKC_TOT_IND,
nvl(trim(BLANK_AGI),'-') BLANK_AGI,
nvl(trim(BLANK_TAXES_PAID),'-') BLANK_TAXES_PAID,
nvl(trim(BLANK_FATHER_INC),'-') BLANK_FATHER_INC,
nvl(trim(BLANK_MOTHER_INC),'-') BLANK_MOTHER_INC,
nvl(trim(BLANK_TOT_FROM_WS3),'-') BLANK_TOT_FROM_WS3,
nvl(trim(BLANK_TOT_FROM_WKA),'-') BLANK_TOT_FROM_WKA,
nvl(trim(BLANK_INV_NET_WRTH),'-') BLANK_INV_NET_WRTH,
to_date(to_char(case when MAR_STATUS_DT < '01-JAN-1800' then NULL else MAR_STATUS_DT end,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') MAR_STATUS_DT,
nvl(trim(FATHER_1ST_NM_INIT),'-') FATHER_1ST_NM_INIT,
to_date(to_char(case when FATHER_DOB < '01-JAN-1800' then NULL else FATHER_DOB end,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') FATHER_DOB,
nvl(trim(MOTHER_1ST_NM_INIT),'-') MOTHER_1ST_NM_INIT,
to_date(to_char(case when MOTHER_DOB < '01-JAN-1800' then NULL else MOTHER_DOB end,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') MOTHER_DOB,
nvl(trim(IWD_PAR_EMAIL),'-') IWD_PAR_EMAIL,
nvl(trim(DFLT_FATHERSSN_IND),'-') DFLT_FATHERSSN_IND,
nvl(trim(DFLT_MOTHERSSN_IND),'-') DFLT_MOTHERSSN_IND,
nvl(trim(BLANK_CASH_SAV),'-') BLANK_CASH_SAV,
nvl(trim(SFA_SSI_INCOME),'-') SFA_SSI_INCOME,
nvl(trim(SFA_FOOD_STAMPS),'-') SFA_FOOD_STAMPS,
nvl(trim(SFA_SCHL_LUNCH_PRG),'-') SFA_SCHL_LUNCH_PRG,
nvl(trim(SFA_TANF_BENEFITS),'-') SFA_TANF_BENEFITS,
nvl(trim(SFA_WIC_BENEFITS),'-') SFA_WIC_BENEFITS,
nvl(trim(SFA_DISLOCATE_WRK),'-') SFA_DISLOCATE_WRK,
nvl(SFA_EDU_CREDITS,0) SFA_EDU_CREDITS,
nvl(SFA_CHILD_SUP_PAID,0) SFA_CHILD_SUP_PAID,
nvl(SFA_NEED_EMPLOYMNT,0) SFA_NEED_EMPLOYMNT,
nvl(SFA_GRANT_AID,0) SFA_GRANT_AID,
nvl(SFA_COMBATPAY,0) SFA_COMBATPAY,
nvl(SFA_PENSION_PAY,0) SFA_PENSION_PAY,
nvl(SFA_IRA_PAY,0) SFA_IRA_PAY,
nvl(SFA_CHILD_SUP_RECV,0) SFA_CHILD_SUP_RECV,
nvl(SFA_INTERST_INCOME,0) SFA_INTERST_INCOME,
nvl(SFA_IRA_DIST,0) SFA_IRA_DIST,
nvl(SFA_UNTAX_PENSION,0) SFA_UNTAX_PENSION,
nvl(SFA_MILITARY_ALLOW,0) SFA_MILITARY_ALLOW,
nvl(SFA_VET_NONEDU_BEN,0) SFA_VET_NONEDU_BEN,
nvl(SFA_UNTAX_INCOME,0) SFA_UNTAX_INCOME,
nvl(SFA_COOP_EARN,0) SFA_COOP_EARN,
nvl(trim(SFA_BLANK_BUSNET),'-') SFA_BLANK_BUSNET,
nvl(trim(SFA_BLANK_EDUCREDT),'-') SFA_BLANK_EDUCREDT,
nvl(trim(SFA_BLANK_CHILDSUP),'-') SFA_BLANK_CHILDSUP,
nvl(trim(SFA_BLANK_NEEDEMPL),'-') SFA_BLANK_NEEDEMPL,
nvl(trim(SFA_BLANK_GRANTAID),'-') SFA_BLANK_GRANTAID,
nvl(trim(SFA_BLANK_COMBAT),'-') SFA_BLANK_COMBAT,
nvl(trim(SFA_BLANK_COOPEARN),'-') SFA_BLANK_COOPEARN,
nvl(trim(SFA_BLANK_PENSION),'-') SFA_BLANK_PENSION,
nvl(trim(SFA_BLANK_IRA_PAY),'-') SFA_BLANK_IRA_PAY,
nvl(trim(SFA_BLANK_CHILDREC),'-') SFA_BLANK_CHILDREC,
nvl(trim(SFA_BLANK_INT_INC),'-') SFA_BLANK_INT_INC,
nvl(trim(SFA_BLANK_IRA_DIST),'-') SFA_BLANK_IRA_DIST,
nvl(trim(SFA_BLANK_UNTAXPEN),'-') SFA_BLANK_UNTAXPEN,
nvl(trim(SFA_BLANK_MILITARY),'-') SFA_BLANK_MILITARY,
nvl(trim(SFA_BLANK_VET_NON),'-') SFA_BLANK_VET_NON,
nvl(trim(SFA_BLANK_UNTAXINC),'-') SFA_BLANK_UNTAXINC,
nvl(trim(SFA_PAR_ASSET_THRS),'-') SFA_PAR_ASSET_THRS,
nvl(trim(SFA_DFLT_ASM_ASSET),'-') SFA_DFLT_ASM_ASSET,
nvl(trim(SFA_PAR_TAX_RET),'-') SFA_PAR_TAX_RET
from SYSADM.PS_ISIR_PARENT@SASOURCE S
where ORA_ROWSCN > (select OLD_MAX_SCN from CSSTG_OWNER.UM_STAGE_JOBS where TABLE_NAME = 'PS_ISIR_PARENT') ) S
   on (
T.EMPLID = S.EMPLID and
T.INSTITUTION = S.INSTITUTION and
T.AID_YEAR = S.AID_YEAR and
T.EFFDT = S.EFFDT and
T.EFFSEQ = S.EFFSEQ and
T.TABLE_ID = S.TABLE_ID and
T.SRC_SYS_ID = 'CS90')
when matched then update set
T.MARITAL_STAT = S.MARITAL_STAT,
T.DFLT_MAR_STAT_IND = S.DFLT_MAR_STAT_IND,
T.LEGAL_RESIDENCE = S.LEGAL_RESIDENCE,
T.DT_LEGAL_RES = S.DT_LEGAL_RES,
T.NUMBER_IN_FAMILY = S.NUMBER_IN_FAMILY,
T.DFLT_NUM_FAM_IND = S.DFLT_NUM_FAM_IND,
T.NUM_IN_COLLEGE = S.NUM_IN_COLLEGE,
T.DFLT_NUM_COLL_IND = S.DFLT_NUM_COLL_IND,
T.TAX_FORM_FILED = S.TAX_FORM_FILED,
T.NUMBER_EXEMPTIONS = S.NUMBER_EXEMPTIONS,
T.AGI = S.AGI,
T.DFLT_AGI_IND = S.DFLT_AGI_IND,
T.TAXES_PAID = S.TAXES_PAID,
T.DFLT_TAXES_PD_IND = S.DFLT_TAXES_PD_IND,
T.FATHER_INCOME = S.FATHER_INCOME,
T.DFLT_DAD_INC_IND = S.DFLT_DAD_INC_IND,
T.MOTHER_INCOME = S.MOTHER_INCOME,
T.DFLT_MOM_INC_IND = S.DFLT_MOM_INC_IND,
T.SOC_SEC_BENEFITS = S.SOC_SEC_BENEFITS,
T.DFLT_SS_BEN_IND = S.DFLT_SS_BEN_IND,
T.AFDC_BENEFITS = S.AFDC_BENEFITS,
T.DFLT_AFDC_BEN_IND = S.DFLT_AFDC_BEN_IND,
T.CHILD_SUPPORT = S.CHILD_SUPPORT,
T.DFLT_CHLD_SPPT_IND = S.DFLT_CHLD_SPPT_IND,
T.UNTAXED_INCOME = S.UNTAXED_INCOME,
T.DFLT_UNTXD_INC_IND = S.DFLT_UNTXD_INC_IND,
T.AGE_OLDER_PARENT = S.AGE_OLDER_PARENT,
T.CASH_SAVINGS = S.CASH_SAVINGS,
T.RE_INVEST_VALUE = S.RE_INVEST_VALUE,
T.RE_INVEST_DEBT = S.RE_INVEST_DEBT,
T.BUSINESS_VALUE = S.BUSINESS_VALUE,
T.BUSINESS_DEBT = S.BUSINESS_DEBT,
T.FARM_VALUE = S.FARM_VALUE,
T.FARM_DEBT = S.FARM_DEBT,
T.CURRENCY_CD = S.CURRENCY_CD,
T.FATHER_GRADE_LVL = S.FATHER_GRADE_LVL,
T.MOTHER_GRADE_LVL = S.MOTHER_GRADE_LVL,
T.TOTAL_FROM_WS3 = S.TOTAL_FROM_WS3,
T.DFLT_WS3_TOT_IND = S.DFLT_WS3_TOT_IND,
T.PROJECTED_YR_INC = S.PROJECTED_YR_INC,
T.ERND_INC_CREDIT = S.ERND_INC_CREDIT,
T.DFLT_EIC_IND = S.DFLT_EIC_IND,
T.TAX_RETURN_FILED = S.TAX_RETURN_FILED,
T.ELIG_FOR_1040A_EZ = S.ELIG_FOR_1040A_EZ,
T.TOTAL_FROM_WKA = S.TOTAL_FROM_WKA,
T.INV_NET_WORTH = S.INV_NET_WORTH,
T.BUS_NET_WORTH = S.BUS_NET_WORTH,
T.FARM_NET_WORTH = S.FARM_NET_WORTH,
T.LEGAL_RES_PRI_94 = S.LEGAL_RES_PRI_94,
T.DFLT_WSA_TOT_IND = S.DFLT_WSA_TOT_IND,
T.FATHER_SSN = S.FATHER_SSN,
T.FATHER_LAST_NAME = S.FATHER_LAST_NAME,
T.MOTHER_SSN = S.MOTHER_SSN,
T.MOTHER_LAST_NAME = S.MOTHER_LAST_NAME,
T.LEGAL_RES_PRIOR = S.LEGAL_RES_PRIOR,
T.TOTAL_FROM_WKC = S.TOTAL_FROM_WKC,
T.DFLT_WKC_TOT_IND = S.DFLT_WKC_TOT_IND,
T.BLANK_AGI = S.BLANK_AGI,
T.BLANK_TAXES_PAID = S.BLANK_TAXES_PAID,
T.BLANK_FATHER_INC = S.BLANK_FATHER_INC,
T.BLANK_MOTHER_INC = S.BLANK_MOTHER_INC,
T.BLANK_TOT_FROM_WS3 = S.BLANK_TOT_FROM_WS3,
T.BLANK_TOT_FROM_WKA = S.BLANK_TOT_FROM_WKA,
T.BLANK_INV_NET_WRTH = S.BLANK_INV_NET_WRTH,
T.MAR_STATUS_DT = S.MAR_STATUS_DT,
T.FATHER_1ST_NM_INIT = S.FATHER_1ST_NM_INIT,
T.FATHER_DOB = S.FATHER_DOB,
T.MOTHER_1ST_NM_INIT = S.MOTHER_1ST_NM_INIT,
T.MOTHER_DOB = S.MOTHER_DOB,
T.IWD_PAR_EMAIL = S.IWD_PAR_EMAIL,
T.DFLT_FATHERSSN_IND = S.DFLT_FATHERSSN_IND,
T.DFLT_MOTHERSSN_IND = S.DFLT_MOTHERSSN_IND,
T.BLANK_CASH_SAV = S.BLANK_CASH_SAV,
T.SFA_SSI_INCOME = S.SFA_SSI_INCOME,
T.SFA_FOOD_STAMPS = S.SFA_FOOD_STAMPS,
T.SFA_SCHL_LUNCH_PRG = S.SFA_SCHL_LUNCH_PRG,
T.SFA_TANF_BENEFITS = S.SFA_TANF_BENEFITS,
T.SFA_WIC_BENEFITS = S.SFA_WIC_BENEFITS,
T.SFA_DISLOCATE_WRK = S.SFA_DISLOCATE_WRK,
T.SFA_EDU_CREDITS = S.SFA_EDU_CREDITS,
T.SFA_CHILD_SUP_PAID = S.SFA_CHILD_SUP_PAID,
T.SFA_NEED_EMPLOYMNT = S.SFA_NEED_EMPLOYMNT,
T.SFA_GRANT_AID = S.SFA_GRANT_AID,
T.SFA_COMBATPAY = S.SFA_COMBATPAY,
T.SFA_PENSION_PAY = S.SFA_PENSION_PAY,
T.SFA_IRA_PAY = S.SFA_IRA_PAY,
T.SFA_CHILD_SUP_RECV = S.SFA_CHILD_SUP_RECV,
T.SFA_INTERST_INCOME = S.SFA_INTERST_INCOME,
T.SFA_IRA_DIST = S.SFA_IRA_DIST,
T.SFA_UNTAX_PENSION = S.SFA_UNTAX_PENSION,
T.SFA_MILITARY_ALLOW = S.SFA_MILITARY_ALLOW,
T.SFA_VET_NONEDU_BEN = S.SFA_VET_NONEDU_BEN,
T.SFA_UNTAX_INCOME = S.SFA_UNTAX_INCOME,
T.SFA_COOP_EARN = S.SFA_COOP_EARN,
T.SFA_BLANK_BUSNET = S.SFA_BLANK_BUSNET,
T.SFA_BLANK_EDUCREDT = S.SFA_BLANK_EDUCREDT,
T.SFA_BLANK_CHILDSUP = S.SFA_BLANK_CHILDSUP,
T.SFA_BLANK_NEEDEMPL = S.SFA_BLANK_NEEDEMPL,
T.SFA_BLANK_GRANTAID = S.SFA_BLANK_GRANTAID,
T.SFA_BLANK_COMBAT = S.SFA_BLANK_COMBAT,
T.SFA_BLANK_COOPEARN = S.SFA_BLANK_COOPEARN,
T.SFA_BLANK_PENSION = S.SFA_BLANK_PENSION,
T.SFA_BLANK_IRA_PAY = S.SFA_BLANK_IRA_PAY,
T.SFA_BLANK_CHILDREC = S.SFA_BLANK_CHILDREC,
T.SFA_BLANK_INT_INC = S.SFA_BLANK_INT_INC,
T.SFA_BLANK_IRA_DIST = S.SFA_BLANK_IRA_DIST,
T.SFA_BLANK_UNTAXPEN = S.SFA_BLANK_UNTAXPEN,
T.SFA_BLANK_MILITARY = S.SFA_BLANK_MILITARY,
T.SFA_BLANK_VET_NON = S.SFA_BLANK_VET_NON,
T.SFA_BLANK_UNTAXINC = S.SFA_BLANK_UNTAXINC,
T.SFA_PAR_ASSET_THRS = S.SFA_PAR_ASSET_THRS,
T.SFA_DFLT_ASM_ASSET = S.SFA_DFLT_ASM_ASSET,
T.SFA_PAR_TAX_RET = S.SFA_PAR_TAX_RET,
T.DATA_ORIGIN = 'S',
T.LASTUPD_EW_DTTM = sysdate,
T.BATCH_SID   = 1234
where
T.MARITAL_STAT <> S.MARITAL_STAT or
T.DFLT_MAR_STAT_IND <> S.DFLT_MAR_STAT_IND or
T.LEGAL_RESIDENCE <> S.LEGAL_RESIDENCE or
nvl(trim(T.DT_LEGAL_RES),0) <> nvl(trim(S.DT_LEGAL_RES),0) or
T.NUMBER_IN_FAMILY <> S.NUMBER_IN_FAMILY or
T.DFLT_NUM_FAM_IND <> S.DFLT_NUM_FAM_IND or
T.NUM_IN_COLLEGE <> S.NUM_IN_COLLEGE or
T.DFLT_NUM_COLL_IND <> S.DFLT_NUM_COLL_IND or
T.TAX_FORM_FILED <> S.TAX_FORM_FILED or
T.NUMBER_EXEMPTIONS <> S.NUMBER_EXEMPTIONS or
T.AGI <> S.AGI or
T.DFLT_AGI_IND <> S.DFLT_AGI_IND or
T.TAXES_PAID <> S.TAXES_PAID or
T.DFLT_TAXES_PD_IND <> S.DFLT_TAXES_PD_IND or
T.FATHER_INCOME <> S.FATHER_INCOME or
T.DFLT_DAD_INC_IND <> S.DFLT_DAD_INC_IND or
T.MOTHER_INCOME <> S.MOTHER_INCOME or
T.DFLT_MOM_INC_IND <> S.DFLT_MOM_INC_IND or
T.SOC_SEC_BENEFITS <> S.SOC_SEC_BENEFITS or
T.DFLT_SS_BEN_IND <> S.DFLT_SS_BEN_IND or
T.AFDC_BENEFITS <> S.AFDC_BENEFITS or
T.DFLT_AFDC_BEN_IND <> S.DFLT_AFDC_BEN_IND or
T.CHILD_SUPPORT <> S.CHILD_SUPPORT or
T.DFLT_CHLD_SPPT_IND <> S.DFLT_CHLD_SPPT_IND or
T.UNTAXED_INCOME <> S.UNTAXED_INCOME or
T.DFLT_UNTXD_INC_IND <> S.DFLT_UNTXD_INC_IND or
T.AGE_OLDER_PARENT <> S.AGE_OLDER_PARENT or
T.CASH_SAVINGS <> S.CASH_SAVINGS or
T.RE_INVEST_VALUE <> S.RE_INVEST_VALUE or
T.RE_INVEST_DEBT <> S.RE_INVEST_DEBT or
T.BUSINESS_VALUE <> S.BUSINESS_VALUE or
T.BUSINESS_DEBT <> S.BUSINESS_DEBT or
T.FARM_VALUE <> S.FARM_VALUE or
T.FARM_DEBT <> S.FARM_DEBT or
T.CURRENCY_CD <> S.CURRENCY_CD or
T.FATHER_GRADE_LVL <> S.FATHER_GRADE_LVL or
T.MOTHER_GRADE_LVL <> S.MOTHER_GRADE_LVL or
T.TOTAL_FROM_WS3 <> S.TOTAL_FROM_WS3 or
T.DFLT_WS3_TOT_IND <> S.DFLT_WS3_TOT_IND or
T.PROJECTED_YR_INC <> S.PROJECTED_YR_INC or
T.ERND_INC_CREDIT <> S.ERND_INC_CREDIT or
T.DFLT_EIC_IND <> S.DFLT_EIC_IND or
T.TAX_RETURN_FILED <> S.TAX_RETURN_FILED or
T.ELIG_FOR_1040A_EZ <> S.ELIG_FOR_1040A_EZ or
T.TOTAL_FROM_WKA <> S.TOTAL_FROM_WKA or
T.INV_NET_WORTH <> S.INV_NET_WORTH or
T.BUS_NET_WORTH <> S.BUS_NET_WORTH or
T.FARM_NET_WORTH <> S.FARM_NET_WORTH or
T.LEGAL_RES_PRI_94 <> S.LEGAL_RES_PRI_94 or
T.DFLT_WSA_TOT_IND <> S.DFLT_WSA_TOT_IND or
T.FATHER_SSN <> S.FATHER_SSN or
T.FATHER_LAST_NAME <> S.FATHER_LAST_NAME or
T.MOTHER_SSN <> S.MOTHER_SSN or
T.MOTHER_LAST_NAME <> S.MOTHER_LAST_NAME or
T.LEGAL_RES_PRIOR <> S.LEGAL_RES_PRIOR or
T.TOTAL_FROM_WKC <> S.TOTAL_FROM_WKC or
T.DFLT_WKC_TOT_IND <> S.DFLT_WKC_TOT_IND or
T.BLANK_AGI <> S.BLANK_AGI or
T.BLANK_TAXES_PAID <> S.BLANK_TAXES_PAID or
T.BLANK_FATHER_INC <> S.BLANK_FATHER_INC or
T.BLANK_MOTHER_INC <> S.BLANK_MOTHER_INC or
T.BLANK_TOT_FROM_WS3 <> S.BLANK_TOT_FROM_WS3 or
T.BLANK_TOT_FROM_WKA <> S.BLANK_TOT_FROM_WKA or
T.BLANK_INV_NET_WRTH <> S.BLANK_INV_NET_WRTH or
nvl(trim(T.MAR_STATUS_DT),0) <> nvl(trim(S.MAR_STATUS_DT),0) or
T.FATHER_1ST_NM_INIT <> S.FATHER_1ST_NM_INIT or
nvl(trim(T.FATHER_DOB),0) <> nvl(trim(S.FATHER_DOB),0) or
T.MOTHER_1ST_NM_INIT <> S.MOTHER_1ST_NM_INIT or
nvl(trim(T.MOTHER_DOB),0) <> nvl(trim(S.MOTHER_DOB),0) or
T.IWD_PAR_EMAIL <> S.IWD_PAR_EMAIL or
T.DFLT_FATHERSSN_IND <> S.DFLT_FATHERSSN_IND or
T.DFLT_MOTHERSSN_IND <> S.DFLT_MOTHERSSN_IND or
T.BLANK_CASH_SAV <> S.BLANK_CASH_SAV or
T.SFA_SSI_INCOME <> S.SFA_SSI_INCOME or
T.SFA_FOOD_STAMPS <> S.SFA_FOOD_STAMPS or
T.SFA_SCHL_LUNCH_PRG <> S.SFA_SCHL_LUNCH_PRG or
T.SFA_TANF_BENEFITS <> S.SFA_TANF_BENEFITS or
T.SFA_WIC_BENEFITS <> S.SFA_WIC_BENEFITS or
T.SFA_DISLOCATE_WRK <> S.SFA_DISLOCATE_WRK or
T.SFA_EDU_CREDITS <> S.SFA_EDU_CREDITS or
T.SFA_CHILD_SUP_PAID <> S.SFA_CHILD_SUP_PAID or
T.SFA_NEED_EMPLOYMNT <> S.SFA_NEED_EMPLOYMNT or
T.SFA_GRANT_AID <> S.SFA_GRANT_AID or
T.SFA_COMBATPAY <> S.SFA_COMBATPAY or
T.SFA_PENSION_PAY <> S.SFA_PENSION_PAY or
T.SFA_IRA_PAY <> S.SFA_IRA_PAY or
T.SFA_CHILD_SUP_RECV <> S.SFA_CHILD_SUP_RECV or
T.SFA_INTERST_INCOME <> S.SFA_INTERST_INCOME or
T.SFA_IRA_DIST <> S.SFA_IRA_DIST or
T.SFA_UNTAX_PENSION <> S.SFA_UNTAX_PENSION or
T.SFA_MILITARY_ALLOW <> S.SFA_MILITARY_ALLOW or
T.SFA_VET_NONEDU_BEN <> S.SFA_VET_NONEDU_BEN or
T.SFA_UNTAX_INCOME <> S.SFA_UNTAX_INCOME or
T.SFA_COOP_EARN <> S.SFA_COOP_EARN or
T.SFA_BLANK_BUSNET <> S.SFA_BLANK_BUSNET or
T.SFA_BLANK_EDUCREDT <> S.SFA_BLANK_EDUCREDT or
T.SFA_BLANK_CHILDSUP <> S.SFA_BLANK_CHILDSUP or
T.SFA_BLANK_NEEDEMPL <> S.SFA_BLANK_NEEDEMPL or
T.SFA_BLANK_GRANTAID <> S.SFA_BLANK_GRANTAID or
T.SFA_BLANK_COMBAT <> S.SFA_BLANK_COMBAT or
T.SFA_BLANK_COOPEARN <> S.SFA_BLANK_COOPEARN or
T.SFA_BLANK_PENSION <> S.SFA_BLANK_PENSION or
T.SFA_BLANK_IRA_PAY <> S.SFA_BLANK_IRA_PAY or
T.SFA_BLANK_CHILDREC <> S.SFA_BLANK_CHILDREC or
T.SFA_BLANK_INT_INC <> S.SFA_BLANK_INT_INC or
T.SFA_BLANK_IRA_DIST <> S.SFA_BLANK_IRA_DIST or
T.SFA_BLANK_UNTAXPEN <> S.SFA_BLANK_UNTAXPEN or
T.SFA_BLANK_MILITARY <> S.SFA_BLANK_MILITARY or
T.SFA_BLANK_VET_NON <> S.SFA_BLANK_VET_NON or
T.SFA_BLANK_UNTAXINC <> S.SFA_BLANK_UNTAXINC or
T.SFA_PAR_ASSET_THRS <> S.SFA_PAR_ASSET_THRS or
T.SFA_DFLT_ASM_ASSET <> S.SFA_DFLT_ASM_ASSET or
T.SFA_PAR_TAX_RET <> S.SFA_PAR_TAX_RET or
T.DATA_ORIGIN = 'D'
when not matched then
insert (
T.EMPLID,
T.INSTITUTION,
T.AID_YEAR,
T.EFFDT,
T.EFFSEQ,
T.TABLE_ID,
T.SRC_SYS_ID,
T.MARITAL_STAT,
T.DFLT_MAR_STAT_IND,
T.LEGAL_RESIDENCE,
T.DT_LEGAL_RES,
T.NUMBER_IN_FAMILY,
T.DFLT_NUM_FAM_IND,
T.NUM_IN_COLLEGE,
T.DFLT_NUM_COLL_IND,
T.TAX_FORM_FILED,
T.NUMBER_EXEMPTIONS,
T.AGI,
T.DFLT_AGI_IND,
T.TAXES_PAID,
T.DFLT_TAXES_PD_IND,
T.FATHER_INCOME,
T.DFLT_DAD_INC_IND,
T.MOTHER_INCOME,
T.DFLT_MOM_INC_IND,
T.SOC_SEC_BENEFITS,
T.DFLT_SS_BEN_IND,
T.AFDC_BENEFITS,
T.DFLT_AFDC_BEN_IND,
T.CHILD_SUPPORT,
T.DFLT_CHLD_SPPT_IND,
T.UNTAXED_INCOME,
T.DFLT_UNTXD_INC_IND,
T.AGE_OLDER_PARENT,
T.CASH_SAVINGS,
T.RE_INVEST_VALUE,
T.RE_INVEST_DEBT,
T.BUSINESS_VALUE,
T.BUSINESS_DEBT,
T.FARM_VALUE,
T.FARM_DEBT,
T.CURRENCY_CD,
T.FATHER_GRADE_LVL,
T.MOTHER_GRADE_LVL,
T.TOTAL_FROM_WS3,
T.DFLT_WS3_TOT_IND,
T.PROJECTED_YR_INC,
T.ERND_INC_CREDIT,
T.DFLT_EIC_IND,
T.TAX_RETURN_FILED,
T.ELIG_FOR_1040A_EZ,
T.TOTAL_FROM_WKA,
T.INV_NET_WORTH,
T.BUS_NET_WORTH,
T.FARM_NET_WORTH,
T.LEGAL_RES_PRI_94,
T.DFLT_WSA_TOT_IND,
T.FATHER_SSN,
T.FATHER_LAST_NAME,
T.MOTHER_SSN,
T.MOTHER_LAST_NAME,
T.LEGAL_RES_PRIOR,
T.TOTAL_FROM_WKC,
T.DFLT_WKC_TOT_IND,
T.BLANK_AGI,
T.BLANK_TAXES_PAID,
T.BLANK_FATHER_INC,
T.BLANK_MOTHER_INC,
T.BLANK_TOT_FROM_WS3,
T.BLANK_TOT_FROM_WKA,
T.BLANK_INV_NET_WRTH,
T.MAR_STATUS_DT,
T.FATHER_1ST_NM_INIT,
T.FATHER_DOB,
T.MOTHER_1ST_NM_INIT,
T.MOTHER_DOB,
T.IWD_PAR_EMAIL,
T.DFLT_FATHERSSN_IND,
T.DFLT_MOTHERSSN_IND,
T.BLANK_CASH_SAV,
T.SFA_SSI_INCOME,
T.SFA_FOOD_STAMPS,
T.SFA_SCHL_LUNCH_PRG,
T.SFA_TANF_BENEFITS,
T.SFA_WIC_BENEFITS,
T.SFA_DISLOCATE_WRK,
T.SFA_EDU_CREDITS,
T.SFA_CHILD_SUP_PAID,
T.SFA_NEED_EMPLOYMNT,
T.SFA_GRANT_AID,
T.SFA_COMBATPAY,
T.SFA_PENSION_PAY,
T.SFA_IRA_PAY,
T.SFA_CHILD_SUP_RECV,
T.SFA_INTERST_INCOME,
T.SFA_IRA_DIST,
T.SFA_UNTAX_PENSION,
T.SFA_MILITARY_ALLOW,
T.SFA_VET_NONEDU_BEN,
T.SFA_UNTAX_INCOME,
T.SFA_COOP_EARN,
T.SFA_BLANK_BUSNET,
T.SFA_BLANK_EDUCREDT,
T.SFA_BLANK_CHILDSUP,
T.SFA_BLANK_NEEDEMPL,
T.SFA_BLANK_GRANTAID,
T.SFA_BLANK_COMBAT,
T.SFA_BLANK_COOPEARN,
T.SFA_BLANK_PENSION,
T.SFA_BLANK_IRA_PAY,
T.SFA_BLANK_CHILDREC,
T.SFA_BLANK_INT_INC,
T.SFA_BLANK_IRA_DIST,
T.SFA_BLANK_UNTAXPEN,
T.SFA_BLANK_MILITARY,
T.SFA_BLANK_VET_NON,
T.SFA_BLANK_UNTAXINC,
T.SFA_PAR_ASSET_THRS,
T.SFA_DFLT_ASM_ASSET,
T.SFA_PAR_TAX_RET,
T.LOAD_ERROR,
T.DATA_ORIGIN,
T.CREATED_EW_DTTM,
T.LASTUPD_EW_DTTM,
T.BATCH_SID
)
values (
S.EMPLID,
S.INSTITUTION,
S.AID_YEAR,
S.EFFDT,
S.EFFSEQ,
S.TABLE_ID,
'CS90',
S.MARITAL_STAT,
S.DFLT_MAR_STAT_IND,
S.LEGAL_RESIDENCE,
S.DT_LEGAL_RES,
S.NUMBER_IN_FAMILY,
S.DFLT_NUM_FAM_IND,
S.NUM_IN_COLLEGE,
S.DFLT_NUM_COLL_IND,
S.TAX_FORM_FILED,
S.NUMBER_EXEMPTIONS,
S.AGI,
S.DFLT_AGI_IND,
S.TAXES_PAID,
S.DFLT_TAXES_PD_IND,
S.FATHER_INCOME,
S.DFLT_DAD_INC_IND,
S.MOTHER_INCOME,
S.DFLT_MOM_INC_IND,
S.SOC_SEC_BENEFITS,
S.DFLT_SS_BEN_IND,
S.AFDC_BENEFITS,
S.DFLT_AFDC_BEN_IND,
S.CHILD_SUPPORT,
S.DFLT_CHLD_SPPT_IND,
S.UNTAXED_INCOME,
S.DFLT_UNTXD_INC_IND,
S.AGE_OLDER_PARENT,
S.CASH_SAVINGS,
S.RE_INVEST_VALUE,
S.RE_INVEST_DEBT,
S.BUSINESS_VALUE,
S.BUSINESS_DEBT,
S.FARM_VALUE,
S.FARM_DEBT,
S.CURRENCY_CD,
S.FATHER_GRADE_LVL,
S.MOTHER_GRADE_LVL,
S.TOTAL_FROM_WS3,
S.DFLT_WS3_TOT_IND,
S.PROJECTED_YR_INC,
S.ERND_INC_CREDIT,
S.DFLT_EIC_IND,
S.TAX_RETURN_FILED,
S.ELIG_FOR_1040A_EZ,
S.TOTAL_FROM_WKA,
S.INV_NET_WORTH,
S.BUS_NET_WORTH,
S.FARM_NET_WORTH,
S.LEGAL_RES_PRI_94,
S.DFLT_WSA_TOT_IND,
S.FATHER_SSN,
S.FATHER_LAST_NAME,
S.MOTHER_SSN,
S.MOTHER_LAST_NAME,
S.LEGAL_RES_PRIOR,
S.TOTAL_FROM_WKC,
S.DFLT_WKC_TOT_IND,
S.BLANK_AGI,
S.BLANK_TAXES_PAID,
S.BLANK_FATHER_INC,
S.BLANK_MOTHER_INC,
S.BLANK_TOT_FROM_WS3,
S.BLANK_TOT_FROM_WKA,
S.BLANK_INV_NET_WRTH,
S.MAR_STATUS_DT,
S.FATHER_1ST_NM_INIT,
S.FATHER_DOB,
S.MOTHER_1ST_NM_INIT,
S.MOTHER_DOB,
S.IWD_PAR_EMAIL,
S.DFLT_FATHERSSN_IND,
S.DFLT_MOTHERSSN_IND,
S.BLANK_CASH_SAV,
S.SFA_SSI_INCOME,
S.SFA_FOOD_STAMPS,
S.SFA_SCHL_LUNCH_PRG,
S.SFA_TANF_BENEFITS,
S.SFA_WIC_BENEFITS,
S.SFA_DISLOCATE_WRK,
S.SFA_EDU_CREDITS,
S.SFA_CHILD_SUP_PAID,
S.SFA_NEED_EMPLOYMNT,
S.SFA_GRANT_AID,
S.SFA_COMBATPAY,
S.SFA_PENSION_PAY,
S.SFA_IRA_PAY,
S.SFA_CHILD_SUP_RECV,
S.SFA_INTERST_INCOME,
S.SFA_IRA_DIST,
S.SFA_UNTAX_PENSION,
S.SFA_MILITARY_ALLOW,
S.SFA_VET_NONEDU_BEN,
S.SFA_UNTAX_INCOME,
S.SFA_COOP_EARN,
S.SFA_BLANK_BUSNET,
S.SFA_BLANK_EDUCREDT,
S.SFA_BLANK_CHILDSUP,
S.SFA_BLANK_NEEDEMPL,
S.SFA_BLANK_GRANTAID,
S.SFA_BLANK_COMBAT,
S.SFA_BLANK_COOPEARN,
S.SFA_BLANK_PENSION,
S.SFA_BLANK_IRA_PAY,
S.SFA_BLANK_CHILDREC,
S.SFA_BLANK_INT_INC,
S.SFA_BLANK_IRA_DIST,
S.SFA_BLANK_UNTAXPEN,
S.SFA_BLANK_MILITARY,
S.SFA_BLANK_VET_NON,
S.SFA_BLANK_UNTAXINC,
S.SFA_PAR_ASSET_THRS,
S.SFA_DFLT_ASM_ASSET,
S.SFA_PAR_TAX_RET,
'N',
'S',
sysdate,
sysdate,
1234);

strSqlCommand   := 'SET intRowCount';
intRowCount     := SQL%ROWCOUNT;

strSqlCommand := 'commit';
commit;

strMessage01    := '# of PS_ISIR_PARENT rows merged: ' || TO_CHAR(intRowCount,'999,999,999,999');
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_DETAIL';
COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_DETAIL
        (
                i_TargetTableName   => 'PS_ISIR_PARENT',
                i_Action            => 'MERGE',
                i_RowCount          => intRowCount
        );


strMessage01    := 'Updating CSSTG_OWNER.UM_STAGE_JOBS';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand   := 'update TABLE_STATUS on CSSTG_OWNER.UM_STAGE_JOBS';
update CSSTG_OWNER.UM_STAGE_JOBS
   set TABLE_STATUS = 'Deleting',
       OLD_MAX_SCN = NEW_MAX_SCN
 where TABLE_NAME = 'PS_ISIR_PARENT';

strSqlCommand := 'commit';
commit;


strMessage01    := 'Updating DATA_ORIGIN on CSSTG_OWNER.PS_ISIR_PARENT';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand   := 'update DATA_ORIGIN on CSSTG_OWNER.PS_ISIR_PARENT';
update CSSTG_OWNER.PS_ISIR_PARENT T
   set T.DATA_ORIGIN = 'D',
          T.LASTUPD_EW_DTTM = SYSDATE
 where T.DATA_ORIGIN <> 'D'
   and exists 
(select 1 from
(select EMPLID, INSTITUTION, AID_YEAR, EFFDT, EFFSEQ, TABLE_ID
   from CSSTG_OWNER.PS_ISIR_PARENT T2
  where (select DELETE_FLG from CSSTG_OWNER.UM_STAGE_JOBS where TABLE_NAME = 'PS_ISIR_PARENT') = 'Y'
  minus
 select nvl(trim(EMPLID),'-'), nvl(trim(INSTITUTION),'-'), nvl(trim(AID_YEAR),'-'), EFFDT, EFFSEQ, nvl(trim(TABLE_ID),'-')
   from SYSADM.PS_ISIR_PARENT@SASOURCE S2
  where (select DELETE_FLG from CSSTG_OWNER.UM_STAGE_JOBS where TABLE_NAME = 'PS_ISIR_PARENT') = 'Y'
   ) S
 where T.EMPLID = S.EMPLID
   and T.INSTITUTION = S.INSTITUTION
   and T.AID_YEAR = S.AID_YEAR
   and T.EFFDT = S.EFFDT
   and T.EFFSEQ = S.EFFSEQ
   and T.TABLE_ID = S.TABLE_ID
   and T.SRC_SYS_ID = 'CS90' 
   ) 
;

strSqlCommand   := 'SET intRowCount';
intRowCount     := SQL%ROWCOUNT;

strSqlCommand := 'commit';
commit;

strMessage01    := '# of PS_ISIR_PARENT rows updated: ' || TO_CHAR(intRowCount,'999,999,999,999');
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_DETAIL';
COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_DETAIL
        (
                i_TargetTableName   => 'PS_ISIR_PARENT',
                i_Action            => 'UPDATE',
                i_RowCount          => intRowCount
        );


strMessage01    := 'Updating CSSTG_OWNER.UM_STAGE_JOBS';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand   := 'update END_DT on CSSTG_OWNER.UM_STAGE_JOBS';

update CSSTG_OWNER.UM_STAGE_JOBS
   set TABLE_STATUS = 'Complete',
       END_DT = SYSDATE
 where TABLE_NAME = 'PS_ISIR_PARENT'
;

strSqlCommand := 'commit';
commit;


strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_SUCCESS';
COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_SUCCESS;

strMessage01    := strProcessName || ' is complete.';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);


EXCEPTION
    WHEN OTHERS THEN
        numSqlCode := SQLCODE;
        strSqlErrm := SQLERRM;

        ROLLBACK;
  
        strMessage01 := 'Error code: ' || TO_CHAR(SQLCODE) || ' Error Message: ' || SQLERRM;
        strMessage02 := TO_CHAR(SQLCODE);
  
        COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_FAILURE
                       (i_SqlCommand    => strSqlCommand,
                        i_ErrorText     => strMessage01,
                        i_ErrorCode     => strMessage02,
                        i_ErrorMessage  => strSqlErrm
                       );
               
        strMessage01 := 'Error...'
                        || strNewLine   || 'SQL Command:   ' || strSqlCommand
                        || strNewLine   || 'Error code:    ' || numSqlCode
                        || strNewLine   || 'Error Message: ' || strSqlErrm;

        COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);
        RAISE_APPLICATION_ERROR( -20001, strMessage01);

END PS_ISIR_PARENT_P;
/
