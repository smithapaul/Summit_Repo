DROP PROCEDURE CSMRT_OWNER.PS_PKG_PLAN_TBL_P
/

--
-- PS_PKG_PLAN_TBL_P  (Procedure) 
--
CREATE OR REPLACE PROCEDURE CSMRT_OWNER."PS_PKG_PLAN_TBL_P"
   AUTHID CURRENT_USER
IS
   /*
   -- Run before the first time
   DELETE
   FROM CSSTG_OWNER.UM_STAGE_JOBS
    WHERE TABLE_NAME = 'PS_PKG_PLAN_TBL'

   INSERT INTO CSSTG_OWNER.UM_STAGE_JOBS
   (TABLE_NAME, DELETE_FLG)
   VALUES
   ('PS_PKG_PLAN_TBL', 'Y')

   SELECT *
   FROM CSSTG_OWNER.UM_STAGE_JOBS
    WHERE TABLE_NAME = 'PS_PKG_PLAN_TBL'
   */


   ------------------------------------------------------------------------
   -- George Adams
   --
   -- Loads stage table PS_PKG_PLAN_TBL from PeopleSoft table PS_PKG_PLAN_TBL.
   --
   -- V01  SMT-xxxx 08/08/2017,    Jim Doucette
   --                              Converted from PS_PKG_PLAN_TBL.sql
   --
   ------------------------------------------------------------------------

   strMartId          VARCHAR2 (50) := 'CSW';
   strProcessName     VARCHAR2 (100) := 'PS_PKG_PLAN_TBL';
   intProcessSid      INTEGER;
   dtProcessStart     DATE := SYSDATE;
   strMessage01       VARCHAR2 (4000);
   strMessage02       VARCHAR2 (512);
   strMessage03       VARCHAR2 (512) := '';
   strNewLine         VARCHAR2 (2) := CHR (13) || CHR (10);
   strSqlCommand      VARCHAR2 (32767) := '';
   strSqlDynamic      VARCHAR2 (32767) := '';
   strClientInfo      VARCHAR2 (100);
   intRowCount        INTEGER;
   intTotalRowCount   INTEGER := 0;
   numSqlCode         NUMBER;
   strSqlErrm         VARCHAR2 (4000);
   intTries           INTEGER;
BEGIN
   strSqlCommand := 'DBMS_APPLICATION_INFO.SET_CLIENT_INFO';
   DBMS_APPLICATION_INFO.SET_CLIENT_INFO (strProcessName);

   strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_INIT';
   COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_INIT (
      i_MartId             => strMartId,
      i_ProcessName        => strProcessName,
      i_ProcessStartTime   => dtProcessStart,
      o_ProcessSid         => intProcessSid);

   strMessage01 := 'Updating CSSTG_OWNER.UM_STAGE_JOBS';
   COMMON_OWNER.SMT_LOG.PUT_MESSAGE (i_Message => strMessage01);


   strSqlCommand := 'update START_DT on CSSTG_OWNER.UM_STAGE_JOBS';

   UPDATE CSSTG_OWNER.UM_STAGE_JOBS
      SET TABLE_STATUS = 'Reading', START_DT = SYSDATE, END_DT = NULL
    WHERE TABLE_NAME = 'PS_PKG_PLAN_TBL';

   strSqlCommand := 'commit';
   COMMIT;


   strSqlCommand := 'update NEW_MAX_SCN on CSSTG_OWNER.UM_STAGE_JOBS';

   UPDATE CSSTG_OWNER.UM_STAGE_JOBS
      SET TABLE_STATUS = 'Merging',
          NEW_MAX_SCN =
             (SELECT /*+ full(S) */
                    MAX (ORA_ROWSCN)
                FROM SYSADM.PS_PKG_PLAN_TBL@SASOURCE S)
    WHERE TABLE_NAME = 'PS_PKG_PLAN_TBL';

   strSqlCommand := 'commit';
   COMMIT;


   strMessage01 := 'Merging data into CSSTG_OWNER.PS_PKG_PLAN_TBL';
   COMMON_OWNER.SMT_LOG.PUT_MESSAGE (i_Message => strMessage01);

   strSqlCommand := 'merge into CSSTG_OWNER.PS_PKG_PLAN_TBL';
merge /*+ use_hash(S,T) */ into CSSTG_OWNER.PS_PKG_PLAN_TBL T 
using (select /*+ full(S) */
    nvl(trim(INSTITUTION),'-') INSTITUTION, 
    nvl(trim(AID_YEAR),'-') AID_YEAR, 
    nvl(trim(ACAD_CAREER),'-') ACAD_CAREER, 
    nvl(trim(PKG_PLAN_ID),'-') PKG_PLAN_ID, 
    EFFDT, 
    nvl(trim(EFF_STATUS),'-') EFF_STATUS, 
    nvl(PROCESSING_ORDER,0) PROCESSING_ORDER, 
    nvl(trim(DESCR),'-') DESCR, 
    nvl(trim(DESCRSHORT),'-') DESCRSHORT, 
    nvl(trim(FED_OR_INST),'-') FED_OR_INST, 
    nvl(FED_NEED_MAX_AMT,0) FED_NEED_MAX_AMT, 
    nvl(trim(FED_NEED_MAX_EQTN),'-') FED_NEED_MAX_EQTN, 
    nvl(trim(FED_NEED_MAX_PREF),'-') FED_NEED_MAX_PREF, 
    nvl(FED_PCT_NEED_MEET,0) FED_PCT_NEED_MEET, 
    nvl(trim(FED_PCT_PREF_FLAG),'-') FED_PCT_PREF_FLAG, 
    nvl(INST_NEED_MAX_AMT,0) INST_NEED_MAX_AMT, 
    nvl(trim(INST_NEED_MAX_EQTN),'-') INST_NEED_MAX_EQTN, 
    nvl(trim(INST_NEED_MAX_PREF),'-') INST_NEED_MAX_PREF, 
    nvl(INST_PCT_NEED_MEET,0) INST_PCT_NEED_MEET, 
    nvl(trim(INST_PCT_PREF_FLAG),'-') INST_PCT_PREF_FLAG, 
    nvl(FED_LOAN_MAX_AMT,0) FED_LOAN_MAX_AMT, 
    nvl(trim(FED_LOAN_MAX_EQTN),'-') FED_LOAN_MAX_EQTN, 
    nvl(trim(FED_LOAN_MAX_PREF),'-') FED_LOAN_MAX_PREF, 
    nvl(INST_LOAN_MAX_AMT,0) INST_LOAN_MAX_AMT, 
    nvl(trim(INST_LOAN_MAX_EQTN),'-') INST_LOAN_MAX_EQTN, 
    nvl(trim(INST_LOAN_MAX_PREF),'-') INST_LOAN_MAX_PREF, 
    nvl(trim(FED_OVERAWARD_PREF),'-') FED_OVERAWARD_PREF, 
    nvl(FED_OVERAWARD_MAX,0) FED_OVERAWARD_MAX, 
    nvl(trim(FED_OVERAWARD_EQTN),'-') FED_OVERAWARD_EQTN, 
    nvl(trim(FED_PKG_LIMIT_PREF),'-') FED_PKG_LIMIT_PREF, 
    nvl(trim(FED_OVERRIDE_OBJ),'-') FED_OVERRIDE_OBJ, 
    nvl(trim(INST_OVERAWARD_PRF),'-') INST_OVERAWARD_PRF, 
    nvl(INST_OVERAWARD_MAX,0) INST_OVERAWARD_MAX, 
    nvl(trim(INST_OVERAWRD_EQTN),'-') INST_OVERAWRD_EQTN, 
    nvl(trim(INST_PKG_LIMIT_PRF),'-') INST_PKG_LIMIT_PRF, 
    nvl(trim(INST_OVERRIDE_OBJ),'-') INST_OVERRIDE_OBJ, 
    nvl(EQUITY_LIMIT,0) EQUITY_LIMIT, 
    nvl(trim(EQUITY_LIMIT_EQTN),'-') EQUITY_LIMIT_EQTN, 
    nvl(trim(EQUITY_MAX_PREF),'-') EQUITY_MAX_PREF, 
    nvl(trim(EQUITY_PCFM_OFFSET),'-') EQUITY_PCFM_OFFSET, 
    nvl(trim(EQUITY_PCIM_OFFSET),'-') EQUITY_PCIM_OFFSET, 
    nvl(trim(EQUITY_SCFM_OFFSET),'-') EQUITY_SCFM_OFFSET, 
    nvl(trim(EQUITY_SCIM_OFFSET),'-') EQUITY_SCIM_OFFSET, 
    nvl(trim(EQUITY_SS_OFFSET),'-') EQUITY_SS_OFFSET, 
    nvl(trim(EQUITY_SSIM_OFFSET),'-') EQUITY_SSIM_OFFSET, 
    nvl(trim(EQUITY_ITM_OFFSET),'-') EQUITY_ITM_OFFSET, 
    nvl(trim(PKG_EQUITY_GROUP),'-') PKG_EQUITY_GROUP, 
    nvl(PKG_EQUITY_NBR,0) PKG_EQUITY_NBR, 
    nvl(trim(PKG_SORT_FIELD),'-') PKG_SORT_FIELD, 
    nvl(trim(FLD_SORT_ORDER),'-') FLD_SORT_ORDER, 
    nvl(trim(SELECTION_CRITERIA),'-') SELECTION_CRITERIA, 
    nvl(trim(CURRENCY_CD),'-') CURRENCY_CD, 
    nvl(trim(PKG_AWARD_PERIOD),'-') PKG_AWARD_PERIOD, 
    nvl(FED_WORK_MAX_AMT,0) FED_WORK_MAX_AMT, 
    nvl(trim(FED_WORK_MAX_EQTN),'-') FED_WORK_MAX_EQTN, 
    nvl(trim(FED_WORK_MAX_PREF),'-') FED_WORK_MAX_PREF, 
    nvl(INST_WORK_MAX_AMT,0) INST_WORK_MAX_AMT, 
    nvl(trim(INST_WORK_MAX_EQTN),'-') INST_WORK_MAX_EQTN, 
    nvl(trim(INST_WORK_MAX_PREF),'-') INST_WORK_MAX_PREF, 
    nvl(trim(PELL_ONLY_PLAN),'-') PELL_ONLY_PLAN
from SYSADM.PS_PKG_PLAN_TBL@SASOURCE S
where ORA_ROWSCN > (select OLD_MAX_SCN from CSSTG_OWNER.UM_STAGE_JOBS where TABLE_NAME = 'PS_PKG_PLAN_TBL') ) S 
 on ( 
    T.INSTITUTION = S.INSTITUTION and 
    T.AID_YEAR = S.AID_YEAR and 
    T.ACAD_CAREER = S.ACAD_CAREER and 
    T.PKG_PLAN_ID = S.PKG_PLAN_ID and 
    T.EFFDT = S.EFFDT and 
    T.SRC_SYS_ID = 'CS90')
when matched then update set
    T.EFF_STATUS = S.EFF_STATUS,
    T.PROCESSING_ORDER = S.PROCESSING_ORDER,
    T.DESCR = S.DESCR,
    T.DESCRSHORT = S.DESCRSHORT,
    T.FED_OR_INST = S.FED_OR_INST,
    T.FED_NEED_MAX_AMT = S.FED_NEED_MAX_AMT,
    T.FED_NEED_MAX_EQTN = S.FED_NEED_MAX_EQTN,
    T.FED_NEED_MAX_PREF = S.FED_NEED_MAX_PREF,
    T.FED_PCT_NEED_MEET = S.FED_PCT_NEED_MEET,
    T.FED_PCT_PREF_FLAG = S.FED_PCT_PREF_FLAG,
    T.INST_NEED_MAX_AMT = S.INST_NEED_MAX_AMT,
    T.INST_NEED_MAX_EQTN = S.INST_NEED_MAX_EQTN,
    T.INST_NEED_MAX_PREF = S.INST_NEED_MAX_PREF,
    T.INST_PCT_NEED_MEET = S.INST_PCT_NEED_MEET,
    T.INST_PCT_PREF_FLAG = S.INST_PCT_PREF_FLAG,
    T.FED_LOAN_MAX_AMT = S.FED_LOAN_MAX_AMT,
    T.FED_LOAN_MAX_EQTN = S.FED_LOAN_MAX_EQTN,
    T.FED_LOAN_MAX_PREF = S.FED_LOAN_MAX_PREF,
    T.INST_LOAN_MAX_AMT = S.INST_LOAN_MAX_AMT,
    T.INST_LOAN_MAX_EQTN = S.INST_LOAN_MAX_EQTN,
    T.INST_LOAN_MAX_PREF = S.INST_LOAN_MAX_PREF,
    T.FED_OVERAWARD_PREF = S.FED_OVERAWARD_PREF,
    T.FED_OVERAWARD_MAX = S.FED_OVERAWARD_MAX,
    T.FED_OVERAWARD_EQTN = S.FED_OVERAWARD_EQTN,
    T.FED_PKG_LIMIT_PREF = S.FED_PKG_LIMIT_PREF,
    T.FED_OVERRIDE_OBJ = S.FED_OVERRIDE_OBJ,
    T.INST_OVERAWARD_PRF = S.INST_OVERAWARD_PRF,
    T.INST_OVERAWARD_MAX = S.INST_OVERAWARD_MAX,
    T.INST_OVERAWRD_EQTN = S.INST_OVERAWRD_EQTN,
    T.INST_PKG_LIMIT_PRF = S.INST_PKG_LIMIT_PRF,
    T.INST_OVERRIDE_OBJ = S.INST_OVERRIDE_OBJ,
    T.EQUITY_LIMIT = S.EQUITY_LIMIT,
    T.EQUITY_LIMIT_EQTN = S.EQUITY_LIMIT_EQTN,
    T.EQUITY_MAX_PREF = S.EQUITY_MAX_PREF,
    T.EQUITY_PCFM_OFFSET = S.EQUITY_PCFM_OFFSET,
    T.EQUITY_PCIM_OFFSET = S.EQUITY_PCIM_OFFSET,
    T.EQUITY_SCFM_OFFSET = S.EQUITY_SCFM_OFFSET,
    T.EQUITY_SCIM_OFFSET = S.EQUITY_SCIM_OFFSET,
    T.EQUITY_SS_OFFSET = S.EQUITY_SS_OFFSET,
    T.EQUITY_SSIM_OFFSET = S.EQUITY_SSIM_OFFSET,
    T.EQUITY_ITM_OFFSET = S.EQUITY_ITM_OFFSET,
    T.PKG_EQUITY_GROUP = S.PKG_EQUITY_GROUP,
    T.PKG_EQUITY_NBR = S.PKG_EQUITY_NBR,
    T.PKG_SORT_FIELD = S.PKG_SORT_FIELD,
    T.FLD_SORT_ORDER = S.FLD_SORT_ORDER,
    T.SELECTION_CRITERIA = S.SELECTION_CRITERIA,
    T.CURRENCY_CD = S.CURRENCY_CD,
    T.PKG_AWARD_PERIOD = S.PKG_AWARD_PERIOD,
    T.FED_WORK_MAX_AMT = S.FED_WORK_MAX_AMT,
    T.FED_WORK_MAX_EQTN = S.FED_WORK_MAX_EQTN,
    T.FED_WORK_MAX_PREF = S.FED_WORK_MAX_PREF,
    T.INST_WORK_MAX_AMT = S.INST_WORK_MAX_AMT,
    T.INST_WORK_MAX_EQTN = S.INST_WORK_MAX_EQTN,
    T.INST_WORK_MAX_PREF = S.INST_WORK_MAX_PREF,
    T.PELL_ONLY_PLAN = S.PELL_ONLY_PLAN,
    T.DATA_ORIGIN = 'S',
    T.LASTUPD_EW_DTTM = sysdate,
    T.BATCH_SID = 1234
where 
    T.EFF_STATUS <> S.EFF_STATUS or 
    T.PROCESSING_ORDER <> S.PROCESSING_ORDER or 
    T.DESCR <> S.DESCR or 
    T.DESCRSHORT <> S.DESCRSHORT or 
    T.FED_OR_INST <> S.FED_OR_INST or 
    T.FED_NEED_MAX_AMT <> S.FED_NEED_MAX_AMT or 
    T.FED_NEED_MAX_EQTN <> S.FED_NEED_MAX_EQTN or 
    T.FED_NEED_MAX_PREF <> S.FED_NEED_MAX_PREF or 
    T.FED_PCT_NEED_MEET <> S.FED_PCT_NEED_MEET or 
    T.FED_PCT_PREF_FLAG <> S.FED_PCT_PREF_FLAG or 
    T.INST_NEED_MAX_AMT <> S.INST_NEED_MAX_AMT or 
    T.INST_NEED_MAX_EQTN <> S.INST_NEED_MAX_EQTN or 
    T.INST_NEED_MAX_PREF <> S.INST_NEED_MAX_PREF or 
    T.INST_PCT_NEED_MEET <> S.INST_PCT_NEED_MEET or 
    T.INST_PCT_PREF_FLAG <> S.INST_PCT_PREF_FLAG or 
    T.FED_LOAN_MAX_AMT <> S.FED_LOAN_MAX_AMT or 
    T.FED_LOAN_MAX_EQTN <> S.FED_LOAN_MAX_EQTN or 
    T.FED_LOAN_MAX_PREF <> S.FED_LOAN_MAX_PREF or 
    T.INST_LOAN_MAX_AMT <> S.INST_LOAN_MAX_AMT or 
    T.INST_LOAN_MAX_EQTN <> S.INST_LOAN_MAX_EQTN or 
    T.INST_LOAN_MAX_PREF <> S.INST_LOAN_MAX_PREF or 
    T.FED_OVERAWARD_PREF <> S.FED_OVERAWARD_PREF or 
    T.FED_OVERAWARD_MAX <> S.FED_OVERAWARD_MAX or 
    T.FED_OVERAWARD_EQTN <> S.FED_OVERAWARD_EQTN or 
    T.FED_PKG_LIMIT_PREF <> S.FED_PKG_LIMIT_PREF or 
    T.FED_OVERRIDE_OBJ <> S.FED_OVERRIDE_OBJ or 
    T.INST_OVERAWARD_PRF <> S.INST_OVERAWARD_PRF or 
    T.INST_OVERAWARD_MAX <> S.INST_OVERAWARD_MAX or 
    T.INST_OVERAWRD_EQTN <> S.INST_OVERAWRD_EQTN or 
    T.INST_PKG_LIMIT_PRF <> S.INST_PKG_LIMIT_PRF or 
    T.INST_OVERRIDE_OBJ <> S.INST_OVERRIDE_OBJ or 
    T.EQUITY_LIMIT <> S.EQUITY_LIMIT or 
    T.EQUITY_LIMIT_EQTN <> S.EQUITY_LIMIT_EQTN or 
    T.EQUITY_MAX_PREF <> S.EQUITY_MAX_PREF or 
    T.EQUITY_PCFM_OFFSET <> S.EQUITY_PCFM_OFFSET or 
    T.EQUITY_PCIM_OFFSET <> S.EQUITY_PCIM_OFFSET or 
    T.EQUITY_SCFM_OFFSET <> S.EQUITY_SCFM_OFFSET or 
    T.EQUITY_SCIM_OFFSET <> S.EQUITY_SCIM_OFFSET or 
    T.EQUITY_SS_OFFSET <> S.EQUITY_SS_OFFSET or 
    T.EQUITY_SSIM_OFFSET <> S.EQUITY_SSIM_OFFSET or 
    T.EQUITY_ITM_OFFSET <> S.EQUITY_ITM_OFFSET or 
    T.PKG_EQUITY_GROUP <> S.PKG_EQUITY_GROUP or 
    T.PKG_EQUITY_NBR <> S.PKG_EQUITY_NBR or 
    T.PKG_SORT_FIELD <> S.PKG_SORT_FIELD or 
    T.FLD_SORT_ORDER <> S.FLD_SORT_ORDER or 
    T.SELECTION_CRITERIA <> S.SELECTION_CRITERIA or 
    T.CURRENCY_CD <> S.CURRENCY_CD or 
    T.PKG_AWARD_PERIOD <> S.PKG_AWARD_PERIOD or 
    T.FED_WORK_MAX_AMT <> S.FED_WORK_MAX_AMT or 
    T.FED_WORK_MAX_EQTN <> S.FED_WORK_MAX_EQTN or 
    T.FED_WORK_MAX_PREF <> S.FED_WORK_MAX_PREF or 
    T.INST_WORK_MAX_AMT <> S.INST_WORK_MAX_AMT or 
    T.INST_WORK_MAX_EQTN <> S.INST_WORK_MAX_EQTN or 
    T.INST_WORK_MAX_PREF <> S.INST_WORK_MAX_PREF or 
    T.PELL_ONLY_PLAN <> S.PELL_ONLY_PLAN or 
    T.DATA_ORIGIN = 'D' 
when not matched then 
insert (
    T.INSTITUTION,
    T.AID_YEAR, 
    T.ACAD_CAREER,
    T.PKG_PLAN_ID,
    T.EFFDT,
    T.SRC_SYS_ID, 
    T.EFF_STATUS, 
    T.PROCESSING_ORDER, 
    T.DESCR,
    T.DESCRSHORT, 
    T.FED_OR_INST,
    T.FED_NEED_MAX_AMT, 
    T.FED_NEED_MAX_EQTN,
    T.FED_NEED_MAX_PREF,
    T.FED_PCT_NEED_MEET,
    T.FED_PCT_PREF_FLAG,
    T.INST_NEED_MAX_AMT,
    T.INST_NEED_MAX_EQTN, 
    T.INST_NEED_MAX_PREF, 
    T.INST_PCT_NEED_MEET, 
    T.INST_PCT_PREF_FLAG, 
    T.FED_LOAN_MAX_AMT, 
    T.FED_LOAN_MAX_EQTN,
    T.FED_LOAN_MAX_PREF,
    T.INST_LOAN_MAX_AMT,
    T.INST_LOAN_MAX_EQTN, 
    T.INST_LOAN_MAX_PREF, 
    T.FED_OVERAWARD_PREF, 
    T.FED_OVERAWARD_MAX,
    T.FED_OVERAWARD_EQTN, 
    T.FED_PKG_LIMIT_PREF, 
    T.FED_OVERRIDE_OBJ, 
    T.INST_OVERAWARD_PRF, 
    T.INST_OVERAWARD_MAX, 
    T.INST_OVERAWRD_EQTN, 
    T.INST_PKG_LIMIT_PRF, 
    T.INST_OVERRIDE_OBJ,
    T.EQUITY_LIMIT, 
    T.EQUITY_LIMIT_EQTN,
    T.EQUITY_MAX_PREF,
    T.EQUITY_PCFM_OFFSET, 
    T.EQUITY_PCIM_OFFSET, 
    T.EQUITY_SCFM_OFFSET, 
    T.EQUITY_SCIM_OFFSET, 
    T.EQUITY_SS_OFFSET, 
    T.EQUITY_SSIM_OFFSET, 
    T.EQUITY_ITM_OFFSET,
    T.PKG_EQUITY_GROUP, 
    T.PKG_EQUITY_NBR, 
    T.PKG_SORT_FIELD, 
    T.FLD_SORT_ORDER, 
    T.SELECTION_CRITERIA, 
    T.CURRENCY_CD,
    T.PKG_AWARD_PERIOD, 
    T.FED_WORK_MAX_AMT, 
    T.FED_WORK_MAX_EQTN,
    T.FED_WORK_MAX_PREF,
    T.INST_WORK_MAX_AMT,
    T.INST_WORK_MAX_EQTN, 
    T.INST_WORK_MAX_PREF, 
    T.PELL_ONLY_PLAN, 
    T.LOAD_ERROR, 
    T.DATA_ORIGIN,
    T.CREATED_EW_DTTM,
    T.LASTUPD_EW_DTTM,
    T.BATCH_SID
    ) 
values (
    S.INSTITUTION,
    S.AID_YEAR, 
    S.ACAD_CAREER,
    S.PKG_PLAN_ID,
    S.EFFDT,
    'CS90', 
    S.EFF_STATUS, 
    S.PROCESSING_ORDER, 
    S.DESCR,
    S.DESCRSHORT, 
    S.FED_OR_INST,
    S.FED_NEED_MAX_AMT, 
    S.FED_NEED_MAX_EQTN,
    S.FED_NEED_MAX_PREF,
    S.FED_PCT_NEED_MEET,
    S.FED_PCT_PREF_FLAG,
    S.INST_NEED_MAX_AMT,
    S.INST_NEED_MAX_EQTN, 
    S.INST_NEED_MAX_PREF, 
    S.INST_PCT_NEED_MEET, 
    S.INST_PCT_PREF_FLAG, 
    S.FED_LOAN_MAX_AMT, 
    S.FED_LOAN_MAX_EQTN,
    S.FED_LOAN_MAX_PREF,
    S.INST_LOAN_MAX_AMT,
    S.INST_LOAN_MAX_EQTN, 
    S.INST_LOAN_MAX_PREF, 
    S.FED_OVERAWARD_PREF, 
    S.FED_OVERAWARD_MAX,
    S.FED_OVERAWARD_EQTN, 
    S.FED_PKG_LIMIT_PREF, 
    S.FED_OVERRIDE_OBJ, 
    S.INST_OVERAWARD_PRF, 
    S.INST_OVERAWARD_MAX, 
    S.INST_OVERAWRD_EQTN, 
    S.INST_PKG_LIMIT_PRF, 
    S.INST_OVERRIDE_OBJ,
    S.EQUITY_LIMIT, 
    S.EQUITY_LIMIT_EQTN,
    S.EQUITY_MAX_PREF,
    S.EQUITY_PCFM_OFFSET, 
    S.EQUITY_PCIM_OFFSET, 
    S.EQUITY_SCFM_OFFSET, 
    S.EQUITY_SCIM_OFFSET, 
    S.EQUITY_SS_OFFSET, 
    S.EQUITY_SSIM_OFFSET, 
    S.EQUITY_ITM_OFFSET,
    S.PKG_EQUITY_GROUP, 
    S.PKG_EQUITY_NBR, 
    S.PKG_SORT_FIELD, 
    S.FLD_SORT_ORDER, 
    S.SELECTION_CRITERIA, 
    S.CURRENCY_CD,
    S.PKG_AWARD_PERIOD, 
    S.FED_WORK_MAX_AMT, 
    S.FED_WORK_MAX_EQTN,
    S.FED_WORK_MAX_PREF,
    S.INST_WORK_MAX_AMT,
    S.INST_WORK_MAX_EQTN, 
    S.INST_WORK_MAX_PREF, 
    S.PELL_ONLY_PLAN, 
    'N',
    'S',
    sysdate,
    sysdate,
    1234)
;

   strSqlCommand := 'SET intRowCount';
   intRowCount := SQL%ROWCOUNT;

   strSqlCommand := 'commit';
   COMMIT;

   strMessage01 :=
         '# of PS_PKG_PLAN_TBL rows merged: '
      || TO_CHAR (intRowCount, '999,999,999,999');
   COMMON_OWNER.SMT_LOG.PUT_MESSAGE (i_Message => strMessage01);

   strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_DETAIL';
   COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_DETAIL (
      i_TargetTableName   => 'PS_PKG_PLAN_TBL',
      i_Action            => 'MERGE',
      i_RowCount          => intRowCount);


   strMessage01 := 'Updating CSSTG_OWNER.UM_STAGE_JOBS';
   COMMON_OWNER.SMT_LOG.PUT_MESSAGE (i_Message => strMessage01);

   strSqlCommand := 'update TABLE_STATUS on CSSTG_OWNER.UM_STAGE_JOBS';

   UPDATE CSSTG_OWNER.UM_STAGE_JOBS
      SET TABLE_STATUS = 'Deleting', OLD_MAX_SCN = NEW_MAX_SCN
    WHERE TABLE_NAME = 'PS_PKG_PLAN_TBL';

   strSqlCommand := 'commit';
   COMMIT;


   strMessage01 := 'Updating DATA_ORIGIN on CSSTG_OWNER.PS_PKG_PLAN_TBL';
   COMMON_OWNER.SMT_LOG.PUT_MESSAGE (i_Message => strMessage01);

   strSqlCommand := 'update DATA_ORIGIN on CSSTG_OWNER.PS_PKG_PLAN_TBL';
update CSSTG_OWNER.PS_PKG_PLAN_TBL T
        set T.DATA_ORIGIN = 'D',
               T.LASTUPD_EW_DTTM = SYSDATE
 where T.DATA_ORIGIN <> 'D'
   and exists 
(select 1 from
(select INSTITUTION, AID_YEAR, ACAD_CAREER, PKG_PLAN_ID, EFFDT
   from CSSTG_OWNER.PS_PKG_PLAN_TBL T2
  where (select DELETE_FLG from CSSTG_OWNER.UM_STAGE_JOBS where TABLE_NAME = 'PS_PKG_PLAN_TBL') = 'Y'
  minus
 select INSTITUTION, AID_YEAR, ACAD_CAREER, PKG_PLAN_ID, EFFDT
   from SYSADM.PS_PKG_PLAN_TBL@SASOURCE
  where (select DELETE_FLG from CSSTG_OWNER.UM_STAGE_JOBS where TABLE_NAME = 'PS_PKG_PLAN_TBL') = 'Y'
   ) S
 where T.INSTITUTION = S.INSTITUTION
   and T.AID_YEAR = S.AID_YEAR
   and T.ACAD_CAREER = S.ACAD_CAREER
   and T.PKG_PLAN_ID = S.PKG_PLAN_ID
   and T.EFFDT = S.EFFDT
   and T.SRC_SYS_ID = 'CS90' 
   ) 
;

   strSqlCommand := 'SET intRowCount';
   intRowCount := SQL%ROWCOUNT;

   strSqlCommand := 'commit';
   COMMIT;

   strMessage01 :=
         '# of PS_PKG_PLAN_TBL rows updated: '
      || TO_CHAR (intRowCount, '999,999,999,999');
   COMMON_OWNER.SMT_LOG.PUT_MESSAGE (i_Message => strMessage01);

   strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_DETAIL';
   COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_DETAIL (
      i_TargetTableName   => 'PS_PKG_PLAN_TBL',
      i_Action            => 'UPDATE',
      i_RowCount          => intRowCount);


   strMessage01 := 'Updating CSSTG_OWNER.UM_STAGE_JOBS';
   COMMON_OWNER.SMT_LOG.PUT_MESSAGE (i_Message => strMessage01);

   strSqlCommand := 'update END_DT on CSSTG_OWNER.UM_STAGE_JOBS';

   UPDATE CSSTG_OWNER.UM_STAGE_JOBS
      SET TABLE_STATUS = 'Complete', END_DT = SYSDATE
    WHERE TABLE_NAME = 'PS_PKG_PLAN_TBL';

   strSqlCommand := 'commit';
   COMMIT;


   strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_SUCCESS';
   COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_SUCCESS;

   strMessage01 := strProcessName || ' is complete.';
   COMMON_OWNER.SMT_LOG.PUT_MESSAGE (i_Message => strMessage01);
EXCEPTION
   WHEN OTHERS
   THEN
      COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_EXCEPTION (
         i_SqlCommand   => strSqlCommand,
         i_SqlCode      => SQLCODE,
         i_SqlErrm      => SQLERRM);
END PS_PKG_PLAN_TBL_P;
/
