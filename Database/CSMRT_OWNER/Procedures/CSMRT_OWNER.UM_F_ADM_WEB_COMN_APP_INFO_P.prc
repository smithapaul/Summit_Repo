CREATE OR REPLACE PROCEDURE             "UM_F_ADM_WEB_COMN_APP_INFO_P" AUTHID CURRENT_USER IS

------------------------------------------------------------------------
-- George Adams
--
-- Loads stage table UM_F_ADM_WEB_COMN_APP_INFO from PeopleSoft table UM_F_ADM_WEB_COMN_APP_INFO.
--
 --V01  SMT-xxxx 06/15/2018,        James Doucette
--                                  Converted from SQL Script
 --V01.1 Case: 28965 05/22/2020,    James Doucette
--                                  Fixed couln order of UM_ALUMNI_EVER_P2 and UM_PARENT2_TYPE
-- V02  CASE-52863 08/20/2020,      Jim Doucette
--                                  Added fields
-- V02  CASE-72761 11/17/2020,      Jim Doucette
--                                  Added UM_ENG_AS_SEC_LNG field
-- V03  CASE-72761 11/17/2020,      Jim Doucette
--                                  Added UM_CA_GENDER_IDENT field
------------------------------------------------------------------------

        strMartId                       Varchar2(50)    := 'CSW';
        strProcessName                  Varchar2(100)   := 'UM_F_ADM_WEB_COMN_APP_INFO';
        intProcessSid                   Integer;
        dtProcessStart                  Date            := SYSDATE;
        strMessage01                    Varchar2(4000);
        strMessage02                    Varchar2(512);
        strMessage03                    Varchar2(512)   :='';
        strNewLine                      Varchar2(2)     := chr(13) || chr(10);
        strSqlCommand                   Varchar2(32767) :='';
        strSqlDynamic                   Varchar2(32767) :='';
        strClientInfo                   Varchar2(100);
        intRowCount                     Integer;
        intTotalRowCount                Integer         := 0;
        numSqlCode                      Number;
        strSqlErrm                      Varchar2(4000);
        intTries                        Integer;

BEGIN

strSqlCommand := 'DBMS_APPLICATION_INFO.SET_CLIENT_INFO';
DBMS_APPLICATION_INFO.SET_CLIENT_INFO (strProcessName);

strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_INIT';
COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_INIT
        (
                i_MartId                => strMartId,
                i_ProcessName           => strProcessName,
                i_ProcessStartTime      => dtProcessStart,
                o_ProcessSid            => intProcessSid
        );

strMessage01    := 'Disabling Indexes for table CSMRT_OWNER.UM_F_ADM_WEB_COMN_APP_INFO';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);
COMMON_OWNER.SMT_INDEX.ALL_UNUSABLE('CSMRT_OWNER','UM_F_ADM_WEB_COMN_APP_INFO', TRUE);

strSqlDynamic   := 'alter table CSMRT_OWNER.UM_F_ADM_WEB_COMN_APP_INFO disable constraint PK_UM_F_ADM_WEB_COMN_APP_INFO';
strSqlCommand   := 'SMT_UTILITY.EXECUTE_IMMEDIATE: ' || strSqlDynamic;
COMMON_OWNER.SMT_UTILITY.EXECUTE_IMMEDIATE
                (
                i_SqlStatement          => strSqlDynamic,
                i_MaxTries              => 10,
                i_WaitSeconds           => 10,
                o_Tries                 => intTries
                );
				
strMessage01    := 'Truncating table CSMRT_OWNER.UM_F_ADM_WEB_COMN_APP_INFO';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlDynamic   := 'truncate table CSMRT_OWNER.UM_F_ADM_WEB_COMN_APP_INFO';
strSqlCommand   := 'SMT_UTILITY.EXECUTE_IMMEDIATE: ' || strSqlDynamic;
COMMON_OWNER.SMT_UTILITY.EXECUTE_IMMEDIATE
                (
                i_SqlStatement          => strSqlDynamic,
                i_MaxTries              => 10,
                i_WaitSeconds           => 10,
                o_Tries                 => intTries
                );

strMessage01    := 'Inserting data into CSMRT_OWNER.UM_F_ADM_WEB_COMN_APP_INFO';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand   := 'insert into CSMRT_OWNER.UM_F_ADM_WEB_COMN_APP_INFO';				
insert /*+ append */ into CSMRT_OWNER.UM_F_ADM_WEB_COMN_APP_INFO
  with X as (  
select FIELDNAME, FIELDVALUE, EFFDT, SRC_SYS_ID, 
       XLATLONGNAME, XLATSHORTNAME, DATA_ORIGIN, 
       row_number() over (partition by FIELDNAME, FIELDVALUE, SRC_SYS_ID
                              order by DATA_ORIGIN desc, (case when EFFDT > trunc(SYSDATE) then to_date('01-JAN-1900') else EFFDT end) desc) X_ORDER
  from CSSTG_OWNER.PSXLATITEM
 where DATA_ORIGIN <> 'D'),
     W_APP AS (
	   SELECT /*+ PARALLEL(8) INLINE */ 
       T.UM_ADM_REC_NBR, 
       T.EMPLID, 
       T.ADM_APPL_NBR, 
       T.INSTITUTION, 
       T.ACAD_CAREER, 
       T.SRC_SYS_ID, 
       ALUMNI_EVER, 
     nvl(X1.XLATLONGNAME,'-') HIGHEST_EDUC_LVL,
       UM_ADM_CURR_EMP, 
       UM_ADM_CURR_JOB,
       UM_ALUMNI_EVER_GUA, UM_ALUMNI_EVER_P2,       
       UM_GUARD_ADDR1, UM_GUARD_ADDR2, UM_GUARD_ADDR3, UM_GUARD_CEEB, UM_GUARD_CEEB_G, UM_GUARD_CITY, UM_GUARD_CNTRY_CD, UM_GUARD_COLLEGE, UM_GUARD_COUNTRY, UM_GUARD_DEGREE, UM_GUARD_DEGREE_G, UM_GUARD_EMAIL, UM_GUARD_EMPLOYER, UM_GUARD_EMP_COLL, UM_GUARD_GRADSCHL, UM_GUARD_INT_ZIP, UM_GUARD_JOBTITLE, UM_GUARD_NAME, UM_GUARD_OCCUPTN, UM_GUARD_PHONE, UM_GUARD_PHONE1, UM_GUARD_PHONE2, UM_GUARD_PHONE3, UM_GUARD_POSTAL, UM_GUARD_STATE,
     nvl(X2.XLATLONGNAME,'-') UM_HIGH_EDUCLVL_GU, 
     nvl(X3.XLATLONGNAME,'-') UM_HIGH_EDUCLVL_P2, 
       UM_HIGH_S_OR_GED, 
       UM_COUNSELOR_EMAIL, UM_COUNSELOR_FNAME, UM_COUNSELOR_LNAME, UM_COUNSELOR_PHONE,  -- Sep 2017  
       UM_HS_ID, UM_HS_NAME,    -- Sep 2017 
       UM_PARENT2_ADDR1, UM_PARENT2_ADDR2, UM_PARENT2_ADDR3, UM_PARENT2_CEEB, UM_PARENT2_CEEB_G, UM_PARENT2_CITY, UM_PARENT2_COLLEGE, UM_PARENT2_COUNTRY, UM_PARENT2_DEGREE, UM_PARENT2_DEGRE_G, UM_PARENT2_EMAIL, UM_PARENT2_EMPCOLL, UM_PARENT2_EMPLOYR, UM_PARENT2_GRADSCH, UM_PARENT2_INT_ZIP, UM_PARENT2_JOBTITL, UM_PARENT2_LIVING, UM_PARENT2_NAME, UM_PARENT2_OCCUPTN, UM_PARENT2_PHONE, UM_PARENT2_PHONE1, UM_PARENT2_PHONE2, UM_PARENT2_PHONE3, UM_PARENT2_POSTAL, UM_PARENT2_STATE, UM_PARENT2_TYPE, UM_PARENT_ADDR1, UM_PARENT_ADDR2, UM_PARENT_ADDR3, UM_PARENT_CEEB, UM_PARENT_CEEB_G, UM_PARENT_CITY, UM_PARENT_CNTRY_C2, UM_PARENT_CNTRY_CD, UM_PARENT_COLLEGE, UM_PARENT_COUNTRY, UM_PARENT_DEGREE, UM_PARENT_DEGREE_G, UM_PARENT_EMAIL, UM_PARENT_EMPLOYER, UM_PARENT_EMP_COLL, UM_PARENT_GRADSCHL, UM_PARENT_INT_ZIP, UM_PARENT_JOBTITLE, UM_PARENT_LIVING, UM_PARENT_NAME, UM_PARENT_OCCUPTN, UM_PARENT_PHONE, UM_PARENT_PHONE1, UM_PARENT_PHONE2, UM_PARENT_PHONE3, UM_PARENT_POSTAL, UM_PARENT_STATE, UM_PARENT_TYPE,
       T.UM_ADM_HEAR_US_CD,             -- Feb 2018
       nvl(H.DESCR,'-') UM_ADM_HEAR_US_DESC,     -- Feb 2018 
       T.UM_ADM_HEAR_TEXT,             -- May 2018
	   T.UM_ENG_AS_SEC_LNG,            -- Nov. 2020
       ROW_NUMBER () OVER (PARTITION BY T.INSTITUTION, T.EMPLID, T.ADM_APPL_NBR ORDER BY T.UM_ADM_SUB_DT DESC) SUBMIT_DT_ORDER
         FROM CSSTG_OWNER.PS_UM_ADM_APP_TMP T
       left outer join CSSTG_OWNER.PS_UM_ADM_HEAR_TBL H
         on T.INSTITUTION = H.INSTITUTION
        and T.ACAD_CAREER = H.ACAD_CAREER
        and T.ADM_APPL_CTR = H.ADM_APPL_CTR
        and T.UM_ADM_HEAR_US_CD = H.UM_ADM_HEAR_US_CD
        and T.SRC_SYS_ID = H.SRC_SYS_ID
  left outer join X X1
    on T.HIGHEST_EDUC_LVL = X1.FIELDVALUE
   and T.SRC_SYS_ID = X1.SRC_SYS_ID
   and X1.FIELDNAME = 'HIGHEST_EDUC_LVL'
   and X1.X_ORDER = 1
  left outer join X X2
    on T.UM_HIGH_EDUCLVL_GU = X2.FIELDVALUE
   and T.SRC_SYS_ID = X2.SRC_SYS_ID
   and X2.FIELDNAME = 'HIGHEST_EDUC_LVL'
   and X2.X_ORDER = 1
  left outer join X X3
    on T.UM_HIGH_EDUCLVL_P2 = X3.FIELDVALUE
   and T.SRC_SYS_ID = X3.SRC_SYS_ID
   and X3.FIELDNAME = 'HIGHEST_EDUC_LVL'
   and X3.X_ORDER = 1
 WHERE T.DATA_ORIGIN <> 'D' 
   AND T.UM_ADM_SESSION >= '2510' 
   AND T.ADM_APPL_NBR <> '-' 
),
C_APP as (
select /*+ PARALLEL(8) INLINE */
       UM_ADM_USERID, INSTITUTION, UM_ADM_REC_NBR, SRC_SYS_ID, 
       UM_PARENT_FNAME, UM_PARENT_MNAME, UM_PARENT_LNAME, UM_PARENT_TYPE, UM_PARENT_LIVING, 
       UM_PARNT1_DEAD_DT, UM_PARNT1_EMP_STAT, UM_PARNT1_EMP_BY_C, UM_PARNT1_BIRTH_C, UM_PARNT1_SAME_ADR, 
       UM_PARENT_ADDR1, UM_PARENT_ADDR2, UM_PARENT_ADDR3, UM_PARENT_CITY, UM_PARENT_STATE, UM_PARENT_COUNTRY, UM_PARENT_POSTAL, 
       UM_PARENT_PHONE, UM_PARENT_EMAIL, UM_PARENT_OCCUPTN, UM_PARENT_JOBTITLE, UM_PARENT_EMPLOYER, UM_PARNT1_COLL_NBR, UM_PARNT_COLLEGE, UM_PARENT_CEEB, 
       UM_PARENT_DEG_1A, UM_PARENT_DEG_1B, UM_PARENT_DEG_1C, UM_PARENT_DEG_1D, UM_PARENT_DEG_1E, 
       UM_PARNT_DEG_YR_1A, UM_PARNT_DEG_YR_1B, UM_PARNT_DEG_YR_1C, UM_PARNT_DEG_YR_1D, UM_PARNT_DEG_YR_1E, 
       UM_PARNT_GRADSCHL, UM_PARENT_CEEB_G, UM_PARENT_DEG_2A, UM_PARENT_DEG_2B, UM_PARENT_DEG_2C, UM_PARENT_DEG_2D, UM_PARENT_DEG_2E, 
       UM_PARNT_DEG_YR_2A, UM_PARNT_DEG_YR_2B, UM_PARNT_DEG_YR_2C, UM_PARNT_DEG_YR_2D, UM_PARNT_DEG_YR_2E, 
       UM_PARNT1_COLLEGE3, UM_PARNT1_COL3_CEB, UM_PARNT1_DEGR_3A, UM_PARNT1_DEGR_3B, UM_PARNT1_DEGR_3C, UM_PARNT1_DEGR_3D, UM_PARNT1_DEGR_3E, 
       UM_PARNT1_DG_3A_YR, UM_PARNT1_DG_3B_YR, UM_PARNT1_DG_3C_YR, UM_PARNT1_DG_3D_YR, UM_PARNT1_DG_3E_YR, 
       UM_PARNT1_COLLEGE4, UM_PARNT1_COL4_CEB, UM_PARNT1_DEGR_4A, UM_PARNT1_DEGR_4B, UM_PARNT1_DEGR_4C, UM_PARNT1_DEGR_4D, UM_PARNT1_DEGR_4E, 
       UM_PARNT1_DG_4A_YR, UM_PARNT1_DG_4B_YR, UM_PARNT1_DG_4C_YR, UM_PARNT1_DG_4D_YR, UM_PARNT1_DG_4E_YR, 
       UM_PARNT1_COLLEGE5, UM_PARNT1_COL5_CEB, UM_PARNT1_DEGR_5A, UM_PARNT1_DEGR_5B, UM_PARNT1_DEGR_5C, UM_PARNT1_DEGR_5D, UM_PARNT1_DEGR_5E, 
       UM_PARNT1_DG_5A_YR, UM_PARNT1_DG_5B_YR, UM_PARNT1_DG_5C_YR, UM_PARNT1_DG_5D_YR, UM_PARNT1_DG_5E_YR, 
       UM_PARENT_HIGH_EDU, UM_PARENT2_FNAME, UM_PARENT2_MNAME, UM_PARENT2_LNAME, UM_PARENT2_TYPE, 
       UM_PARENT2_LIVING, UM_PARNT2_DEAD_DT, UM_PARNT2_EMP_STAT, UM_PARNT2_EMP_BY_C, UM_PARNT2_BIRTH_C, 
       UM_PARNT2_SAME_ADR, UM_PARENT2_ADDR1, UM_PARENT2_ADDR2, UM_PARENT2_ADDR3, UM_PARENT2_CITY, UM_PARENT2_STATE, UM_PARENT2_COUNTRY, UM_PARENT2_POSTAL, 
       UM_PARENT2_PHONE, UM_PARENT2_EMAIL, UM_PARENT2_OCCUPTN, UM_PARENT2_JOBTITL, UM_PARENT2_EMPLOYR, 
       UM_PARNT2_COLL_NBR, UM_PARNT2_COLLEGE, UM_PARENT2_CEEB, UM_PARENT2_DEG_1A, UM_PARENT2_DEG_1B, UM_PARENT2_DEG_1C, UM_PARENT2_DEG_1D, UM_PARENT2_DEG_1E, 
       UM_PARNT2_DG_YR_1A, UM_PARNT2_DG_YR_1B, UM_PARNT2_DG_YR_1C, UM_PARNT2_DG_YR_1D, UM_PARNT2_DG_YR_1E, 
       UM_PARNT2_GRADSCH, UM_PARENT2_CEEB_G, UM_PARENT2_DEG_2A, UM_PARENT2_DEG_2B, UM_PARENT2_DEG_2C, UM_PARENT2_DEG_2D, UM_PARENT2_DEG_2E, 
       UM_PARNT2_DG_YR_2A, UM_PARNT2_DG_YR_2B, UM_PARNT2_DG_YR_2C, UM_PARNT2_DG_YR_2D, UM_PARNT2_DG_YR_2E, 
       UM_PARNT2_COLLEGE3, UM_PARNT2_COL3_CEB, UM_PARNT2_DEGR_3A, UM_PARNT2_DEGR_3B, UM_PARNT2_DEGR_3C, UM_PARNT2_DEGR_3D, UM_PARNT2_DEGR_3E, 
       UM_PARNT2_DG_3A_YR, UM_PARNT2_DG_3B_YR, UM_PARNT2_DG_3C_YR, UM_PARNT2_DG_3D_YR, UM_PARNT2_DG_3E_YR, 
       UM_PARNT2_COLLEGE4, UM_PARNT2_COL4_CEB, UM_PARNT2_DEGR_4A, UM_PARNT2_DEGR_4B, UM_PARNT2_DEGR_4C, UM_PARNT2_DEGR_4D, UM_PARNT2_DEGR_4E, 
       UM_PARNT2_DG_4A_YR, UM_PARNT2_DG_4B_YR, UM_PARNT2_DG_4C_YR, UM_PARNT2_DG_4D_YR, UM_PARNT2_DG_4E_YR, 
       UM_PARNT2_COLLEGE5, UM_PARNT2_COL5_CEB, UM_PARNT2_DEGR_5A, UM_PARNT2_DEGR_5B, UM_PARNT2_DEGR_5C, UM_PARNT2_DEGR_5D, UM_PARNT2_DEGR_5E, 
       UM_PARNT2_DG_5A_YR, UM_PARNT2_DG_5B_YR, UM_PARNT2_DG_5C_YR, UM_PARNT2_DG_5D_YR, UM_PARNT2_DG_5E_YR, 
       UM_PARNT2_HIGH_EDU, UM_GUARD_FNAME, UM_GUARD_MNAME, UM_GUARD_LNAME, 
       UM_GUARD_SAME_ADR, UM_GUARD_ADDR1, UM_GUARD_ADDR2, UM_GUARD_ADDR3, UM_GUARD_CITY, UM_GUARD_STATE, UM_GUARD_COUNTRY, UM_GUARD_POSTAL, 
       UM_GUARD_PHONE, UM_GUARD_EMAIL, UM_GUARD_OCCUPTN, UM_GUARD_JOBTITLE, UM_GUARD_EMPLOYER, UM_GUARD_RELATION, UM_GUARD_EMP_STAT, 
       UM_GUARD_EMP_B_COL, UM_GUARD_EDU_LVL, UM_GUARD_COL_NBR, UM_GARD_COLLEGE, UM_GUARD_CEEB, UM_GUARD_DEG_1A, UM_GUARD_DEG_1B, UM_GUARD_DEG_1C, UM_GUARD_DEG_1D, UM_GUARD_DEG_1E, 
       UM_GUARD_DEG_YR_1A, UM_GUARD_DEG_YR_1B, UM_GUARD_DEG_YR_1C, UM_GUARD_DEG_YR_1D, UM_GUARD_DEG_YR_1E, 
       UM_GARD_GRADSCHL, UM_GUARD_CEEB_G, UM_GUARD_DEG_2A, UM_GUARD_DEG_2B, UM_GUARD_DEG_2C, UM_GUARD_DEG_2D, UM_GUARD_DEG_2E, 
       UM_GUARD_DEG_YR_2A, UM_GUARD_DEG_YR_2B, UM_GUARD_DEG_YR_2C, UM_GUARD_DEG_YR_2D, UM_GUARD_DEG_YR_2E, 
       UM_GUARD_COLLEGE3, UM_GUARD_COL3_CEB, UM_GUARD_DEGR_3A, UM_GUARD_DEGR_3B, UM_GUARD_DEGR_3C, UM_GUARD_DEGR_3D, UM_GUARD_DEGR_3E, 
       UM_GUARD_DG_3A_YR, UM_GUARD_DG_3B_YR, UM_GUARD_DG_3C_YR, UM_GUARD_DG_3D_YR, UM_GUARD_DG_3E_YR, 
       UM_GUARD_COLLEGE4, UM_GUARD_COL4_CEB, UM_GUARD_DEGR_4A, UM_GUARD_DEGR_4B, UM_GUARD_DEGR_4C, UM_GUARD_DEGR_4D, UM_GUARD_DEGR_4E, 
       UM_GUARD_DG_4A_YR, UM_GUARD_DG_4B_YR, UM_GUARD_DG_4C_YR, UM_GUARD_DG_4D_YR, UM_GUARD_DG_4E_YR, 
       UM_GUARD_COLLEGE5, UM_GUARD_COL5_CEB, UM_GUARD_DEGR_5A, UM_GUARD_DEGR_5B, UM_GUARD_DEGR_5C, UM_GUARD_DEGR_5D, UM_GUARD_DEGR_5E, 
       UM_GUARD_DG_5A_YR, UM_GUARD_DG_5B_YR, UM_GUARD_DG_5C_YR, UM_GUARD_DG_5D_YR, UM_GUARD_DG_5E_YR, 
       UM_RELGION_PREF, UM_OTHER_RELGION, UM_LIVED_US_YRS, UM_LIVED_OUT_US_YR, 
       UM_NUMBER_OF_LANG, UM_OTH_LANG1, UM_OTH_LANG2, UM_OTH_LANG3, UM_OTH_LANG4, UM_OTH_LANG5, 
       UM_LANG1_PROF, UM_LANG2_PROF, UM_LANG3_PROF, UM_LANG4_PROF, UM_LANG5_PROF, 
       UM_LANG1, UM_LANG2, UM_LANG3, UM_LANG4, UM_LANG5, PROCESS_INSTANCE, DATETIME_CREATED,
       row_number() over (partition by INSTITUTION, UM_ADM_REC_NBR, SRC_SYS_ID
                              order by DATETIME_CREATED desc) C_APP_ORDER
  from CSSTG_OWNER.PS_UM_COM_PRNT_RPT  
 where DATA_ORIGIN <> 'D' 
),
B_APP as (
select /*+ PARALLEL(8) INLINE */ 
       UM_ADM_USERID, INSTITUTION, UM_ADM_REC_NBR, SRC_SYS_ID, 
       UM_CA_CONTCT_CNSNT, 
       UM_CA_PHON_NBR, 
       UM_CA_SELF_RPT_GPA,     -- Nov 2019  
       UM_CA_GPA_SCALE,        -- Nov 2019 
       UM_CA_GPA_WEIGHT,       -- Nov 2019 
	   UM_CA_COVID19,          -- Aug 2020
	   UM_CA_GENDER_IDENT,     -- Jan 2021 
       row_number() over (partition by INSTITUTION, UM_ADM_REC_NBR, SRC_SYS_ID order by decode(UM_ADM_USERID,'-','A1',UM_ADM_USERID) desc ) UMBOS_ORDER 
  from CSSTG_OWNER.PS_UM_CA_UMBOS
 where DATA_ORIGIN <> 'D'
),
D_APP as (                     -- Aug 2020
select /*+ PARALLEL(8) INLINE */ 
       UM_ADM_USERID, INSTITUTION, UM_ADM_REC_NBR, SRC_SYS_ID,
	   UM_CA_SELF_RPT_GPA,
	   UM_CA_GPA_SCALE,
	   UM_CA_GPA_WEIGHT,
	   UM_CA_COVID19,
       UM_CA_GENDER_IDENT,     -- Jan 2021 	   
       row_number() over (partition by INSTITUTION, UM_ADM_REC_NBR, SRC_SYS_ID order by decode(UM_ADM_USERID,'-','A1',UM_ADM_USERID) desc ) UMDAR_ORDER 
  from CSSTG_OWNER.PS_UM_CA_UMDAR
 where DATA_ORIGIN <> 'D'
),
L_APP as (
select /*+ PARALLEL(8) INLINE */ 
       UM_ADM_USERID, INSTITUTION, UM_ADM_REC_NBR, SRC_SYS_ID, 
       UM_CA_CONTCT_CNSNT, 
       UM_CA_PHON_NBR, 
       UM_CA_SELF_RPT_GPA,     -- Nov 2019  
       UM_CA_GPA_SCALE,        -- Nov 2019 
       UM_CA_GPA_WEIGHT,       -- Nov 2019 
	   UM_CA_UMLOW_F_GEN,      -- Aug 2020 
       UM_CA_REL_EMP_MBR,      -- Aug 2020 TEMP	 
       REGEXP_SUBSTR(UM_NON_STEM,'[^/]+',1,1) UM_ACAD_PROG_CD,   -- Aug 2020
       REGEXP_SUBSTR(UM_NON_STEM,'[^/]+',1,2) UM_ACAD_PLAN_CD,   -- Aug 2020
       REGEXP_SUBSTR(UM_NON_STEM,'[^/]+',1,3) UM_ACAD_SPLAN_CD,   -- Aug 2020  
       UM_CA_COVID19,          -- Aug 2020
       UM_CA_GENDER_IDENT,     -- Jan 2021 	   
       row_number() over (partition by INSTITUTION, UM_ADM_REC_NBR, SRC_SYS_ID order by decode(UM_ADM_USERID,'-','A1',UM_ADM_USERID) desc ) UMLOW_ORDER 
  from CSSTG_OWNER.PS_UM_CA_UMLOW
 where DATA_ORIGIN <> 'D'
),
ADM as (
select /*+ PARALLEL(8) INLINE */ 
       EXT_ORG_ID,
       EFFDT,
       SRC_SYS_ID,
       EFF_STATUS,
       ATP_CD,
       row_number() over (partition by ATP_CD, SRC_SYS_ID 
                              order by EFFDT desc, EFF_STATUS, EXT_ORG_ID) ATP_ORDER 
  from CSSTG_OWNER.PS_EXT_ORG_TBL_ADM
 where DATA_ORIGIN <> 'D' 
),
ORG as (
select /*+ PARALLEL(8) INLINE */ 
       EXT_ORG_ID,
       EFFDT,
       SRC_SYS_ID,
       EFF_STATUS,
       DESCR,
       row_number() over (partition by EXT_ORG_ID, SRC_SYS_ID 
                              order by EFFDT desc) ORG_ORDER 
  from CSSTG_OWNER.PS_EXT_ORG_TBL
 where DATA_ORIGIN <> 'D' 
),
ATP as (
select /*+ PARALLEL(8) INLINE */
       ADM.ATP_CD,
       ORG.DESCR
  from ADM
  join ORG
    on ADM.EXT_ORG_ID = ORG.EXT_ORG_ID
   and ADM.EFFDT = ORG.EFFDT
   and ADM.SRC_SYS_ID = ORG.SRC_SYS_ID
   and ADM.ATP_ORDER = 1
   and ORG.ORG_ORDER = 1
)
SELECT /*+ PARALLEL(8) INLINE */
       W_APP.UM_ADM_REC_NBR,
       W_APP.EMPLID PERSON_ID,
       W_APP.ADM_APPL_NBR,
       W_APP.INSTITUTION INSTITUTION_CD,
       W_APP.ACAD_CAREER ACAD_CAR_CD,
       W_APP.SRC_SYS_ID,
       nvl(P.PERSON_SID,2147483646) PERSON_SID,  
       nvl(I.INSTITUTION_SID,2147483646) INSTITUTION_SID,  
       nvl(C.ACAD_CAR_SID,2147483646) ACAD_CAR_SID,  
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_PARENT_NAME)
          ELSE (C_APP.UM_PARENT_FNAME || ' ' || C_APP.UM_PARENT_LNAME)
       END
          UM_PARENT_NAME,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_PARENT_ADDR1)
          ELSE (C_APP.UM_PARENT_ADDR1)
       END
          UM_PARENT_ADDR1,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_PARENT_ADDR2)
          ELSE (C_APP.UM_PARENT_ADDR2)
       END
          UM_PARENT_ADDR2,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_PARENT_ADDR3)
          ELSE (C_APP.UM_PARENT_ADDR3)
       END
          UM_PARENT_ADDR3,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_PARENT_CITY)
          ELSE (C_APP.UM_PARENT_CITY)
       END
          UM_PARENT_CITY,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_PARENT_STATE)
          ELSE (C_APP.UM_PARENT_STATE)
       END
          UM_PARENT_STATE,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_PARENT_COUNTRY)
          ELSE (C_APP.UM_PARENT_COUNTRY)
       END
          UM_PARENT_COUNTRY,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_PARENT_PHONE)
          ELSE (C_APP.UM_PARENT_PHONE)
       END
          UM_PARENT_PHONE,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_PARENT_TYPE)
          ELSE (C_APP.UM_PARENT_TYPE)
       END
          UM_PARENT_TYPE,
       W_APP.ALUMNI_EVER,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.HIGHEST_EDUC_LVL)
          ELSE (C_APP.UM_PARENT_HIGH_EDU)
       END
          UM_PARENT_HIGH_EDU,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_PARENT2_NAME)
          ELSE (C_APP.UM_PARENT2_FNAME || ' ' || C_APP.UM_PARENT2_LNAME)
       END
          UM_PARENT2_NAME,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_PARENT2_ADDR1)
          ELSE (C_APP.UM_PARENT2_ADDR1)
       END
          UM_PARENT2_ADDR1,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_PARENT2_ADDR2)
          ELSE (C_APP.UM_PARENT2_ADDR2)
       END
          UM_PARENT2_ADDR2,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_PARENT2_ADDR3)
          ELSE (C_APP.UM_PARENT2_ADDR3)
       END
          UM_PARENT2_ADDR3,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_PARENT2_CITY)
          ELSE (C_APP.UM_PARENT2_CITY)
       END
          UM_PARENT2_CITY,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_PARENT2_STATE)
          ELSE (C_APP.UM_PARENT2_STATE)
       END
          UM_PARENT2_STATE,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_PARENT2_POSTAL)
          ELSE (C_APP.UM_PARENT2_POSTAL)
       END
          UM_PARENT2_POSTAL,
       W_APP.UM_PARENT2_INT_ZIP,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_PARENT2_COUNTRY)
          ELSE (C_APP.UM_PARENT2_COUNTRY)
       END
          UM_PARENT2_COUNTRY,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_PARENT2_PHONE)
          ELSE (C_APP.UM_PARENT2_PHONE)
       END
          UM_PARENT2_PHONE,
       W_APP.UM_ALUMNI_EVER_P2,		  
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_PARENT2_TYPE)
          ELSE (C_APP.UM_PARENT2_TYPE)
       END
          UM_PARENT2_TYPE,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_HIGH_EDUCLVL_P2)
          ELSE (C_APP.UM_PARNT2_HIGH_EDU)
       END
          UM_HIGH_EDUCLVL_P2,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_GUARD_NAME)
          ELSE (C_APP.UM_GUARD_FNAME || ' ' || C_APP.UM_GUARD_LNAME)
       END
          UM_GUARD_NAME,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_GUARD_ADDR1)
          ELSE (C_APP.UM_GUARD_ADDR1)
       END
          UM_GUARD_ADDR1,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_GUARD_ADDR2)
          ELSE (C_APP.UM_GUARD_ADDR2)
       END
          UM_GUARD_ADDR2,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_GUARD_ADDR3)
          ELSE (C_APP.UM_GUARD_ADDR3)
       END
          UM_GUARD_ADDR3,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_GUARD_CITY)
          ELSE (C_APP.UM_GUARD_CITY)
       END
          UM_GUARD_CITY,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_GUARD_STATE)
          ELSE (C_APP.UM_GUARD_STATE)
       END
          UM_GUARD_STATE,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_GUARD_POSTAL)
          ELSE (C_APP.UM_GUARD_POSTAL)
       END
          UM_GUARD_POSTAL,
       W_APP.UM_GUARD_INT_ZIP,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_GUARD_COUNTRY)
          ELSE (C_APP.UM_GUARD_COUNTRY)
       END
          UM_GUARD_COUNTRY,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_GUARD_PHONE)
          ELSE (C_APP.UM_GUARD_PHONE)
       END
          UM_GUARD_PHONE,
       W_APP.UM_ALUMNI_EVER_GUA,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_HIGH_EDUCLVL_GU)
          ELSE (C_APP.UM_GUARD_EDU_LVL)
       END
          UM_HIGH_EDUCLVL_GU,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_PARENT_EMP_COLL)
          ELSE (C_APP.UM_PARNT1_EMP_BY_C)
       END
          UM_PARENT_EMP_COLL,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_PARENT_LIVING)
          ELSE (C_APP.UM_PARENT_LIVING)
       END
          UM_PARENT_LIVING,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_PARENT_POSTAL)
          ELSE (C_APP.UM_PARENT_POSTAL)
       END
          UM_PARENT_POSTAL,
       W_APP.UM_PARENT_INT_ZIP,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_PARENT_JOBTITLE)
          ELSE (C_APP.UM_PARENT_JOBTITLE)
       END
          UM_PARENT_JOBTITLE,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_PARENT_EMPLOYER)
          ELSE (C_APP.UM_PARENT_EMPLOYER)
       END
          UM_PARENT_EMPLOYER,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_PARENT_OCCUPTN)
          ELSE (C_APP.UM_PARENT_OCCUPTN)
       END
          UM_PARENT_OCCUPTN,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_PARENT_EMAIL)
          ELSE (C_APP.UM_PARENT_EMAIL)
       END
          UM_PARENT_EMAIL,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_GUARD_EMAIL)
          ELSE (C_APP.UM_GUARD_EMAIL)
       END
          UM_GUARD_EMAIL,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_GUARD_EMPLOYER)
          ELSE (C_APP.UM_GUARD_EMPLOYER)
       END
          UM_GUARD_EMPLOYER,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_GUARD_EMP_COLL)
          ELSE (C_APP.UM_GUARD_EMP_B_COL)
       END
          UM_GUARD_EMP_COLL,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_GUARD_OCCUPTN)
          ELSE (C_APP.UM_GUARD_OCCUPTN)
       END
          UM_GUARD_OCCUPTN,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_GUARD_JOBTITLE)
          ELSE (C_APP.UM_GUARD_JOBTITLE)
       END
          UM_GUARD_JOBTITLE,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_GUARD_DEGREE)
          ELSE (C_APP.UM_GUARD_DEG_1A)
       END
          UM_GUARD_DEGREE,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_GUARD_DEGREE_G)
          ELSE (C_APP.UM_GUARD_DEG_2A)
       END
          UM_GUARD_DEGREE_G,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_PARENT2_DEGREE)
          ELSE (C_APP.UM_PARENT2_DEG_1A)
       END
          UM_PARENT2_DEGREE,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_PARENT_DEGREE)
          ELSE (C_APP.UM_PARENT_DEG_1A)
       END
          UM_PARENT_DEGREE,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_PARENT_DEGREE_G)
          ELSE (C_APP.UM_PARENT_DEG_2A)
       END
          UM_PARENT_DEGREE_G,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_PARENT_CEEB_G)
          ELSE (C_APP.UM_PARENT_CEEB_G)
       END
          UM_PARENT_CEEB_G,
       case when nvl(C_APP.UM_PARNT_GRADSCHL,'-') = '-' then nvl(ATP3.DESCR,'-') else C_APP.UM_PARNT_GRADSCHL end UM_PARENT_CEEB_G_NM,  
--       W_APP.UM_GUARD_CEEB,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_GUARD_CEEB)
          ELSE (C_APP.UM_GUARD_CEEB)
       END
          UM_GUARD_CEEB,
--       nvl(ATP1.DESCR,'-') GUARD_COLLEGE_1_NM,  
       case when nvl(W_APP.UM_GUARD_COLLEGE,'-') = '-' then nvl(ATP1.DESCR,'-') else W_APP.UM_GUARD_COLLEGE end GUARD_COLLEGE_1_NM,  
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_PARENT2_EMAIL)
          ELSE (C_APP.UM_PARENT2_EMAIL)
       END
          UM_PARENT2_EMAIL,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_PARENT2_EMPCOLL)
          ELSE (C_APP.UM_PARNT2_EMP_BY_C)
       END
          UM_PARENT2_EMPCOLL,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_PARENT2_EMPLOYR)
          ELSE (C_APP.UM_PARENT2_EMPLOYR)
       END
          UM_PARENT2_EMPLOYR,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_PARENT2_JOBTITL)
          ELSE (C_APP.UM_PARENT2_JOBTITL)
       END
          UM_PARENT2_JOBTITL,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_PARENT2_OCCUPTN)
          ELSE (C_APP.UM_PARENT2_OCCUPTN)
       END
          UM_PARENT2_OCCUPTN,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_PARENT2_LIVING)
          ELSE (C_APP.UM_PARENT2_LIVING)
       END
          UM_PARENT2_LIVING,
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_GUARD_CEEB_G)
          ELSE (C_APP.UM_GUARD_CEEB_G)
       END
          UM_GUARD_CEEB_G,
       case when nvl(W_APP.UM_GUARD_GRADSCHL,'-') = '-' then nvl(ATP2.DESCR,'-') else W_APP.UM_GUARD_GRADSCHL end GUARD_COLLEGE_2_NM,  
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_PARENT2_CEEB)
          ELSE (C_APP.UM_PARENT2_CEEB)
       END
          UM_PARENT2_CEEB,
--       nvl(ATP4.DESCR,'-') UM_PARENT2_CEEB_NM,  
       case when nvl(W_APP.UM_PARENT2_COLLEGE,'-') = '-' then nvl(ATP4.DESCR,'-') else W_APP.UM_PARENT2_COLLEGE end UM_PARENT2_CEEB_NM,  
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_PARENT2_CEEB_G)
          ELSE (C_APP.UM_PARENT2_CEEB_G)
       END
          UM_PARENT2_CEEB_G,
       case when nvl(W_APP.UM_PARENT2_GRADSCH,'-') = '-' then nvl(ATP5.DESCR,'-') else W_APP.UM_PARENT2_GRADSCH end UM_PARENT2_GRADSCH,  
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_PARENT_CEEB)
          ELSE (C_APP.UM_PARENT_CEEB)
       END
          UM_PARENT_CEEB,
--       nvl(ATP6.DESCR,'-') UM_PARENT_CEEB_NM,  
       case when nvl(W_APP.UM_PARENT_COLLEGE,'-') = '-' then nvl(ATP6.DESCR,'-') else W_APP.UM_PARENT_COLLEGE end UM_PARENT_CEEB_NM,  
       CASE
          WHEN (C_APP.UM_ADM_REC_NBR IS NULL) THEN (W_APP.UM_PARENT2_DEGRE_G)
          ELSE (C_APP.UM_PARENT2_DEG_2A)
       END
          UM_PARENT2_DEGRE_G,
       C_APP.UM_PARNT1_DEAD_DT,
       C_APP.UM_PARNT1_EMP_STAT,
       C_APP.UM_PARNT1_BIRTH_C,
       C_APP.UM_PARNT1_SAME_ADR,
       C_APP.UM_PARNT1_COLL_NBR,
       C_APP.UM_PARENT_DEG_1B,
       C_APP.UM_PARENT_DEG_1C,
       C_APP.UM_PARENT_DEG_1D,
       C_APP.UM_PARENT_DEG_1E,
       C_APP.UM_PARNT_DEG_YR_1A,
       C_APP.UM_PARNT_DEG_YR_1B,
       C_APP.UM_PARNT_DEG_YR_1C,
       C_APP.UM_PARNT_DEG_YR_1D,
       C_APP.UM_PARNT_DEG_YR_1E,
       C_APP.UM_PARENT_DEG_2B,
       C_APP.UM_PARENT_DEG_2C,
       C_APP.UM_PARENT_DEG_2D,
       C_APP.UM_PARENT_DEG_2E,
       C_APP.UM_PARNT_DEG_YR_2A,
       C_APP.UM_PARNT_DEG_YR_2B,
       C_APP.UM_PARNT_DEG_YR_2C,
       C_APP.UM_PARNT_DEG_YR_2D,
       C_APP.UM_PARNT_DEG_YR_2E,
       C_APP.UM_PARNT1_COLLEGE3,
       C_APP.UM_PARNT1_COL3_CEB,
       C_APP.UM_PARNT1_DEGR_3A,
       C_APP.UM_PARNT1_DEGR_3B,
       C_APP.UM_PARNT1_DEGR_3C,
       C_APP.UM_PARNT1_DEGR_3D,
       C_APP.UM_PARNT1_DEGR_3E,
       C_APP.UM_PARNT1_DG_3A_YR,
       C_APP.UM_PARNT1_DG_3B_YR,
       C_APP.UM_PARNT1_DG_3C_YR,
       C_APP.UM_PARNT1_DG_3D_YR,
       C_APP.UM_PARNT1_DG_3E_YR,
       C_APP.UM_PARNT1_COLLEGE4,
       C_APP.UM_PARNT1_COL4_CEB,
       C_APP.UM_PARNT1_DEGR_4A,
       C_APP.UM_PARNT1_DEGR_4B,
       C_APP.UM_PARNT1_DEGR_4C,
       C_APP.UM_PARNT1_DEGR_4D,
       C_APP.UM_PARNT1_DEGR_4E,
       C_APP.UM_PARNT1_DG_4A_YR,
       C_APP.UM_PARNT1_DG_4B_YR,
       C_APP.UM_PARNT1_DG_4C_YR,
       C_APP.UM_PARNT1_DG_4D_YR,
       C_APP.UM_PARNT1_DG_4E_YR,
       C_APP.UM_PARNT1_COLLEGE5,
       C_APP.UM_PARNT1_COL5_CEB,
       C_APP.UM_PARNT1_DEGR_5A,
       C_APP.UM_PARNT1_DEGR_5B,
       C_APP.UM_PARNT1_DEGR_5C,
       C_APP.UM_PARNT1_DEGR_5D,
       C_APP.UM_PARNT1_DEGR_5E,
       C_APP.UM_PARNT1_DG_5A_YR,
       C_APP.UM_PARNT1_DG_5B_YR,
       C_APP.UM_PARNT1_DG_5C_YR,
       C_APP.UM_PARNT1_DG_5D_YR,
       C_APP.UM_PARNT1_DG_5E_YR,
       C_APP.UM_PARNT2_DEAD_DT,
       C_APP.UM_PARNT2_EMP_STAT,
       C_APP.UM_PARNT2_BIRTH_C,
       C_APP.UM_PARNT2_SAME_ADR,
       C_APP.UM_PARENT2_DEG_1B,
       C_APP.UM_PARENT2_DEG_1C,
       C_APP.UM_PARENT2_DEG_1D,
       C_APP.UM_PARENT2_DEG_1E,
       C_APP.UM_PARNT2_DG_YR_1A,
       C_APP.UM_PARNT2_DG_YR_1B,
       C_APP.UM_PARNT2_DG_YR_1C,
       C_APP.UM_PARNT2_DG_YR_1D,
       C_APP.UM_PARNT2_DG_YR_1E,
       C_APP.UM_PARENT2_DEG_2B,
       C_APP.UM_PARENT2_DEG_2C,
       C_APP.UM_PARENT2_DEG_2D,
       C_APP.UM_PARENT2_DEG_2E,
       C_APP.UM_PARNT2_DG_YR_2A,
       C_APP.UM_PARNT2_DG_YR_2B,
       C_APP.UM_PARNT2_DG_YR_2C,
       C_APP.UM_PARNT2_DG_YR_2D,
       C_APP.UM_PARNT2_DG_YR_2E,
       C_APP.UM_PARNT2_COLLEGE3,
       C_APP.UM_PARNT2_COL3_CEB,
       C_APP.UM_PARNT2_DEGR_3A,
       C_APP.UM_PARNT2_DEGR_3B,
       C_APP.UM_PARNT2_DEGR_3C,
       C_APP.UM_PARNT2_DEGR_3D,
       C_APP.UM_PARNT2_DEGR_3E,
       C_APP.UM_PARNT2_DG_3A_YR,
       C_APP.UM_PARNT2_DG_3B_YR,
       C_APP.UM_PARNT2_DG_3C_YR,
       C_APP.UM_PARNT2_DG_3D_YR,
       C_APP.UM_PARNT2_DG_3E_YR,
       C_APP.UM_PARNT2_COLLEGE4,
       C_APP.UM_PARNT2_COL4_CEB,
       C_APP.UM_PARNT2_DEGR_4A,
       C_APP.UM_PARNT2_DEGR_4B,
       C_APP.UM_PARNT2_DEGR_4C,
       C_APP.UM_PARNT2_DEGR_4D,
       C_APP.UM_PARNT2_DEGR_4E,
       C_APP.UM_PARNT2_DG_4A_YR,
       C_APP.UM_PARNT2_DG_4B_YR,
       C_APP.UM_PARNT2_DG_4C_YR,
       C_APP.UM_PARNT2_DG_4D_YR,
       C_APP.UM_PARNT2_DG_4E_YR,
       C_APP.UM_PARNT2_COLLEGE5,
       C_APP.UM_PARNT2_COL5_CEB,
       C_APP.UM_PARNT2_DEGR_5A,
       C_APP.UM_PARNT2_DEGR_5B,
       C_APP.UM_PARNT2_DEGR_5C,
       C_APP.UM_PARNT2_DEGR_5D,
       C_APP.UM_PARNT2_DEGR_5E,
       C_APP.UM_PARNT2_DG_5A_YR,
       C_APP.UM_PARNT2_DG_5B_YR,
       C_APP.UM_PARNT2_DG_5C_YR,
       C_APP.UM_PARNT2_DG_5D_YR,
       C_APP.UM_PARNT2_DG_5E_YR,
       C_APP.UM_GUARD_SAME_ADR,
       C_APP.UM_GUARD_RELATION,
       C_APP.UM_GUARD_EMP_STAT,
       C_APP.UM_GUARD_DEG_1B,
       C_APP.UM_GUARD_DEG_1C,
       C_APP.UM_GUARD_DEG_1D,
       C_APP.UM_GUARD_DEG_1E,
       C_APP.UM_GUARD_DEG_YR_1A,
       C_APP.UM_GUARD_DEG_YR_1B,
       C_APP.UM_GUARD_DEG_YR_1C,
       C_APP.UM_GUARD_DEG_YR_1D,
       C_APP.UM_GUARD_DEG_YR_1E,
       C_APP.UM_GUARD_DEG_2B,
       C_APP.UM_GUARD_DEG_2C,
       C_APP.UM_GUARD_DEG_2D,
       C_APP.UM_GUARD_DEG_2E,
       C_APP.UM_GUARD_DEG_YR_2A,
       C_APP.UM_GUARD_DEG_YR_2B,
       C_APP.UM_GUARD_DEG_YR_2C,
       C_APP.UM_GUARD_DEG_YR_2D,
       C_APP.UM_GUARD_DEG_YR_2E,
       C_APP.UM_GUARD_COLLEGE3,
       C_APP.UM_GUARD_COL3_CEB,
       C_APP.UM_GUARD_DEGR_3A,
       C_APP.UM_GUARD_DEGR_3B,
       C_APP.UM_GUARD_DEGR_3C,
       C_APP.UM_GUARD_DEGR_3D,
       C_APP.UM_GUARD_DEGR_3E,
       C_APP.UM_GUARD_DG_3A_YR,
       C_APP.UM_GUARD_DG_3B_YR,
       C_APP.UM_GUARD_DG_3C_YR,
       C_APP.UM_GUARD_DG_3D_YR,
       C_APP.UM_GUARD_DG_3E_YR,
       C_APP.UM_GUARD_COLLEGE4,
       C_APP.UM_GUARD_COL4_CEB,
       C_APP.UM_GUARD_DEGR_4A,
       C_APP.UM_GUARD_DEGR_4B,
       C_APP.UM_GUARD_DEGR_4C,
       C_APP.UM_GUARD_DEGR_4D,
       C_APP.UM_GUARD_DEGR_4E,
       C_APP.UM_GUARD_DG_4A_YR,
       C_APP.UM_GUARD_DG_4B_YR,
       C_APP.UM_GUARD_DG_4C_YR,
       C_APP.UM_GUARD_DG_4D_YR,
       C_APP.UM_GUARD_DG_4E_YR,
       C_APP.UM_GUARD_COLLEGE5,
       C_APP.UM_GUARD_COL5_CEB,
       C_APP.UM_GUARD_DEGR_5A,
       C_APP.UM_GUARD_DEGR_5B,
       C_APP.UM_GUARD_DEGR_5C,
       C_APP.UM_GUARD_DEGR_5D,
       C_APP.UM_GUARD_DEGR_5E,
       C_APP.UM_GUARD_DG_5A_YR,
       C_APP.UM_GUARD_DG_5B_YR,
       C_APP.UM_GUARD_DG_5C_YR,
       C_APP.UM_GUARD_DG_5D_YR,
       C_APP.UM_GUARD_DG_5E_YR,
       C_APP.UM_RELGION_PREF,
       C_APP.UM_OTHER_RELGION,
       C_APP.UM_LIVED_US_YRS,
       C_APP.UM_LIVED_OUT_US_YR,
       C_APP.UM_NUMBER_OF_LANG,
       C_APP.UM_OTH_LANG1,
       C_APP.UM_OTH_LANG2,
       C_APP.UM_OTH_LANG3,
       C_APP.UM_OTH_LANG4,
       C_APP.UM_OTH_LANG5,
       C_APP.UM_LANG1_PROF,
       C_APP.UM_LANG2_PROF,
       C_APP.UM_LANG3_PROF,
       C_APP.UM_LANG4_PROF,
       C_APP.UM_LANG5_PROF,
       C_APP.UM_LANG1,
       C_APP.UM_LANG2,
       C_APP.UM_LANG3,
       C_APP.UM_LANG4,
       C_APP.UM_LANG5,
       W_APP.UM_ADM_CURR_EMP, 
       W_APP.UM_ADM_CURR_JOB,
       case when W_APP.INSTITUTION = 'UMBOS' then B_APP.UM_CA_CONTCT_CNSNT
            when W_APP.INSTITUTION = 'UMLOW' then L_APP.UM_CA_CONTCT_CNSNT
            else '' 
        end UM_CA_CONTCT_CNSNT, 
       case when W_APP.INSTITUTION = 'UMBOS' then B_APP.UM_CA_PHON_NBR
            when W_APP.INSTITUTION = 'UMLOW' then L_APP.UM_CA_PHON_NBR
            else '' 
        end UM_CA_PHON_NBR,
       case when W_APP.INSTITUTION = 'UMBOS' then B_APP.UM_CA_SELF_RPT_GPA
	        when W_APP.INSTITUTION = 'UMDAR' then D_APP.UM_CA_SELF_RPT_GPA
            when W_APP.INSTITUTION = 'UMLOW' then L_APP.UM_CA_SELF_RPT_GPA
            else '' 
        end UM_CA_SELF_RPT_GPA,
       case when W_APP.INSTITUTION = 'UMBOS' then B_APP.UM_CA_GPA_SCALE
	        when W_APP.INSTITUTION = 'UMDAR' then D_APP.UM_CA_GPA_SCALE
            when W_APP.INSTITUTION = 'UMLOW' then L_APP.UM_CA_GPA_SCALE
            else '' 
        end UM_CA_GPA_SCALE,
       case when W_APP.INSTITUTION = 'UMBOS' then B_APP.UM_CA_GPA_WEIGHT
	        when W_APP.INSTITUTION = 'UMDAR' then D_APP.UM_CA_GPA_WEIGHT
            when W_APP.INSTITUTION = 'UMLOW' then L_APP.UM_CA_GPA_WEIGHT
            else '' 
        end UM_CA_GPA_WEIGHT,
       W_APP.UM_COUNSELOR_EMAIL,    -- Sep 2017 
       W_APP.UM_COUNSELOR_FNAME,    -- Sep 2017  
       W_APP.UM_COUNSELOR_LNAME,    -- Sep 2017 
       W_APP.UM_COUNSELOR_PHONE,    -- Sep 2017 
       W_APP.UM_HS_ID,              -- Sep 2017 
       W_APP.UM_HS_NAME,            -- Sep 2017 
       C_APP.UM_PARENT_FNAME,
       C_APP.UM_PARENT_MNAME,
       C_APP.UM_PARENT_LNAME,
       C_APP.UM_PARENT2_FNAME,
       C_APP.UM_PARENT2_MNAME,
       C_APP.UM_PARENT2_LNAME,
       C_APP.UM_GUARD_FNAME,
       C_APP.UM_GUARD_MNAME,
       C_APP.UM_GUARD_LNAME,
       W_APP.UM_ADM_HEAR_US_CD, 
       W_APP.UM_ADM_HEAR_US_DESC,
       W_APP.UM_ADM_HEAR_TEXT, 
	   L_APP.UM_CA_UMLOW_F_GEN,     -- Aug 2020
	   L_APP.UM_CA_REL_EMP_MBR,           -- Aug 2020
	   L_APP.UM_ACAD_PROG_CD,       -- Aug 2020
	   L_APP.UM_ACAD_PLAN_CD,       -- Aug 2020
	   L_APP.UM_ACAD_SPLAN_CD,      -- Aug 2020  
       case when W_APP.INSTITUTION = 'UMBOS' then B_APP.UM_CA_COVID19
            when W_APP.INSTITUTION = 'UMLOW' then L_APP.UM_CA_COVID19
			when W_APP.INSTITUTION = 'UMDAR' then D_APP.UM_CA_COVID19
            else ''	
        end UM_CA_COVID19,	
       W_APP.UM_ENG_AS_SEC_LNG,            -- Nov. 2020
       case when W_APP.INSTITUTION = 'UMBOS' then B_APP.UM_CA_GENDER_IDENT
            when W_APP.INSTITUTION = 'UMLOW' then L_APP.UM_CA_GENDER_IDENT
			when W_APP.INSTITUTION = 'UMDAR' then D_APP.UM_CA_GENDER_IDENT
            else ''	
        end UM_CA_GENDER_IDENT,
       'N' LOAD_ERROR,
       'S' DATA_ORIGIN,
       SYSDATE CREATED_EW_DTTM,
       SYSDATE LASTUPD_EW_DTTM,
       1234 BATCH_SID
  FROM W_APP
--  LEFT OUTER JOIN CSSTG_OWNER.PS_UM_COM_PRNT_RPT C_APP
  LEFT OUTER JOIN C_APP
    ON W_APP.INSTITUTION = C_APP.INSTITUTION
   AND W_APP.UM_ADM_REC_NBR = C_APP.UM_ADM_REC_NBR
   AND W_APP.SRC_SYS_ID = C_APP.SRC_SYS_ID
   and C_APP.C_APP_ORDER = 1
  LEFT OUTER JOIN B_APP
    ON W_APP.INSTITUTION = B_APP.INSTITUTION
   AND W_APP.UM_ADM_REC_NBR = B_APP.UM_ADM_REC_NBR
   AND W_APP.SRC_SYS_ID = B_APP.SRC_SYS_ID
   AND B_APP.UMBOS_ORDER = 1
  LEFT OUTER JOIN D_APP			    -- Aug 2020
    ON W_APP.INSTITUTION = D_APP.INSTITUTION
   AND W_APP.UM_ADM_REC_NBR = D_APP.UM_ADM_REC_NBR
   AND W_APP.SRC_SYS_ID = D_APP.SRC_SYS_ID
   AND D_APP.UMDAR_ORDER = 1     
  LEFT OUTER JOIN L_APP
    ON W_APP.INSTITUTION = L_APP.INSTITUTION
   AND W_APP.UM_ADM_REC_NBR = L_APP.UM_ADM_REC_NBR
   AND W_APP.SRC_SYS_ID = L_APP.SRC_SYS_ID
   AND L_APP.UMLOW_ORDER = 1
  join PS_D_PERSON P
    on W_APP.EMPLID = P.PERSON_ID
   and W_APP.SRC_SYS_ID = P.SRC_SYS_ID
  join PS_D_INSTITUTION I
    on W_APP.INSTITUTION = I.INSTITUTION_CD
   and W_APP.SRC_SYS_ID = I.SRC_SYS_ID
  join PS_D_ACAD_CAR C
    on W_APP.INSTITUTION = C.INSTITUTION_CD
   and W_APP.ACAD_CAREER = C.ACAD_CAR_CD
   and W_APP.SRC_SYS_ID = C.SRC_SYS_ID
  left outer join ATP ATP1
--    on W_APP.UM_GUARD_CEEB = ATP1.ATP_CD 
    on (case when C_APP.UM_ADM_REC_NBR is NULL then W_APP.UM_GUARD_CEEB else C_APP.UM_GUARD_CEEB end) = ATP1.ATP_CD 
  left outer join ATP ATP2
    on (case when C_APP.UM_ADM_REC_NBR is NULL then W_APP.UM_GUARD_CEEB_G else C_APP.UM_GUARD_CEEB_G end) = ATP2.ATP_CD 
  left outer join ATP ATP3
    on (case when C_APP.UM_ADM_REC_NBR is NULL then W_APP.UM_PARENT_CEEB_G else C_APP.UM_PARENT_CEEB_G end) = ATP3.ATP_CD
  left outer join ATP ATP4
    on (case when C_APP.UM_ADM_REC_NBR is NULL then W_APP.UM_PARENT2_CEEB else C_APP.UM_PARENT2_CEEB end) = ATP4.ATP_CD
  left outer join ATP ATP5
    on (case when C_APP.UM_ADM_REC_NBR is NULL then W_APP.UM_PARENT2_CEEB_G else C_APP.UM_PARENT2_CEEB_G end) = ATP5.ATP_CD
  left outer join ATP ATP6
    on (case when C_APP.UM_ADM_REC_NBR is NULL then W_APP.UM_PARENT_CEEB else C_APP.UM_PARENT_CEEB end) = ATP6.ATP_CD
 where W_APP.SUBMIT_DT_ORDER = 1
;

strSqlCommand   := 'SET intRowCount';
intRowCount     := SQL%ROWCOUNT;

strSqlCommand := 'commit';
commit;

strMessage01    := '# of UM_F_ADM_WEB_COMN_APP_INFO rows inserted: ' || TO_CHAR(intRowCount,'999,999,999,999');
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_DETAIL';
COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_DETAIL
        (
                i_TargetTableName   => 'UM_F_ADM_WEB_COMN_APP_INFO',
                i_Action            => 'INSERT',
                i_RowCount          => intRowCount
        );

strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_DETAIL';
COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_DETAIL
        (
                i_TargetTableName   => 'UM_F_ADM_WEB_COMN_APP_INFO',
                i_Action            => 'UPDATE',
                i_RowCount          => intRowCount
        );

strMessage01    := 'Enabling Indexes for table CSMRT_OWNER.UM_F_ADM_WEB_COMN_APP_INFO';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlDynamic   := 'alter table CSMRT_OWNER.UM_F_ADM_WEB_COMN_APP_INFO enable constraint PK_UM_F_ADM_WEB_COMN_APP_INFO';
strSqlCommand   := 'SMT_UTILITY.EXECUTE_IMMEDIATE: ' || strSqlDynamic;
COMMON_OWNER.SMT_UTILITY.EXECUTE_IMMEDIATE
                (
                i_SqlStatement          => strSqlDynamic,
                i_MaxTries              => 10,
                i_WaitSeconds           => 10,
                o_Tries                 => intTries
                );
				
COMMON_OWNER.SMT_INDEX.ALL_REBUILD('CSMRT_OWNER','UM_F_ADM_WEB_COMN_APP_INFO');

strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_SUCCESS';
COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_SUCCESS;

strMessage01    := strProcessName || ' is complete.';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

EXCEPTION
    WHEN OTHERS THEN
        COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_EXCEPTION
                (
                        i_SqlCommand   => strSqlCommand,
                        i_SqlCode      => SQLCODE,
                        i_SqlErrm      => SQLERRM
                );

END UM_F_ADM_WEB_COMN_APP_INFO_P;
/
