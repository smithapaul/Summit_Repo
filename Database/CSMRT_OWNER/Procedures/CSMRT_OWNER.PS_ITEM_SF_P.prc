DROP PROCEDURE CSMRT_OWNER.PS_ITEM_SF_P
/

--
-- PS_ITEM_SF_P  (Procedure) 
--
CREATE OR REPLACE PROCEDURE CSMRT_OWNER.PS_ITEM_SF_P AUTHID CURRENT_USER IS

------------------------------------------------------------------------
-- George Adams
--
-- Loads stage table PS_ITEM_SF from PeopleSoft table PS_ITEM_SF.
--
-- V01  SMT-xxxx 04/04/2017,    Jim Doucette
--                              Converted from PS_ITEM_SF.SQL
--
------------------------------------------------------------------------

        strMartId                       Varchar2(50)    := 'CSW';
        strProcessName                  Varchar2(100)   := 'PS_ITEM_SF';
        intProcessSid                   Integer;
        dtProcessStart                  Date            := SYSDATE;
        strMessage01                    Varchar2(4000);
        strMessage02                    Varchar2(512);
        strMessage03                    Varchar2(512)   :='';
        strNewLine                      Varchar2(2)     := chr(13) || chr(10);
        strSqlCommand                   Varchar2(32767) :='';
        strSqlDynamic                   Varchar2(32767) :='';
        strClientInfo                   Varchar2(100);
        strDELETE_FLG                   Varchar2(1);
        intRowCount                     Integer;
        intTotalRowCount                Integer         := 0;
        intOLD_MAX_SCN                  Integer         := 0;
        intNEW_MAX_SCN                  Integer         := 0;
        numSqlCode                      Number;
        strSqlErrm                      Varchar2(4000);
        intTries                        Integer;

BEGIN

strSqlCommand := 'DBMS_APPLICATION_INFO.SET_CLIENT_INFO';
DBMS_APPLICATION_INFO.SET_CLIENT_INFO (strProcessName);

strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_INIT';
COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_INIT
        (
                i_MartId                => strMartId,
                i_ProcessName           => strProcessName,
                i_ProcessStartTime      => dtProcessStart,
                o_ProcessSid            => intProcessSid
        );

strMessage01    := 'Updating CSSTG_OWNER.UM_STAGE_JOBS';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand   := 'update START_DT on CSSTG_OWNER.UM_STAGE_JOBS';
update CSSTG_OWNER.UM_STAGE_JOBS
   set TABLE_STATUS = 'Reading',
       START_DT = sysdate,
       END_DT = NULL
 where TABLE_NAME = 'PS_ITEM_SF'
;

strSqlCommand := 'commit';
commit;

strMessage01    := 'Updating CSSTG_OWNER.UM_STAGE_JOBS';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand   := 'update NEW_MAX_SCN on CSSTG_OWNER.UM_STAGE_JOBS';
update CSSTG_OWNER.UM_STAGE_JOBS
   set TABLE_STATUS = 'Merging',
       NEW_MAX_SCN = (select /*+ full(S) */ max(ORA_ROWSCN) from SYSADM.PS_ITEM_SF@SASOURCE S)
 where TABLE_NAME = 'PS_ITEM_SF'
;

strSqlCommand := 'commit';
commit;

strMessage01    := 'Selecting variables from CSSTG_OWNER.UM_STAGE_JOBS';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

select DELETE_FLG,
       OLD_MAX_SCN,
       NEW_MAX_SCN
  into strDELETE_FLG,
       intOLD_MAX_SCN,
       intNEW_MAX_SCN
  from CSSTG_OWNER.UM_STAGE_JOBS
 where TABLE_NAME = 'PS_ITEM_SF'
;

strMessage01    := 'Merging data into CSSTG_OWNER.PS_ITEM_SF';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand   := 'merge into CSSTG_OWNER.PS_ITEM_SF';
merge /*+ use_hash(S,T) parallel(8) enable_parallel_dml */ into CSSTG_OWNER.PS_ITEM_SF T
using (select /*+ full(S) */
nvl(trim(BUSINESS_UNIT),'-') BUSINESS_UNIT,
nvl(trim(COMMON_ID),'-') COMMON_ID,
nvl(trim(SA_ID_TYPE),'-') SA_ID_TYPE,
nvl(trim(ITEM_NBR),'-') ITEM_NBR,
nvl(trim(EMPLID),'-') EMPLID,
nvl(trim(ACCOUNT_NBR),'-') ACCOUNT_NBR,
nvl(trim(ACCOUNT_TERM),'-') ACCOUNT_TERM,
nvl(trim(ACAD_YEAR),'-') ACAD_YEAR,
nvl(trim(ITEM_TYPE),'-') ITEM_TYPE,
nvl(ITEM_AMT,0) ITEM_AMT,
nvl(APPLIED_AMT,0) APPLIED_AMT,
nvl(ENCUMBERED_AMT,0) ENCUMBERED_AMT,
nvl(trim(REF1_DESCR),'-') REF1_DESCR,
nvl(ITEM_BALANCE,0) ITEM_BALANCE,
nvl(trim(ACAD_CAREER),'-') ACAD_CAREER,
nvl(STDNT_CAR_NBR,0) STDNT_CAR_NBR,
nvl(trim(SESSION_CODE),'-') SESSION_CODE,
nvl(CLASS_NBR,0) CLASS_NBR,
nvl(trim(FEE_CD),'-') FEE_CD,
nvl(trim(SEL_GROUP),'-') SEL_GROUP,
nvl(trim(ADM_APPL_NBR),'-') ADM_APPL_NBR,
nvl(GL_SATISFIED_AMT,0) GL_SATISFIED_AMT,
nvl(GL_ASSESSED_AMT,0) GL_ASSESSED_AMT,
nvl(PAYMENT_ID_NBR,0) PAYMENT_ID_NBR,
nvl(trim(ITEM_TERM),'-') ITEM_TERM,
nvl(trim(ORIGINAL_ACCT_TERM),'-') ORIGINAL_ACCT_TERM,
nvl(trim(BILLING_CAREER),'-') BILLING_CAREER,
nvl(DEPOSIT_NBR,0) DEPOSIT_NBR,
nvl(REFUND_NBR,0) REFUND_NBR,
nvl(trim(EXT_ORG_ID),'-') EXT_ORG_ID,
nvl(trim(REFUND_EMPLID),'-') REFUND_EMPLID,
nvl(trim(CONTRACT_NUM),'-') CONTRACT_NUM,
nvl(COLLECTION_ID,0) COLLECTION_ID,
nvl(RECEIPT_NBR,0) RECEIPT_NBR,
nvl(trim(ACCOUNT_TYPE_SF),'-') ACCOUNT_TYPE_SF,
nvl(trim(ITEM_TYPE_CD),'-') ITEM_TYPE_CD,
nvl(trim(CONTRACT_EMPLID),'-') CONTRACT_EMPLID,
nvl(trim(CHARGE_PRIORITY),'-') CHARGE_PRIORITY,
nvl(trim(COURSE_LIST),'-') COURSE_LIST,
nvl(trim(CRSE_ID),'-') CRSE_ID,
nvl(trim(WAIVER_CODE),'-') WAIVER_CODE,
nvl(PRIORITY,0) PRIORITY,
nvl(trim(PRIORITY_PMT_FLG),'-') PRIORITY_PMT_FLG,
nvl(trim(NRA_TAXATION_SWTCH),'-') NRA_TAXATION_SWTCH,
nvl(GL_BALANCED_AMT,0) GL_BALANCED_AMT,
nvl(STATE_TAX_RT,0) STATE_TAX_RT,
nvl(LOCAL_TAX_RT,0) LOCAL_TAX_RT,
nvl(FEDERAL_TAX_RT,0) FEDERAL_TAX_RT,
to_date(to_char(BILLING_DT,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') BILLING_DT,
to_date(to_char(DUE_DT,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') DUE_DT,
to_date(to_char(ACTUAL_BILLING_DT,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') ACTUAL_BILLING_DT,
nvl(CALENDAR_YEAR,0) CALENDAR_YEAR,
to_date(to_char(SRVC_IND_DTTM,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') SRVC_IND_DTTM,
nvl(TAX_ADJ_WHOLDINGS,0) TAX_ADJ_WHOLDINGS,
nvl(trim(TRANS_FEE_CD),'-') TRANS_FEE_CD,
nvl(trim(LATE_FEE_CODE),'-') LATE_FEE_CODE,
nvl(trim(CUR_RT_TYPE),'-') CUR_RT_TYPE,
nvl(RATE_MULT,0) RATE_MULT,
nvl(RATE_DIV,0) RATE_DIV,
nvl(trim(CURRENCY_CD),'-') CURRENCY_CD,
nvl(trim(ORIGNL_CURRENCY_CD),'-') ORIGNL_CURRENCY_CD,
nvl(ORIGNL_ITEM_AMT,0) ORIGNL_ITEM_AMT,
nvl(trim(ITEM_STATUS),'-') ITEM_STATUS,
to_date(to_char(TRANSFER_DT,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') TRANSFER_DT,
nvl(trim(TRANSFER_STATUS),'-') TRANSFER_STATUS,
nvl(trim(TRANSFER_PAYMNT_ID),'-') TRANSFER_PAYMNT_ID,
nvl(TRANSFER_AMT,0) TRANSFER_AMT,
nvl(trim(ITEM_NBR_SOURCE),'-') ITEM_NBR_SOURCE,
nvl(trim(TAX_AUTHORITY_CD),'-') TAX_AUTHORITY_CD,
nvl(CONTRACT_AMT,0) CONTRACT_AMT,
to_date(to_char(INTEREST_DT,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') INTEREST_DT,
nvl(T4_SENT_AMT,0) T4_SENT_AMT,
nvl(trim(GL_FROM_SUBFEE),'-') GL_FROM_SUBFEE,
to_date(to_char(ITEM_EFFECTIVE_DT,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') ITEM_EFFECTIVE_DT,
nvl(trim(TRACER_NBR),'-') TRACER_NBR,
nvl(trim(AID_YEAR),'-') AID_YEAR,
to_date(to_char(DISBURSEMENT_DATE,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') DISBURSEMENT_DATE,
to_date(to_char(ORIG_EFF_DT,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') ORIG_EFF_DT,
nvl(trim(SF_DEPOSIT_ID),'-') SF_DEPOSIT_ID,
to_date(to_char(LAST_ACTIVITY_DATE,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') LAST_ACTIVITY_DATE,
nvl(trim(REFUND_EXT_ORG_ID),'-') REFUND_EXT_ORG_ID,
nvl(REFUND_ORG_CONTACT,0) REFUND_ORG_CONTACT,
nvl(trim(TAX_CD),'-') TAX_CD,
nvl(trim(SF_PMT_REF_NBR),'-') SF_PMT_REF_NBR,
nvl(trim(SF_ADM_APPL_DEL),'-') SF_ADM_APPL_DEL,
nvl(trim(CLASS_CRSE_FEE_IND),'-') CLASS_CRSE_FEE_IND,
nvl(SSF_BILLED_AMOUNT,0) SSF_BILLED_AMOUNT,
nvl(SSF_INSTMNT_ID,0) SSF_INSTMNT_ID,
nvl(trim(SCC_ROW_ADD_OPRID),'-') SCC_ROW_ADD_OPRID,
to_date(to_char(SCC_ROW_ADD_DTTM,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') SCC_ROW_ADD_DTTM,
nvl(trim(SCC_ROW_UPD_OPRID),'-') SCC_ROW_UPD_OPRID,
to_date(to_char(SCC_ROW_UPD_DTTM,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') SCC_ROW_UPD_DTTM
  from SYSADM.PS_ITEM_SF@SASOURCE S
-- where ORA_ROWSCN > (select OLD_MAX_SCN from CSSTG_OWNER.UM_STAGE_JOBS where TABLE_NAME = 'PS_ITEM_SF')
 where ORA_ROWSCN > intOLD_MAX_SCN
   and COMMON_ID between '00000000' and '99999999'
   and length(COMMON_ID) = 8 ) S
   on (T.BUSINESS_UNIT = S.BUSINESS_UNIT
  and  T.COMMON_ID = S.COMMON_ID
  and  T.SA_ID_TYPE = S.SA_ID_TYPE
  and  T.ITEM_NBR = S.ITEM_NBR
  and  T.SRC_SYS_ID = 'CS90')
 when matched then update set
T.EMPLID = S.EMPLID,
T.ACCOUNT_NBR = S.ACCOUNT_NBR,
T.ACCOUNT_TERM = S.ACCOUNT_TERM,
T.ACAD_YEAR = S.ACAD_YEAR,
T.ITEM_TYPE = S.ITEM_TYPE,
T.ITEM_AMT = S.ITEM_AMT,
T.APPLIED_AMT = S.APPLIED_AMT,
T.ENCUMBERED_AMT = S.ENCUMBERED_AMT,
T.REF1_DESCR = S.REF1_DESCR,
T.ITEM_BALANCE = S.ITEM_BALANCE,
T.ACAD_CAREER = S.ACAD_CAREER,
T.STDNT_CAR_NBR = S.STDNT_CAR_NBR,
T.SESSION_CODE = S.SESSION_CODE,
T.CLASS_NBR = S.CLASS_NBR,
T.FEE_CD = S.FEE_CD,
T.SEL_GROUP = S.SEL_GROUP,
T.ADM_APPL_NBR = S.ADM_APPL_NBR,
T.GL_SATISFIED_AMT = S.GL_SATISFIED_AMT,
T.GL_ASSESSED_AMT = S.GL_ASSESSED_AMT,
T.PAYMENT_ID_NBR = S.PAYMENT_ID_NBR,
T.ITEM_TERM = S.ITEM_TERM,
T.ORIGINAL_ACCT_TERM = S.ORIGINAL_ACCT_TERM,
T.BILLING_CAREER = S.BILLING_CAREER,
T.DEPOSIT_NBR = S.DEPOSIT_NBR,
T.REFUND_NBR = S.REFUND_NBR,
T.EXT_ORG_ID = S.EXT_ORG_ID,
T.REFUND_EMPLID = S.REFUND_EMPLID,
T.CONTRACT_NUM = S.CONTRACT_NUM,
T.COLLECTION_ID = S.COLLECTION_ID,
T.RECEIPT_NBR = S.RECEIPT_NBR,
T.ACCOUNT_TYPE_SF = S.ACCOUNT_TYPE_SF,
T.ITEM_TYPE_CD = S.ITEM_TYPE_CD,
T.CONTRACT_EMPLID = S.CONTRACT_EMPLID,
T.CHARGE_PRIORITY = S.CHARGE_PRIORITY,
T.COURSE_LIST = S.COURSE_LIST,
T.CRSE_ID = S.CRSE_ID,
T.WAIVER_CODE = S.WAIVER_CODE,
T.PRIORITY = S.PRIORITY,
T.PRIORITY_PMT_FLG = S.PRIORITY_PMT_FLG,
T.NRA_TAXATION_SWTCH = S.NRA_TAXATION_SWTCH,
T.GL_BALANCED_AMT = S.GL_BALANCED_AMT,
T.STATE_TAX_RT = S.STATE_TAX_RT,
T.LOCAL_TAX_RT = S.LOCAL_TAX_RT,
T.FEDERAL_TAX_RT = S.FEDERAL_TAX_RT,
T.BILLING_DT = S.BILLING_DT,
T.DUE_DT = S.DUE_DT,
T.ACTUAL_BILLING_DT = S.ACTUAL_BILLING_DT,
T.CALENDAR_YEAR = S.CALENDAR_YEAR,
T.SRVC_IND_DTTM = S.SRVC_IND_DTTM,
T.TAX_ADJ_WHOLDINGS = S.TAX_ADJ_WHOLDINGS,
T.TRANS_FEE_CD = S.TRANS_FEE_CD,
T.LATE_FEE_CODE = S.LATE_FEE_CODE,
T.CUR_RT_TYPE = S.CUR_RT_TYPE,
T.RATE_MULT = S.RATE_MULT,
T.RATE_DIV = S.RATE_DIV,
T.CURRENCY_CD = S.CURRENCY_CD,
T.ORIGNL_CURRENCY_CD = S.ORIGNL_CURRENCY_CD,
T.ORIGNL_ITEM_AMT = S.ORIGNL_ITEM_AMT,
T.ITEM_STATUS = S.ITEM_STATUS,
T.TRANSFER_DT = S.TRANSFER_DT,
T.TRANSFER_STATUS = S.TRANSFER_STATUS,
T.TRANSFER_PAYMNT_ID = S.TRANSFER_PAYMNT_ID,
T.TRANSFER_AMT = S.TRANSFER_AMT,
T.ITEM_NBR_SOURCE = S.ITEM_NBR_SOURCE,
T.TAX_AUTHORITY_CD = S.TAX_AUTHORITY_CD,
T.CONTRACT_AMT = S.CONTRACT_AMT,
T.INTEREST_DT = S.INTEREST_DT,
T.T4_SENT_AMT = S.T4_SENT_AMT,
T.GL_FROM_SUBFEE = S.GL_FROM_SUBFEE,
T.ITEM_EFFECTIVE_DT = S.ITEM_EFFECTIVE_DT,
T.TRACER_NBR = S.TRACER_NBR,
T.AID_YEAR = S.AID_YEAR,
T.DISBURSEMENT_DATE = S.DISBURSEMENT_DATE,
T.ORIG_EFF_DT = S.ORIG_EFF_DT,
T.SF_DEPOSIT_ID = S.SF_DEPOSIT_ID,
T.LAST_ACTIVITY_DATE = S.LAST_ACTIVITY_DATE,
T.REFUND_EXT_ORG_ID = S.REFUND_EXT_ORG_ID,
T.REFUND_ORG_CONTACT = S.REFUND_ORG_CONTACT,
T.TAX_CD = S.TAX_CD,
T.SF_PMT_REF_NBR = S.SF_PMT_REF_NBR,
T.SF_ADM_APPL_DEL = S.SF_ADM_APPL_DEL,
T.CLASS_CRSE_FEE_IND = S.CLASS_CRSE_FEE_IND,
T.SSF_BILLED_AMOUNT = S.SSF_BILLED_AMOUNT,
T.SSF_INSTMNT_ID = S.SSF_INSTMNT_ID,
T.SCC_ROW_ADD_OPRID = S.SCC_ROW_ADD_OPRID,
T.SCC_ROW_ADD_DTTM = S.SCC_ROW_ADD_DTTM,
T.SCC_ROW_UPD_OPRID = S.SCC_ROW_UPD_OPRID,
T.SCC_ROW_UPD_DTTM = S.SCC_ROW_UPD_DTTM,
      T.DATA_ORIGIN = 'S',
      T.LASTUPD_EW_DTTM = sysdate,
      T.BATCH_SID   = 1234
where
T.EMPLID <> S.EMPLID or
T.ACCOUNT_NBR <> S.ACCOUNT_NBR or
T.ACCOUNT_TERM <> S.ACCOUNT_TERM or
T.ACAD_YEAR <> S.ACAD_YEAR or
T.ITEM_TYPE <> S.ITEM_TYPE or
T.ITEM_AMT <> S.ITEM_AMT or
T.APPLIED_AMT <> S.APPLIED_AMT or
T.ENCUMBERED_AMT <> S.ENCUMBERED_AMT or
T.REF1_DESCR <> S.REF1_DESCR or
T.ITEM_BALANCE <> S.ITEM_BALANCE or
T.ACAD_CAREER <> S.ACAD_CAREER or
T.STDNT_CAR_NBR <> S.STDNT_CAR_NBR or
T.SESSION_CODE <> S.SESSION_CODE or
T.CLASS_NBR <> S.CLASS_NBR or
T.FEE_CD <> S.FEE_CD or
T.SEL_GROUP <> S.SEL_GROUP or
T.ADM_APPL_NBR <> S.ADM_APPL_NBR or
T.GL_SATISFIED_AMT <> S.GL_SATISFIED_AMT or
T.GL_ASSESSED_AMT <> S.GL_ASSESSED_AMT or
T.PAYMENT_ID_NBR <> S.PAYMENT_ID_NBR or
T.ITEM_TERM <> S.ITEM_TERM or
T.ORIGINAL_ACCT_TERM <> S.ORIGINAL_ACCT_TERM or
T.BILLING_CAREER <> S.BILLING_CAREER or
T.DEPOSIT_NBR <> S.DEPOSIT_NBR or
T.REFUND_NBR <> S.REFUND_NBR or
T.EXT_ORG_ID <> S.EXT_ORG_ID or
T.REFUND_EMPLID <> S.REFUND_EMPLID or
T.CONTRACT_NUM <> S.CONTRACT_NUM or
T.COLLECTION_ID <> S.COLLECTION_ID or
T.RECEIPT_NBR <> S.RECEIPT_NBR or
T.ACCOUNT_TYPE_SF <> S.ACCOUNT_TYPE_SF or
T.ITEM_TYPE_CD <> S.ITEM_TYPE_CD or
T.CONTRACT_EMPLID <> S.CONTRACT_EMPLID or
T.CHARGE_PRIORITY <> S.CHARGE_PRIORITY or
T.COURSE_LIST <> S.COURSE_LIST or
T.CRSE_ID <> S.CRSE_ID or
T.WAIVER_CODE <> S.WAIVER_CODE or
T.PRIORITY <> S.PRIORITY or
T.PRIORITY_PMT_FLG <> S.PRIORITY_PMT_FLG or
T.NRA_TAXATION_SWTCH <> S.NRA_TAXATION_SWTCH or
T.GL_BALANCED_AMT <> S.GL_BALANCED_AMT or
T.STATE_TAX_RT <> S.STATE_TAX_RT or
T.LOCAL_TAX_RT <> S.LOCAL_TAX_RT or
T.FEDERAL_TAX_RT <> S.FEDERAL_TAX_RT or
nvl(trim(T.BILLING_DT),0) <> nvl(trim(S.BILLING_DT),0) or
nvl(trim(T.DUE_DT),0) <> nvl(trim(S.DUE_DT),0) or
nvl(trim(T.ACTUAL_BILLING_DT),0) <> nvl(trim(S.ACTUAL_BILLING_DT),0) or
T.CALENDAR_YEAR <> S.CALENDAR_YEAR or
nvl(trim(T.SRVC_IND_DTTM),0) <> nvl(trim(S.SRVC_IND_DTTM),0) or
T.TAX_ADJ_WHOLDINGS <> S.TAX_ADJ_WHOLDINGS or
T.TRANS_FEE_CD <> S.TRANS_FEE_CD or
T.LATE_FEE_CODE <> S.LATE_FEE_CODE or
T.CUR_RT_TYPE <> S.CUR_RT_TYPE or
T.RATE_MULT <> S.RATE_MULT or
T.RATE_DIV <> S.RATE_DIV or
T.CURRENCY_CD <> S.CURRENCY_CD or
T.ORIGNL_CURRENCY_CD <> S.ORIGNL_CURRENCY_CD or
T.ORIGNL_ITEM_AMT <> S.ORIGNL_ITEM_AMT or
T.ITEM_STATUS <> S.ITEM_STATUS or
nvl(trim(T.TRANSFER_DT),0) <> nvl(trim(S.TRANSFER_DT),0) or
T.TRANSFER_STATUS <> S.TRANSFER_STATUS or
T.TRANSFER_PAYMNT_ID <> S.TRANSFER_PAYMNT_ID or
T.TRANSFER_AMT <> S.TRANSFER_AMT or
T.ITEM_NBR_SOURCE <> S.ITEM_NBR_SOURCE or
T.TAX_AUTHORITY_CD <> S.TAX_AUTHORITY_CD or
T.CONTRACT_AMT <> S.CONTRACT_AMT or
nvl(trim(T.INTEREST_DT),0) <> nvl(trim(S.INTEREST_DT),0) or
T.T4_SENT_AMT <> S.T4_SENT_AMT or
T.GL_FROM_SUBFEE <> S.GL_FROM_SUBFEE or
nvl(trim(T.ITEM_EFFECTIVE_DT),0) <> nvl(trim(S.ITEM_EFFECTIVE_DT),0) or
T.TRACER_NBR <> S.TRACER_NBR or
T.AID_YEAR <> S.AID_YEAR or
nvl(trim(T.DISBURSEMENT_DATE),0) <> nvl(trim(S.DISBURSEMENT_DATE),0) or
nvl(trim(T.ORIG_EFF_DT),0) <> nvl(trim(S.ORIG_EFF_DT),0) or
T.SF_DEPOSIT_ID <> S.SF_DEPOSIT_ID or
nvl(trim(T.LAST_ACTIVITY_DATE),0) <> nvl(trim(S.LAST_ACTIVITY_DATE),0) or
T.REFUND_EXT_ORG_ID <> S.REFUND_EXT_ORG_ID or
T.REFUND_ORG_CONTACT <> S.REFUND_ORG_CONTACT or
T.TAX_CD <> S.TAX_CD or
T.SF_PMT_REF_NBR <> S.SF_PMT_REF_NBR or
T.SF_ADM_APPL_DEL <> S.SF_ADM_APPL_DEL or
T.CLASS_CRSE_FEE_IND <> S.CLASS_CRSE_FEE_IND or
T.SSF_BILLED_AMOUNT <> S.SSF_BILLED_AMOUNT or
T.SSF_INSTMNT_ID <> S.SSF_INSTMNT_ID or
T.SCC_ROW_ADD_OPRID <> S.SCC_ROW_ADD_OPRID or
nvl(trim(T.SCC_ROW_ADD_DTTM),0) <> nvl(trim(S.SCC_ROW_ADD_DTTM),0) or
T.SCC_ROW_UPD_OPRID <> S.SCC_ROW_UPD_OPRID or
nvl(trim(T.SCC_ROW_UPD_DTTM),0) <> nvl(trim(S.SCC_ROW_UPD_DTTM),0) or
      T.DATA_ORIGIN = 'D'
 when not matched then
insert (
T.BUSINESS_UNIT,
T.COMMON_ID,
T.SA_ID_TYPE,
T.ITEM_NBR,
T.SRC_SYS_ID,
T.EMPLID,
T.ACCOUNT_NBR,
T.ACCOUNT_TERM,
T.ACAD_YEAR,
T.ITEM_TYPE,
T.ITEM_AMT,
T.APPLIED_AMT,
T.ENCUMBERED_AMT,
T.REF1_DESCR,
T.ITEM_BALANCE,
T.ACAD_CAREER,
T.STDNT_CAR_NBR,
T.SESSION_CODE,
T.CLASS_NBR,
T.FEE_CD,
T.SEL_GROUP,
T.ADM_APPL_NBR,
T.GL_SATISFIED_AMT,
T.GL_ASSESSED_AMT,
T.PAYMENT_ID_NBR,
T.ITEM_TERM,
T.ORIGINAL_ACCT_TERM,
T.BILLING_CAREER,
T.DEPOSIT_NBR,
T.REFUND_NBR,
T.EXT_ORG_ID,
T.REFUND_EMPLID,
T.CONTRACT_NUM,
T.COLLECTION_ID,
T.RECEIPT_NBR,
T.ACCOUNT_TYPE_SF,
T.ITEM_TYPE_CD,
T.CONTRACT_EMPLID,
T.CHARGE_PRIORITY,
T.COURSE_LIST,
T.CRSE_ID,
T.WAIVER_CODE,
T.PRIORITY,
T.PRIORITY_PMT_FLG,
T.NRA_TAXATION_SWTCH,
T.GL_BALANCED_AMT,
T.STATE_TAX_RT,
T.LOCAL_TAX_RT,
T.FEDERAL_TAX_RT,
T.BILLING_DT,
T.DUE_DT,
T.ACTUAL_BILLING_DT,
T.CALENDAR_YEAR,
T.SRVC_IND_DTTM,
T.TAX_ADJ_WHOLDINGS,
T.TRANS_FEE_CD,
T.LATE_FEE_CODE,
T.CUR_RT_TYPE,
T.RATE_MULT,
T.RATE_DIV,
T.CURRENCY_CD,
T.ORIGNL_CURRENCY_CD,
T.ORIGNL_ITEM_AMT,
T.ITEM_STATUS,
T.TRANSFER_DT,
T.TRANSFER_STATUS,
T.TRANSFER_PAYMNT_ID,
T.TRANSFER_AMT,
T.ITEM_NBR_SOURCE,
T.TAX_AUTHORITY_CD,
T.CONTRACT_AMT,
T.INTEREST_DT,
T.T4_SENT_AMT,
T.GL_FROM_SUBFEE,
T.ITEM_EFFECTIVE_DT,
T.TRACER_NBR,
T.AID_YEAR,
T.DISBURSEMENT_DATE,
T.ORIG_EFF_DT,
T.SF_DEPOSIT_ID,
T.LAST_ACTIVITY_DATE,
T.REFUND_EXT_ORG_ID,
T.REFUND_ORG_CONTACT,
T.TAX_CD,
T.SF_PMT_REF_NBR,
T.SF_ADM_APPL_DEL,
T.CLASS_CRSE_FEE_IND,
T.SSF_BILLED_AMOUNT,
T.SSF_INSTMNT_ID,
T.SCC_ROW_ADD_OPRID,
T.SCC_ROW_ADD_DTTM,
T.SCC_ROW_UPD_OPRID,
T.SCC_ROW_UPD_DTTM,
T.LOAD_ERROR,
T.DATA_ORIGIN,
T.CREATED_EW_DTTM,
T.LASTUPD_EW_DTTM,
T.BATCH_SID)
values (
S.BUSINESS_UNIT,
S.COMMON_ID,
S.SA_ID_TYPE,
S.ITEM_NBR,
'CS90',
S.EMPLID,
S.ACCOUNT_NBR,
S.ACCOUNT_TERM,
S.ACAD_YEAR,
S.ITEM_TYPE,
S.ITEM_AMT,
S.APPLIED_AMT,
S.ENCUMBERED_AMT,
S.REF1_DESCR,
S.ITEM_BALANCE,
S.ACAD_CAREER,
S.STDNT_CAR_NBR,
S.SESSION_CODE,
S.CLASS_NBR,
S.FEE_CD,
S.SEL_GROUP,
S.ADM_APPL_NBR,
S.GL_SATISFIED_AMT,
S.GL_ASSESSED_AMT,
S.PAYMENT_ID_NBR,
S.ITEM_TERM,
S.ORIGINAL_ACCT_TERM,
S.BILLING_CAREER,
S.DEPOSIT_NBR,
S.REFUND_NBR,
S.EXT_ORG_ID,
S.REFUND_EMPLID,
S.CONTRACT_NUM,
S.COLLECTION_ID,
S.RECEIPT_NBR,
S.ACCOUNT_TYPE_SF,
S.ITEM_TYPE_CD,
S.CONTRACT_EMPLID,
S.CHARGE_PRIORITY,
S.COURSE_LIST,
S.CRSE_ID,
S.WAIVER_CODE,
S.PRIORITY,
S.PRIORITY_PMT_FLG,
S.NRA_TAXATION_SWTCH,
S.GL_BALANCED_AMT,
S.STATE_TAX_RT,
S.LOCAL_TAX_RT,
S.FEDERAL_TAX_RT,
S.BILLING_DT,
S.DUE_DT,
S.ACTUAL_BILLING_DT,
S.CALENDAR_YEAR,
S.SRVC_IND_DTTM,
S.TAX_ADJ_WHOLDINGS,
S.TRANS_FEE_CD,
S.LATE_FEE_CODE,
S.CUR_RT_TYPE,
S.RATE_MULT,
S.RATE_DIV,
S.CURRENCY_CD,
S.ORIGNL_CURRENCY_CD,
S.ORIGNL_ITEM_AMT,
S.ITEM_STATUS,
S.TRANSFER_DT,
S.TRANSFER_STATUS,
S.TRANSFER_PAYMNT_ID,
S.TRANSFER_AMT,
S.ITEM_NBR_SOURCE,
S.TAX_AUTHORITY_CD,
S.CONTRACT_AMT,
S.INTEREST_DT,
S.T4_SENT_AMT,
S.GL_FROM_SUBFEE,
S.ITEM_EFFECTIVE_DT,
S.TRACER_NBR,
S.AID_YEAR,
S.DISBURSEMENT_DATE,
S.ORIG_EFF_DT,
S.SF_DEPOSIT_ID,
S.LAST_ACTIVITY_DATE,
S.REFUND_EXT_ORG_ID,
S.REFUND_ORG_CONTACT,
S.TAX_CD,
S.SF_PMT_REF_NBR,
S.SF_ADM_APPL_DEL,
S.CLASS_CRSE_FEE_IND,
S.SSF_BILLED_AMOUNT,
S.SSF_INSTMNT_ID,
S.SCC_ROW_ADD_OPRID,
S.SCC_ROW_ADD_DTTM,
S.SCC_ROW_UPD_OPRID,
S.SCC_ROW_UPD_DTTM,
      'N',
      'S',
      sysdate,
      sysdate,
      1234)
;

strSqlCommand   := 'SET intRowCount';
intRowCount     := SQL%ROWCOUNT;

strSqlCommand := 'commit';
commit;

strMessage01    := '# of PS_ITEM_SF rows merged: ' || TO_CHAR(intRowCount,'999,999,999,999');
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_DETAIL';
COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_DETAIL
        (
                i_TargetTableName   => 'PS_ITEM_SF',
                i_Action            => 'MERGE',
                i_RowCount          => intRowCount
        );

If strDELETE_FLG = 'Y' then

strMessage01    := 'Updating CSSTG_OWNER.UM_STAGE_JOBS';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand   := 'update TABLE_STATUS on CSSTG_OWNER.UM_STAGE_JOBS';
update CSSTG_OWNER.UM_STAGE_JOBS
   set TABLE_STATUS = 'Deleting',
       OLD_MAX_SCN = NEW_MAX_SCN
 where TABLE_NAME = 'PS_ITEM_SF';

strSqlCommand := 'commit';
commit;

strMessage01    := 'Updating DATA_ORIGIN on CSSTG_OWNER.PS_ITEM_SF';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand   := 'update DATA_ORIGIN on CSSTG_OWNER.PS_ITEM_SF';
update /*+ parallel(8) enable_parallel_dml */ CSSTG_OWNER.PS_ITEM_SF T
   set T.DATA_ORIGIN = 'D',
       T.LASTUPD_EW_DTTM = SYSDATE
 where T.DATA_ORIGIN <> 'D'
   and exists
(select 1 from
(select BUSINESS_UNIT, COMMON_ID, SA_ID_TYPE, ITEM_NBR
   from CSSTG_OWNER.PS_ITEM_SF T2
--  where (select DELETE_FLG from CSSTG_OWNER.UM_STAGE_JOBS where TABLE_NAME = 'PS_ITEM_SF') = 'Y'
  minus
 select BUSINESS_UNIT, COMMON_ID, SA_ID_TYPE, ITEM_NBR
   from SYSADM.PS_ITEM_SF@SASOURCE S2
--  where (select DELETE_FLG from CSSTG_OWNER.UM_STAGE_JOBS where TABLE_NAME = 'PS_ITEM_SF') = 'Y'
   ) S
 where T.BUSINESS_UNIT = S.BUSINESS_UNIT
   and T.COMMON_ID = S.COMMON_ID
   and T.SA_ID_TYPE = S.SA_ID_TYPE
   and T.ITEM_NBR = S.ITEM_NBR
   and T.SRC_SYS_ID = 'CS90'
   )
;

strSqlCommand   := 'SET intRowCount';
intRowCount     := SQL%ROWCOUNT;

strSqlCommand := 'commit';
commit;

strMessage01    := '# of PS_ITEM_SF rows updated: ' || TO_CHAR(intRowCount,'999,999,999,999');
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_DETAIL';
COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_DETAIL
        (
                i_TargetTableName   => 'PS_ITEM_SF',
                i_Action            => 'UPDATE',
                i_RowCount          => intRowCount
        );


End if;

strMessage01    := 'Updating CSSTG_OWNER.UM_STAGE_JOBS';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand   := 'update END_DT on CSSTG_OWNER.UM_STAGE_JOBS';

update CSSTG_OWNER.UM_STAGE_JOBS
   set TABLE_STATUS = 'Complete',
       END_DT = SYSDATE
 where TABLE_NAME = 'PS_ITEM_SF'
;

strSqlCommand := 'commit';
commit;

strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_SUCCESS';
COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_SUCCESS;

strMessage01    := strProcessName || ' is complete.';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

EXCEPTION
    WHEN OTHERS THEN
        COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_EXCEPTION
                (
                        i_SqlCommand   => strSqlCommand,
                        i_SqlCode      => SQLCODE,
                        i_SqlErrm      => SQLERRM
                );

END PS_ITEM_SF_P;
/
