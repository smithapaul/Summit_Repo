DROP PROCEDURE CSMRT_OWNER.AM_PS_ISIR_STUDENT_P
/

--
-- AM_PS_ISIR_STUDENT_P  (Procedure) 
--
CREATE OR REPLACE PROCEDURE CSMRT_OWNER."AM_PS_ISIR_STUDENT_P" IS

------------------------------------------------------------------------
-- George Adams
--
-- Loads stage table PS_ISIR_STUDENT from PeopleSoft table PS_ISIR_STUDENT.
--
-- V01  SMT-xxxx 04/11/2017,    Jim Doucette
--                              Converted from PS_ISIR_STUDENT.SQL
--VXX    07/06/2021,            Kieu ,Srikanth - Added EMPLID or COMMON_ID additional filter logic
------------------------------------------------------------------------

        strMartId                       Varchar2(50)    := 'CSW';
        strProcessName                  Varchar2(100)   := 'AM_PS_ISIR_STUDENT';
        intProcessSid                   Integer;
        dtProcessStart                  Date            := SYSDATE;
        strMessage01                    Varchar2(4000);
        strMessage02                    Varchar2(512);
        strMessage03                    Varchar2(512)   :='';
        strNewLine                      Varchar2(2)     := chr(13) || chr(10);
        strSqlCommand                   Varchar2(32767) :='';
        strSqlDynamic                   Varchar2(32767) :='';
        strClientInfo                   Varchar2(100);
        intRowCount                     Integer;
        intTotalRowCount                Integer         := 0;
        numSqlCode                      Number;
        strSqlErrm                      Varchar2(4000);
        intTries                        Integer;

BEGIN
strSqlCommand := 'DBMS_APPLICATION_INFO.SET_CLIENT_INFO';
DBMS_APPLICATION_INFO.SET_CLIENT_INFO (strProcessName);

strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_INIT';
COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_INIT
        (
                i_MartId                => strMartId,
                i_ProcessName           => strProcessName,
                i_ProcessStartTime      => dtProcessStart,
                o_ProcessSid            => intProcessSid
        );

strMessage01    := 'Updating AMSTG_OWNER.UM_STAGE_JOBS';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);


strSqlCommand   := 'update START_DT on AMSTG_OWNER.UM_STAGE_JOBS';
update AMSTG_OWNER.UM_STAGE_JOBS
   set TABLE_STATUS = 'Reading',
       START_DT = sysdate,
       END_DT = NULL
 where TABLE_NAME = 'PS_ISIR_STUDENT'
;

strSqlCommand := 'commit';
commit;


strSqlCommand   := 'update NEW_MAX_SCN on AMSTG_OWNER.UM_STAGE_JOBS';
update AMSTG_OWNER.UM_STAGE_JOBS
   set TABLE_STATUS = 'Merging',
       NEW_MAX_SCN = (select /*+ full(S) */ max(ORA_ROWSCN) from SYSADM.PS_ISIR_STUDENT@AMSOURCE S)
 where TABLE_NAME = 'PS_ISIR_STUDENT'
;

strSqlCommand := 'commit';
commit;


strMessage01    := 'Merging data into AMSTG_OWNER.PS_ISIR_STUDENT';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand   := 'merge into AMSTG_OWNER.PS_ISIR_STUDENT';
merge /*+ use_hash(S,T) */ into AMSTG_OWNER.PS_ISIR_STUDENT T
using (select /*+ full(S) */
nvl(trim(EMPLID),'-') EMPLID,
nvl(trim(INSTITUTION),'-') INSTITUTION,
nvl(trim(AID_YEAR),'-') AID_YEAR,
to_date(to_char(case when EFFDT < '01-JAN-1800' then NULL else EFFDT end,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') EFFDT,
nvl(EFFSEQ,0) EFFSEQ,
nvl(TABLE_ID,0) TABLE_ID,
nvl(trim(NUM_FAMILY_MEMBERS),'-') NUM_FAMILY_MEMBERS,
nvl(trim(DFLT_NUM_FAM_IND),'-') DFLT_NUM_FAM_IND,
nvl(trim(NUMBER_IN_COLLEGE),'-') NUMBER_IN_COLLEGE,
nvl(trim(DFLT_NUM_COLL_IND),'-') DFLT_NUM_COLL_IND,
nvl(trim(DOB_PRIOR),'-') DOB_PRIOR,
nvl(trim(DFLT_DOB_PRIOR_IND),'-') DFLT_DOB_PRIOR_IND,
nvl(trim(VETERAN),'-') VETERAN,
nvl(trim(GRADUATE_STUDENT),'-') GRADUATE_STUDENT,
nvl(trim(MARRIED),'-') MARRIED,
nvl(trim(DFLT_MARRIED_IND),'-') DFLT_MARRIED_IND,
nvl(trim(MARITAL_STAT),'-') MARITAL_STAT,
to_date(to_char(case when MAR_STATUS_DT < '01-JAN-1800' then NULL else MAR_STATUS_DT end,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') MAR_STATUS_DT,
nvl(trim(DFLT_MAR_STAT_IND),'-') DFLT_MAR_STAT_IND,
nvl(trim(ORPHAN),'-') ORPHAN,
nvl(trim(DEPENDENTS),'-') DEPENDENTS,
nvl(trim(DFLT_DEPEND_IND),'-') DFLT_DEPEND_IND,
nvl(trim(TAX_FORM_FILED),'-') TAX_FORM_FILED,
nvl(trim(NUMBER_EXEMPTIONS),'-') NUMBER_EXEMPTIONS,
nvl(AGI,0) AGI,
nvl(trim(DFLT_AGI_IND),'-') DFLT_AGI_IND,
nvl(TAXES_PAID,0) TAXES_PAID,
nvl(trim(DFLT_TAXES_PD_IND),'-') DFLT_TAXES_PD_IND,
nvl(STD_EARNED_INCOME,0) STD_EARNED_INCOME,
nvl(trim(DFLT_STD_INC_IND),'-') DFLT_STD_INC_IND,
nvl(SPS_EARNED_INCOME,0) SPS_EARNED_INCOME,
nvl(trim(DFLT_SPS_INC_IND),'-') DFLT_SPS_INC_IND,
nvl(SOC_SEC_BENEFITS,0) SOC_SEC_BENEFITS,
nvl(trim(DFLT_SS_BEN_IND),'-') DFLT_SS_BEN_IND,
nvl(AFDC_BENEFITS,0) AFDC_BENEFITS,
nvl(trim(DFLT_AFDC_BEN_IND),'-') DFLT_AFDC_BEN_IND,
nvl(CHILD_SUPPORT,0) CHILD_SUPPORT,
nvl(trim(DFLT_CHLD_SPPT_IND),'-') DFLT_CHLD_SPPT_IND,
nvl(UNTAXED_INCOME,0) UNTAXED_INCOME,
nvl(trim(DFLT_UNTXD_INC_IND),'-') DFLT_UNTXD_INC_IND,
nvl(CASH_SAVINGS,0) CASH_SAVINGS,
nvl(RE_INVEST_VALUE,0) RE_INVEST_VALUE,
nvl(RE_INVEST_DEBT,0) RE_INVEST_DEBT,
nvl(BUSINESS_VALUE,0) BUSINESS_VALUE,
nvl(BUSINESS_DEBT,0) BUSINESS_DEBT,
nvl(FARM_VALUE,0) FARM_VALUE,
nvl(FARM_DEBT,0) FARM_DEBT,
nvl(trim(CURRENCY_CD),'-') CURRENCY_CD,
nvl(trim(SCHOOL_CHOICE_1),'-') SCHOOL_CHOICE_1,
nvl(trim(HOUSING_CODE_1),'-') HOUSING_CODE_1,
nvl(trim(SCHOOL_CHOICE_2),'-') SCHOOL_CHOICE_2,
nvl(trim(HOUSING_CODE_2),'-') HOUSING_CODE_2,
nvl(trim(SCHOOL_CHOICE_3),'-') SCHOOL_CHOICE_3,
nvl(trim(HOUSING_CODE_3),'-') HOUSING_CODE_3,
nvl(trim(SCHOOL_CHOICE_4),'-') SCHOOL_CHOICE_4,
nvl(trim(HOUSING_CODE_4),'-') HOUSING_CODE_4,
nvl(trim(SCHOOL_CHOICE_5),'-') SCHOOL_CHOICE_5,
nvl(trim(HOUSING_CODE_5),'-') HOUSING_CODE_5,
nvl(trim(SCHOOL_CHOICE_6),'-') SCHOOL_CHOICE_6,
nvl(trim(HOUSING_CODE_6),'-') HOUSING_CODE_6,
nvl(trim(STATE_AGNCY_RLSE),'-') STATE_AGNCY_RLSE,
nvl(trim(SEL_SERV_REGISTER),'-') SEL_SERV_REGISTER,
nvl(trim(SIGNED_BY_APPLICNT),'-') SIGNED_BY_APPLICNT,
nvl(trim(SIGNED_BY_SPOUSE),'-') SIGNED_BY_SPOUSE,
nvl(trim(SIGNED_BY_FATHER),'-') SIGNED_BY_FATHER,
nvl(trim(SIGNED_BY_MOTHER),'-') SIGNED_BY_MOTHER,
nvl(trim(FIRST_BACH_DEGREE),'-') FIRST_BACH_DEGREE,
nvl(MONTHLY_VET_BEN,0) MONTHLY_VET_BEN,
nvl(trim(NUM_MONTH_VET_BEN),'-') NUM_MONTH_VET_BEN,
nvl(trim(INTERESTED_IN_WS),'-') INTERESTED_IN_WS,
nvl(trim(INTERESTED_IN_SL),'-') INTERESTED_IN_SL,
nvl(trim(INTERESTED_IN_PLUS),'-') INTERESTED_IN_PLUS,
nvl(trim(APP_SIGNED_BY),'-') APP_SIGNED_BY,
to_date(to_char(case when DT_APP_COMPLETED < '01-JAN-1800' then NULL else DT_APP_COMPLETED end,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') DT_APP_COMPLETED,
to_date(to_char(case when DT_GED_EARNED < '01-JAN-1800' then NULL else DT_GED_EARNED end,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') DT_GED_EARNED,
to_date(to_char(case when HS_GRAD_DT < '01-JAN-1800' then NULL else HS_GRAD_DT end,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') HS_GRAD_DT,
nvl(trim(ATTEND_SAME_COLL),'-') ATTEND_SAME_COLL,
nvl(trim(ENROLL_CURNT_SUM),'-') ENROLL_CURNT_SUM,
nvl(trim(ENROLL_FALL),'-') ENROLL_FALL,
nvl(trim(ENROLL_WINTER),'-') ENROLL_WINTER,
nvl(trim(ENROLL_SPRING),'-') ENROLL_SPRING,
nvl(trim(ENROLL_NEXT_SUM),'-') ENROLL_NEXT_SUM,
nvl(trim(DEGREE_CERTIF),'-') DEGREE_CERTIF,
nvl(trim(COURSE_OF_STUDY),'-') COURSE_OF_STUDY,
to_date(to_char(case when DT_EXPCT_TO_COMP < '01-JAN-1800' then NULL else DT_EXPCT_TO_COMP end,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') DT_EXPCT_TO_COMP,
nvl(trim(CURRENT_GRADE_LVL),'-') CURRENT_GRADE_LVL,
nvl(trim(PAY_NUM_DEPENDENTS),'-') PAY_NUM_DEPENDENTS,
nvl(TOTAL_FROM_WS3,0) TOTAL_FROM_WS3,
nvl(trim(DFLT_WS3_TOT_IND),'-') DFLT_WS3_TOT_IND,
nvl(trim(DEPNDNCY_STAT),'-') DEPNDNCY_STAT,
nvl(trim(PROJECTED_YR_INC),'-') PROJECTED_YR_INC,
nvl(trim(EARLY_ADMISSION),'-') EARLY_ADMISSION,
nvl(ERND_INC_CREDIT,0) ERND_INC_CREDIT,
nvl(trim(DFLT_EIC_IND),'-') DFLT_EIC_IND,
nvl(trim(GRADUATE),'-') GRADUATE,
nvl(EXP_TOT_WS3,0) EXP_TOT_WS3,
nvl(trim(DFLT_EXP_WS3_IND),'-') DFLT_EXP_WS3_IND,
nvl(trim(STATE_RESIDENCE),'-') STATE_RESIDENCE,
to_date(to_char(case when RESIDENCY_DT < '01-JAN-1800' then NULL else RESIDENCY_DT end,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') RESIDENCY_DT,
nvl(trim(DRIV_LIC_STATE),'-') DRIV_LIC_STATE,
nvl(trim(HS_GED_RCVD),'-') HS_GED_RCVD,
nvl(FISAP_TOT_INC,0) FISAP_TOT_INC,
nvl(trim(CITIZENSHIP_STATUS),'-') CITIZENSHIP_STATUS,
nvl(trim(LEGAL_RES_PRI_94),'-') LEGAL_RES_PRI_94,
nvl(trim(STUDENT_MALE),'-') STUDENT_MALE,
nvl(trim(TAX_RETURN_FILED),'-') TAX_RETURN_FILED,
nvl(trim(ELIG_FOR_1040A_EZ),'-') ELIG_FOR_1040A_EZ,
nvl(TOTAL_FROM_WKA,0) TOTAL_FROM_WKA,
nvl(INV_NET_WORTH,0) INV_NET_WORTH,
nvl(BUS_NET_WORTH,0) BUS_NET_WORTH,
nvl(FARM_NET_WORTH,0) FARM_NET_WORTH,
nvl(trim(STUDENT_HAVE_DL),'-') STUDENT_HAVE_DL,
nvl(trim(DRUG_OFFENSE_CONV),'-') DRUG_OFFENSE_CONV,
nvl(trim(LEGAL_RES_PRIOR),'-') LEGAL_RES_PRIOR,
nvl(trim(DFLT_WSA_TOT_IND),'-') DFLT_WSA_TOT_IND,
nvl(trim(DFLT_VETERAN_IND),'-') DFLT_VETERAN_IND,
nvl(trim(DFLT_CITIZEN_IND),'-') DFLT_CITIZEN_IND,
nvl(trim(IWD_PERM_ADDR02),'-') IWD_PERM_ADDR02,
nvl(trim(IWD_CITY),'-') IWD_CITY,
nvl(trim(IWD_STATE),'-') IWD_STATE,
nvl(trim(IWD_ZIP),'-') IWD_ZIP,
nvl(trim(IWD_PERM_PHONE),'-') IWD_PERM_PHONE,
nvl(trim(IWD_STD_LAST_NAME),'-') IWD_STD_LAST_NAME,
nvl(trim(IWD_STD_FIRST_NM02),'-') IWD_STD_FIRST_NM02,
nvl(trim(IWD_STU_MI),'-') IWD_STU_MI,
nvl(trim(SSN),'-') SSN,
to_date(to_char(case when BIRTHDATE < '01-JAN-1800' then NULL else BIRTHDATE end,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') BIRTHDATE,
nvl(trim(DRIVERS_LICENSE_NO),'-') DRIVERS_LICENSE_NO,
nvl(trim(IWD_STU_ALIEN_REG),'-') IWD_STU_ALIEN_REG,
nvl(trim(CHILDREN),'-') CHILDREN,
nvl(trim(DFLT_CHILDREN_IND),'-') DFLT_CHILDREN_IND,
nvl(TOTAL_FROM_WKC,0) TOTAL_FROM_WKC,
nvl(trim(DFLT_WKC_TOT_IND),'-') DFLT_WKC_TOT_IND,
nvl(trim(IWD_STD_EMAIL),'-') IWD_STD_EMAIL,
nvl(trim(BLANK_AGI),'-') BLANK_AGI,
nvl(trim(BLANK_TAXES_PAID),'-') BLANK_TAXES_PAID,
nvl(trim(BLANK_STD_EARN_INC),'-') BLANK_STD_EARN_INC,
nvl(trim(BLANK_SPS_EARN_INC),'-') BLANK_SPS_EARN_INC,
nvl(trim(BLANK_TOT_FROM_WS3),'-') BLANK_TOT_FROM_WS3,
nvl(trim(BLANK_TOT_FROM_WKA),'-') BLANK_TOT_FROM_WKA,
nvl(trim(BLANK_INV_NET_WRTH),'-') BLANK_INV_NET_WRTH,
nvl(trim(ISIR_STU_ENRL_STAT),'-') ISIR_STU_ENRL_STAT,
nvl(trim(BLANK_CASH_SAV),'-') BLANK_CASH_SAV,
nvl(trim(SFA_ACTIVE_DUTY),'-') SFA_ACTIVE_DUTY,
nvl(trim(SFA_SSI_INCOME),'-') SFA_SSI_INCOME,
nvl(trim(SFA_FOOD_STAMPS),'-') SFA_FOOD_STAMPS,
nvl(trim(SFA_SCHL_LUNCH_PRG),'-') SFA_SCHL_LUNCH_PRG,
nvl(trim(SFA_TANF_BENEFITS),'-') SFA_TANF_BENEFITS,
nvl(trim(SFA_WIC_BENEFITS),'-') SFA_WIC_BENEFITS,
nvl(trim(SFA_INTRSTD_IN_WSL),'-') SFA_INTRSTD_IN_WSL,
nvl(trim(SFA_STDNT_GENDER),'-') SFA_STDNT_GENDER,
nvl(trim(SFA_HS_DIP_EQUIV),'-') SFA_HS_DIP_EQUIV,
nvl(trim(SFA_SCHL_CHOICE_7),'-') SFA_SCHL_CHOICE_7,
nvl(trim(SFA_HOUSING_CODE7),'-') SFA_HOUSING_CODE7,
nvl(trim(SFA_SCHL_CHOICE_8),'-') SFA_SCHL_CHOICE_8,
nvl(trim(SFA_HOUSING_CODE8),'-') SFA_HOUSING_CODE8,
nvl(trim(SFA_SCHL_CHOICE_9),'-') SFA_SCHL_CHOICE_9,
nvl(trim(SFA_HOUSING_CODE9),'-') SFA_HOUSING_CODE9,
nvl(trim(SFA_SCHL_CHOICE_10),'-') SFA_SCHL_CHOICE_10,
nvl(trim(SFA_HOUSING_CODE10),'-') SFA_HOUSING_CODE10,
nvl(trim(SFA_TCH_COURSE_WRK),'-') SFA_TCH_COURSE_WRK,
nvl(trim(SFA_EMANCIPT_MINOR),'-') SFA_EMANCIPT_MINOR,
nvl(trim(SFA_LEGAL_GUARDIAN),'-') SFA_LEGAL_GUARDIAN,
nvl(trim(SFA_YOUTH_LIASON),'-') SFA_YOUTH_LIASON,
nvl(trim(SFA_YOUTH_HUD),'-') SFA_YOUTH_HUD,
nvl(trim(SFA_RISK_HOMELESS),'-') SFA_RISK_HOMELESS,
nvl(trim(SFA_DISLOCATE_WRK),'-') SFA_DISLOCATE_WRK,
nvl(SFA_EDU_CREDITS,0) SFA_EDU_CREDITS,
nvl(SFA_CHILD_SUP_PAID,0) SFA_CHILD_SUP_PAID,
nvl(SFA_NEED_EMPLOYMNT,0) SFA_NEED_EMPLOYMNT,
nvl(SFA_GRANT_AID,0) SFA_GRANT_AID,
nvl(SFA_COMBATPAY,0) SFA_COMBATPAY,
nvl(SFA_PENSION_PAY,0) SFA_PENSION_PAY,
nvl(SFA_IRA_PAY,0) SFA_IRA_PAY,
nvl(SFA_CHILD_SUP_RECV,0) SFA_CHILD_SUP_RECV,
nvl(SFA_INTERST_INCOME,0) SFA_INTERST_INCOME,
nvl(SFA_IRA_DIST,0) SFA_IRA_DIST,
nvl(SFA_UNTAX_PENSION,0) SFA_UNTAX_PENSION,
nvl(SFA_MILITARY_ALLOW,0) SFA_MILITARY_ALLOW,
nvl(SFA_VET_NONEDU_BEN,0) SFA_VET_NONEDU_BEN,
nvl(SFA_UNTAX_INCOME,0) SFA_UNTAX_INCOME,
nvl(SFA_NON_REP_MONEY,0) SFA_NON_REP_MONEY,
nvl(trim(SFA_RECV_VET_BEN),'-') SFA_RECV_VET_BEN,
nvl(trim(SFA_VET_BEN_TYPE),'-') SFA_VET_BEN_TYPE,
nvl(SFA_COOP_EARN,0) SFA_COOP_EARN,
nvl(trim(SFA_DFLT_YOUTH_SCH),'-') SFA_DFLT_YOUTH_SCH,
nvl(trim(SFA_DFLT_YOUTH_HUD),'-') SFA_DFLT_YOUTH_HUD,
nvl(trim(SFA_DFLT_RISK_HOME),'-') SFA_DFLT_RISK_HOME,
nvl(trim(SFA_BLANK_BUSNET),'-') SFA_BLANK_BUSNET,
nvl(trim(SFA_BLANK_EDUCREDT),'-') SFA_BLANK_EDUCREDT,
nvl(trim(SFA_BLANK_CHILDSUP),'-') SFA_BLANK_CHILDSUP,
nvl(trim(SFA_BLANK_NEEDEMPL),'-') SFA_BLANK_NEEDEMPL,
nvl(trim(SFA_BLANK_GRANTAID),'-') SFA_BLANK_GRANTAID,
nvl(trim(SFA_BLANK_COMBAT),'-') SFA_BLANK_COMBAT,
nvl(trim(SFA_BLANK_COOPEARN),'-') SFA_BLANK_COOPEARN,
nvl(trim(SFA_BLANK_PENSION),'-') SFA_BLANK_PENSION,
nvl(trim(SFA_BLANK_IRA_PAY),'-') SFA_BLANK_IRA_PAY,
nvl(trim(SFA_BLANK_CHILDREC),'-') SFA_BLANK_CHILDREC,
nvl(trim(SFA_BLANK_INT_INC),'-') SFA_BLANK_INT_INC,
nvl(trim(SFA_BLANK_IRA_DIST),'-') SFA_BLANK_IRA_DIST,
nvl(trim(SFA_BLANK_UNTAXPEN),'-') SFA_BLANK_UNTAXPEN,
nvl(trim(SFA_BLANK_MILITARY),'-') SFA_BLANK_MILITARY,
nvl(trim(SFA_BLANK_VET_NON),'-') SFA_BLANK_VET_NON,
nvl(trim(SFA_BLANK_UNTAXINC),'-') SFA_BLANK_UNTAXINC,
nvl(trim(SFA_BLANK_NON_REP),'-') SFA_BLANK_NON_REP,
nvl(trim(SFA_HIGH_SCHL_NAME),'-') SFA_HIGH_SCHL_NAME,
nvl(trim(SFA_HIGH_SCHL_CITY),'-') SFA_HIGH_SCHL_CITY,
nvl(trim(SFA_HIGH_SCHL_STAT),'-') SFA_HIGH_SCHL_STAT,
nvl(trim(SFA_HIGH_SCHL_CODE),'-') SFA_HIGH_SCHL_CODE,
nvl(trim(SFA_STU_ASSET_THRS),'-') SFA_STU_ASSET_THRS,
nvl(trim(SFA_DFLT_ASM_ASSET),'-') SFA_DFLT_ASM_ASSET,
nvl(trim(SFA_STU_TAX_RET),'-') SFA_STU_TAX_RET
from SYSADM.PS_ISIR_STUDENT@AMSOURCE S
where ORA_ROWSCN > (select OLD_MAX_SCN from AMSTG_OWNER.UM_STAGE_JOBS where TABLE_NAME = 'PS_ISIR_STUDENT') 
 and EMPLID between '00000000' and '99999999'
   and length(EMPLID) = 8 
) S
   on (
T.EMPLID = S.EMPLID and
T.INSTITUTION = S.INSTITUTION and
T.AID_YEAR = S.AID_YEAR and
T.EFFDT = S.EFFDT and
T.EFFSEQ = S.EFFSEQ and
T.TABLE_ID = S.TABLE_ID and
T.SRC_SYS_ID = 'CS90')
when matched then update set
T.NUM_FAMILY_MEMBERS = S.NUM_FAMILY_MEMBERS,
T.DFLT_NUM_FAM_IND = S.DFLT_NUM_FAM_IND,
T.NUMBER_IN_COLLEGE = S.NUMBER_IN_COLLEGE,
T.DFLT_NUM_COLL_IND = S.DFLT_NUM_COLL_IND,
T.DOB_PRIOR = S.DOB_PRIOR,
T.DFLT_DOB_PRIOR_IND = S.DFLT_DOB_PRIOR_IND,
T.VETERAN = S.VETERAN,
T.GRADUATE_STUDENT = S.GRADUATE_STUDENT,
T.MARRIED = S.MARRIED,
T.DFLT_MARRIED_IND = S.DFLT_MARRIED_IND,
T.MARITAL_STAT = S.MARITAL_STAT,
T.MAR_STATUS_DT = S.MAR_STATUS_DT,
T.DFLT_MAR_STAT_IND = S.DFLT_MAR_STAT_IND,
T.ORPHAN = S.ORPHAN,
T.DEPENDENTS = S.DEPENDENTS,
T.DFLT_DEPEND_IND = S.DFLT_DEPEND_IND,
T.TAX_FORM_FILED = S.TAX_FORM_FILED,
T.NUMBER_EXEMPTIONS = S.NUMBER_EXEMPTIONS,
T.AGI = S.AGI,
T.DFLT_AGI_IND = S.DFLT_AGI_IND,
T.TAXES_PAID = S.TAXES_PAID,
T.DFLT_TAXES_PD_IND = S.DFLT_TAXES_PD_IND,
T.STD_EARNED_INCOME = S.STD_EARNED_INCOME,
T.DFLT_STD_INC_IND = S.DFLT_STD_INC_IND,
T.SPS_EARNED_INCOME = S.SPS_EARNED_INCOME,
T.DFLT_SPS_INC_IND = S.DFLT_SPS_INC_IND,
T.SOC_SEC_BENEFITS = S.SOC_SEC_BENEFITS,
T.DFLT_SS_BEN_IND = S.DFLT_SS_BEN_IND,
T.AFDC_BENEFITS = S.AFDC_BENEFITS,
T.DFLT_AFDC_BEN_IND = S.DFLT_AFDC_BEN_IND,
T.CHILD_SUPPORT = S.CHILD_SUPPORT,
T.DFLT_CHLD_SPPT_IND = S.DFLT_CHLD_SPPT_IND,
T.UNTAXED_INCOME = S.UNTAXED_INCOME,
T.DFLT_UNTXD_INC_IND = S.DFLT_UNTXD_INC_IND,
T.CASH_SAVINGS = S.CASH_SAVINGS,
T.RE_INVEST_VALUE = S.RE_INVEST_VALUE,
T.RE_INVEST_DEBT = S.RE_INVEST_DEBT,
T.BUSINESS_VALUE = S.BUSINESS_VALUE,
T.BUSINESS_DEBT = S.BUSINESS_DEBT,
T.FARM_VALUE = S.FARM_VALUE,
T.FARM_DEBT = S.FARM_DEBT,
T.CURRENCY_CD = S.CURRENCY_CD,
T.SCHOOL_CHOICE_1 = S.SCHOOL_CHOICE_1,
T.HOUSING_CODE_1 = S.HOUSING_CODE_1,
T.SCHOOL_CHOICE_2 = S.SCHOOL_CHOICE_2,
T.HOUSING_CODE_2 = S.HOUSING_CODE_2,
T.SCHOOL_CHOICE_3 = S.SCHOOL_CHOICE_3,
T.HOUSING_CODE_3 = S.HOUSING_CODE_3,
T.SCHOOL_CHOICE_4 = S.SCHOOL_CHOICE_4,
T.HOUSING_CODE_4 = S.HOUSING_CODE_4,
T.SCHOOL_CHOICE_5 = S.SCHOOL_CHOICE_5,
T.HOUSING_CODE_5 = S.HOUSING_CODE_5,
T.SCHOOL_CHOICE_6 = S.SCHOOL_CHOICE_6,
T.HOUSING_CODE_6 = S.HOUSING_CODE_6,
T.STATE_AGNCY_RLSE = S.STATE_AGNCY_RLSE,
T.SEL_SERV_REGISTER = S.SEL_SERV_REGISTER,
T.SIGNED_BY_APPLICNT = S.SIGNED_BY_APPLICNT,
T.SIGNED_BY_SPOUSE = S.SIGNED_BY_SPOUSE,
T.SIGNED_BY_FATHER = S.SIGNED_BY_FATHER,
T.SIGNED_BY_MOTHER = S.SIGNED_BY_MOTHER,
T.FIRST_BACH_DEGREE = S.FIRST_BACH_DEGREE,
T.MONTHLY_VET_BEN = S.MONTHLY_VET_BEN,
T.NUM_MONTH_VET_BEN = S.NUM_MONTH_VET_BEN,
T.INTERESTED_IN_WS = S.INTERESTED_IN_WS,
T.INTERESTED_IN_SL = S.INTERESTED_IN_SL,
T.INTERESTED_IN_PLUS = S.INTERESTED_IN_PLUS,
T.APP_SIGNED_BY = S.APP_SIGNED_BY,
T.DT_APP_COMPLETED = S.DT_APP_COMPLETED,
T.DT_GED_EARNED = S.DT_GED_EARNED,
T.HS_GRAD_DT = S.HS_GRAD_DT,
T.ATTEND_SAME_COLL = S.ATTEND_SAME_COLL,
T.ENROLL_CURNT_SUM = S.ENROLL_CURNT_SUM,
T.ENROLL_FALL = S.ENROLL_FALL,
T.ENROLL_WINTER = S.ENROLL_WINTER,
T.ENROLL_SPRING = S.ENROLL_SPRING,
T.ENROLL_NEXT_SUM = S.ENROLL_NEXT_SUM,
T.DEGREE_CERTIF = S.DEGREE_CERTIF,
T.COURSE_OF_STUDY = S.COURSE_OF_STUDY,
T.DT_EXPCT_TO_COMP = S.DT_EXPCT_TO_COMP,
T.CURRENT_GRADE_LVL = S.CURRENT_GRADE_LVL,
T.PAY_NUM_DEPENDENTS = S.PAY_NUM_DEPENDENTS,
T.TOTAL_FROM_WS3 = S.TOTAL_FROM_WS3,
T.DFLT_WS3_TOT_IND = S.DFLT_WS3_TOT_IND,
T.DEPNDNCY_STAT = S.DEPNDNCY_STAT,
T.PROJECTED_YR_INC = S.PROJECTED_YR_INC,
T.EARLY_ADMISSION = S.EARLY_ADMISSION,
T.ERND_INC_CREDIT = S.ERND_INC_CREDIT,
T.DFLT_EIC_IND = S.DFLT_EIC_IND,
T.GRADUATE = S.GRADUATE,
T.EXP_TOT_WS3 = S.EXP_TOT_WS3,
T.DFLT_EXP_WS3_IND = S.DFLT_EXP_WS3_IND,
T.STATE_RESIDENCE = S.STATE_RESIDENCE,
T.RESIDENCY_DT = S.RESIDENCY_DT,
T.DRIV_LIC_STATE = S.DRIV_LIC_STATE,
T.HS_GED_RCVD = S.HS_GED_RCVD,
T.FISAP_TOT_INC = S.FISAP_TOT_INC,
T.CITIZENSHIP_STATUS = S.CITIZENSHIP_STATUS,
T.LEGAL_RES_PRI_94 = S.LEGAL_RES_PRI_94,
T.STUDENT_MALE = S.STUDENT_MALE,
T.TAX_RETURN_FILED = S.TAX_RETURN_FILED,
T.ELIG_FOR_1040A_EZ = S.ELIG_FOR_1040A_EZ,
T.TOTAL_FROM_WKA = S.TOTAL_FROM_WKA,
T.INV_NET_WORTH = S.INV_NET_WORTH,
T.BUS_NET_WORTH = S.BUS_NET_WORTH,
T.FARM_NET_WORTH = S.FARM_NET_WORTH,
T.STUDENT_HAVE_DL = S.STUDENT_HAVE_DL,
T.DRUG_OFFENSE_CONV = S.DRUG_OFFENSE_CONV,
T.LEGAL_RES_PRIOR = S.LEGAL_RES_PRIOR,
T.DFLT_WSA_TOT_IND = S.DFLT_WSA_TOT_IND,
T.DFLT_VETERAN_IND = S.DFLT_VETERAN_IND,
T.DFLT_CITIZEN_IND = S.DFLT_CITIZEN_IND,
T.IWD_PERM_ADDR02 = S.IWD_PERM_ADDR02,
T.IWD_CITY = S.IWD_CITY,
T.IWD_STATE = S.IWD_STATE,
T.IWD_ZIP = S.IWD_ZIP,
T.IWD_PERM_PHONE = S.IWD_PERM_PHONE,
T.IWD_STD_LAST_NAME = S.IWD_STD_LAST_NAME,
T.IWD_STD_FIRST_NM02 = S.IWD_STD_FIRST_NM02,
T.IWD_STU_MI = S.IWD_STU_MI,
T.SSN = S.SSN,
T.BIRTHDATE = S.BIRTHDATE,
T.DRIVERS_LICENSE_NO = S.DRIVERS_LICENSE_NO,
T.IWD_STU_ALIEN_REG = S.IWD_STU_ALIEN_REG,
T.CHILDREN = S.CHILDREN,
T.DFLT_CHILDREN_IND = S.DFLT_CHILDREN_IND,
T.TOTAL_FROM_WKC = S.TOTAL_FROM_WKC,
T.DFLT_WKC_TOT_IND = S.DFLT_WKC_TOT_IND,
T.IWD_STD_EMAIL = S.IWD_STD_EMAIL,
T.BLANK_AGI = S.BLANK_AGI,
T.BLANK_TAXES_PAID = S.BLANK_TAXES_PAID,
T.BLANK_STD_EARN_INC = S.BLANK_STD_EARN_INC,
T.BLANK_SPS_EARN_INC = S.BLANK_SPS_EARN_INC,
T.BLANK_TOT_FROM_WS3 = S.BLANK_TOT_FROM_WS3,
T.BLANK_TOT_FROM_WKA = S.BLANK_TOT_FROM_WKA,
T.BLANK_INV_NET_WRTH = S.BLANK_INV_NET_WRTH,
T.ISIR_STU_ENRL_STAT = S.ISIR_STU_ENRL_STAT,
T.BLANK_CASH_SAV = S.BLANK_CASH_SAV,
T.SFA_ACTIVE_DUTY = S.SFA_ACTIVE_DUTY,
T.SFA_SSI_INCOME = S.SFA_SSI_INCOME,
T.SFA_FOOD_STAMPS = S.SFA_FOOD_STAMPS,
T.SFA_SCHL_LUNCH_PRG = S.SFA_SCHL_LUNCH_PRG,
T.SFA_TANF_BENEFITS = S.SFA_TANF_BENEFITS,
T.SFA_WIC_BENEFITS = S.SFA_WIC_BENEFITS,
T.SFA_INTRSTD_IN_WSL = S.SFA_INTRSTD_IN_WSL,
T.SFA_STDNT_GENDER = S.SFA_STDNT_GENDER,
T.SFA_HS_DIP_EQUIV = S.SFA_HS_DIP_EQUIV,
T.SFA_SCHL_CHOICE_7 = S.SFA_SCHL_CHOICE_7,
T.SFA_HOUSING_CODE7 = S.SFA_HOUSING_CODE7,
T.SFA_SCHL_CHOICE_8 = S.SFA_SCHL_CHOICE_8,
T.SFA_HOUSING_CODE8 = S.SFA_HOUSING_CODE8,
T.SFA_SCHL_CHOICE_9 = S.SFA_SCHL_CHOICE_9,
T.SFA_HOUSING_CODE9 = S.SFA_HOUSING_CODE9,
T.SFA_SCHL_CHOICE_10 = S.SFA_SCHL_CHOICE_10,
T.SFA_HOUSING_CODE10 = S.SFA_HOUSING_CODE10,
T.SFA_TCH_COURSE_WRK = S.SFA_TCH_COURSE_WRK,
T.SFA_EMANCIPT_MINOR = S.SFA_EMANCIPT_MINOR,
T.SFA_LEGAL_GUARDIAN = S.SFA_LEGAL_GUARDIAN,
T.SFA_YOUTH_LIASON = S.SFA_YOUTH_LIASON,
T.SFA_YOUTH_HUD = S.SFA_YOUTH_HUD,
T.SFA_RISK_HOMELESS = S.SFA_RISK_HOMELESS,
T.SFA_DISLOCATE_WRK = S.SFA_DISLOCATE_WRK,
T.SFA_EDU_CREDITS = S.SFA_EDU_CREDITS,
T.SFA_CHILD_SUP_PAID = S.SFA_CHILD_SUP_PAID,
T.SFA_NEED_EMPLOYMNT = S.SFA_NEED_EMPLOYMNT,
T.SFA_GRANT_AID = S.SFA_GRANT_AID,
T.SFA_COMBATPAY = S.SFA_COMBATPAY,
T.SFA_PENSION_PAY = S.SFA_PENSION_PAY,
T.SFA_IRA_PAY = S.SFA_IRA_PAY,
T.SFA_CHILD_SUP_RECV = S.SFA_CHILD_SUP_RECV,
T.SFA_INTERST_INCOME = S.SFA_INTERST_INCOME,
T.SFA_IRA_DIST = S.SFA_IRA_DIST,
T.SFA_UNTAX_PENSION = S.SFA_UNTAX_PENSION,
T.SFA_MILITARY_ALLOW = S.SFA_MILITARY_ALLOW,
T.SFA_VET_NONEDU_BEN = S.SFA_VET_NONEDU_BEN,
T.SFA_UNTAX_INCOME = S.SFA_UNTAX_INCOME,
T.SFA_NON_REP_MONEY = S.SFA_NON_REP_MONEY,
T.SFA_RECV_VET_BEN = S.SFA_RECV_VET_BEN,
T.SFA_VET_BEN_TYPE = S.SFA_VET_BEN_TYPE,
T.SFA_COOP_EARN = S.SFA_COOP_EARN,
T.SFA_DFLT_YOUTH_SCH = S.SFA_DFLT_YOUTH_SCH,
T.SFA_DFLT_YOUTH_HUD = S.SFA_DFLT_YOUTH_HUD,
T.SFA_DFLT_RISK_HOME = S.SFA_DFLT_RISK_HOME,
T.SFA_BLANK_BUSNET = S.SFA_BLANK_BUSNET,
T.SFA_BLANK_EDUCREDT = S.SFA_BLANK_EDUCREDT,
T.SFA_BLANK_CHILDSUP = S.SFA_BLANK_CHILDSUP,
T.SFA_BLANK_NEEDEMPL = S.SFA_BLANK_NEEDEMPL,
T.SFA_BLANK_GRANTAID = S.SFA_BLANK_GRANTAID,
T.SFA_BLANK_COMBAT = S.SFA_BLANK_COMBAT,
T.SFA_BLANK_COOPEARN = S.SFA_BLANK_COOPEARN,
T.SFA_BLANK_PENSION = S.SFA_BLANK_PENSION,
T.SFA_BLANK_IRA_PAY = S.SFA_BLANK_IRA_PAY,
T.SFA_BLANK_CHILDREC = S.SFA_BLANK_CHILDREC,
T.SFA_BLANK_INT_INC = S.SFA_BLANK_INT_INC,
T.SFA_BLANK_IRA_DIST = S.SFA_BLANK_IRA_DIST,
T.SFA_BLANK_UNTAXPEN = S.SFA_BLANK_UNTAXPEN,
T.SFA_BLANK_MILITARY = S.SFA_BLANK_MILITARY,
T.SFA_BLANK_VET_NON = S.SFA_BLANK_VET_NON,
T.SFA_BLANK_UNTAXINC = S.SFA_BLANK_UNTAXINC,
T.SFA_BLANK_NON_REP = S.SFA_BLANK_NON_REP,
T.SFA_HIGH_SCHL_NAME = S.SFA_HIGH_SCHL_NAME,
T.SFA_HIGH_SCHL_CITY = S.SFA_HIGH_SCHL_CITY,
T.SFA_HIGH_SCHL_STAT = S.SFA_HIGH_SCHL_STAT,
T.SFA_HIGH_SCHL_CODE = S.SFA_HIGH_SCHL_CODE,
T.SFA_STU_ASSET_THRS = S.SFA_STU_ASSET_THRS,
T.SFA_DFLT_ASM_ASSET = S.SFA_DFLT_ASM_ASSET,
T.SFA_STU_TAX_RET = S.SFA_STU_TAX_RET,
T.DATA_ORIGIN = 'S',
T.LASTUPD_EW_DTTM = sysdate,
T.BATCH_SID   = 1234
where
T.NUM_FAMILY_MEMBERS <> S.NUM_FAMILY_MEMBERS or
T.DFLT_NUM_FAM_IND <> S.DFLT_NUM_FAM_IND or
T.NUMBER_IN_COLLEGE <> S.NUMBER_IN_COLLEGE or
T.DFLT_NUM_COLL_IND <> S.DFLT_NUM_COLL_IND or
T.DOB_PRIOR <> S.DOB_PRIOR or
T.DFLT_DOB_PRIOR_IND <> S.DFLT_DOB_PRIOR_IND or
T.VETERAN <> S.VETERAN or
T.GRADUATE_STUDENT <> S.GRADUATE_STUDENT or
T.MARRIED <> S.MARRIED or
T.DFLT_MARRIED_IND <> S.DFLT_MARRIED_IND or
T.MARITAL_STAT <> S.MARITAL_STAT or
nvl(trim(T.MAR_STATUS_DT),0) <> nvl(trim(S.MAR_STATUS_DT),0) or
T.DFLT_MAR_STAT_IND <> S.DFLT_MAR_STAT_IND or
T.ORPHAN <> S.ORPHAN or
T.DEPENDENTS <> S.DEPENDENTS or
T.DFLT_DEPEND_IND <> S.DFLT_DEPEND_IND or
T.TAX_FORM_FILED <> S.TAX_FORM_FILED or
T.NUMBER_EXEMPTIONS <> S.NUMBER_EXEMPTIONS or
T.AGI <> S.AGI or
T.DFLT_AGI_IND <> S.DFLT_AGI_IND or
T.TAXES_PAID <> S.TAXES_PAID or
T.DFLT_TAXES_PD_IND <> S.DFLT_TAXES_PD_IND or
T.STD_EARNED_INCOME <> S.STD_EARNED_INCOME or
T.DFLT_STD_INC_IND <> S.DFLT_STD_INC_IND or
T.SPS_EARNED_INCOME <> S.SPS_EARNED_INCOME or
T.DFLT_SPS_INC_IND <> S.DFLT_SPS_INC_IND or
T.SOC_SEC_BENEFITS <> S.SOC_SEC_BENEFITS or
T.DFLT_SS_BEN_IND <> S.DFLT_SS_BEN_IND or
T.AFDC_BENEFITS <> S.AFDC_BENEFITS or
T.DFLT_AFDC_BEN_IND <> S.DFLT_AFDC_BEN_IND or
T.CHILD_SUPPORT <> S.CHILD_SUPPORT or
T.DFLT_CHLD_SPPT_IND <> S.DFLT_CHLD_SPPT_IND or
T.UNTAXED_INCOME <> S.UNTAXED_INCOME or
T.DFLT_UNTXD_INC_IND <> S.DFLT_UNTXD_INC_IND or
T.CASH_SAVINGS <> S.CASH_SAVINGS or
T.RE_INVEST_VALUE <> S.RE_INVEST_VALUE or
T.RE_INVEST_DEBT <> S.RE_INVEST_DEBT or
T.BUSINESS_VALUE <> S.BUSINESS_VALUE or
T.BUSINESS_DEBT <> S.BUSINESS_DEBT or
T.FARM_VALUE <> S.FARM_VALUE or
T.FARM_DEBT <> S.FARM_DEBT or
T.CURRENCY_CD <> S.CURRENCY_CD or
T.SCHOOL_CHOICE_1 <> S.SCHOOL_CHOICE_1 or
T.HOUSING_CODE_1 <> S.HOUSING_CODE_1 or
T.SCHOOL_CHOICE_2 <> S.SCHOOL_CHOICE_2 or
T.HOUSING_CODE_2 <> S.HOUSING_CODE_2 or
T.SCHOOL_CHOICE_3 <> S.SCHOOL_CHOICE_3 or
T.HOUSING_CODE_3 <> S.HOUSING_CODE_3 or
T.SCHOOL_CHOICE_4 <> S.SCHOOL_CHOICE_4 or
T.HOUSING_CODE_4 <> S.HOUSING_CODE_4 or
T.SCHOOL_CHOICE_5 <> S.SCHOOL_CHOICE_5 or
T.HOUSING_CODE_5 <> S.HOUSING_CODE_5 or
T.SCHOOL_CHOICE_6 <> S.SCHOOL_CHOICE_6 or
T.HOUSING_CODE_6 <> S.HOUSING_CODE_6 or
T.STATE_AGNCY_RLSE <> S.STATE_AGNCY_RLSE or
T.SEL_SERV_REGISTER <> S.SEL_SERV_REGISTER or
T.SIGNED_BY_APPLICNT <> S.SIGNED_BY_APPLICNT or
T.SIGNED_BY_SPOUSE <> S.SIGNED_BY_SPOUSE or
T.SIGNED_BY_FATHER <> S.SIGNED_BY_FATHER or
T.SIGNED_BY_MOTHER <> S.SIGNED_BY_MOTHER or
T.FIRST_BACH_DEGREE <> S.FIRST_BACH_DEGREE or
T.MONTHLY_VET_BEN <> S.MONTHLY_VET_BEN or
T.NUM_MONTH_VET_BEN <> S.NUM_MONTH_VET_BEN or
T.INTERESTED_IN_WS <> S.INTERESTED_IN_WS or
T.INTERESTED_IN_SL <> S.INTERESTED_IN_SL or
T.INTERESTED_IN_PLUS <> S.INTERESTED_IN_PLUS or
T.APP_SIGNED_BY <> S.APP_SIGNED_BY or
nvl(trim(T.DT_APP_COMPLETED),0) <> nvl(trim(S.DT_APP_COMPLETED),0) or
nvl(trim(T.DT_GED_EARNED),0) <> nvl(trim(S.DT_GED_EARNED),0) or
nvl(trim(T.HS_GRAD_DT),0) <> nvl(trim(S.HS_GRAD_DT),0) or
T.ATTEND_SAME_COLL <> S.ATTEND_SAME_COLL or
T.ENROLL_CURNT_SUM <> S.ENROLL_CURNT_SUM or
T.ENROLL_FALL <> S.ENROLL_FALL or
T.ENROLL_WINTER <> S.ENROLL_WINTER or
T.ENROLL_SPRING <> S.ENROLL_SPRING or
T.ENROLL_NEXT_SUM <> S.ENROLL_NEXT_SUM or
T.DEGREE_CERTIF <> S.DEGREE_CERTIF or
T.COURSE_OF_STUDY <> S.COURSE_OF_STUDY or
nvl(trim(T.DT_EXPCT_TO_COMP),0) <> nvl(trim(S.DT_EXPCT_TO_COMP),0) or
T.CURRENT_GRADE_LVL <> S.CURRENT_GRADE_LVL or
T.PAY_NUM_DEPENDENTS <> S.PAY_NUM_DEPENDENTS or
T.TOTAL_FROM_WS3 <> S.TOTAL_FROM_WS3 or
T.DFLT_WS3_TOT_IND <> S.DFLT_WS3_TOT_IND or
T.DEPNDNCY_STAT <> S.DEPNDNCY_STAT or
T.PROJECTED_YR_INC <> S.PROJECTED_YR_INC or
T.EARLY_ADMISSION <> S.EARLY_ADMISSION or
T.ERND_INC_CREDIT <> S.ERND_INC_CREDIT or
T.DFLT_EIC_IND <> S.DFLT_EIC_IND or
T.GRADUATE <> S.GRADUATE or
T.EXP_TOT_WS3 <> S.EXP_TOT_WS3 or
T.DFLT_EXP_WS3_IND <> S.DFLT_EXP_WS3_IND or
T.STATE_RESIDENCE <> S.STATE_RESIDENCE or
nvl(trim(T.RESIDENCY_DT),0) <> nvl(trim(S.RESIDENCY_DT),0) or
T.DRIV_LIC_STATE <> S.DRIV_LIC_STATE or
T.HS_GED_RCVD <> S.HS_GED_RCVD or
T.FISAP_TOT_INC <> S.FISAP_TOT_INC or
T.CITIZENSHIP_STATUS <> S.CITIZENSHIP_STATUS or
T.LEGAL_RES_PRI_94 <> S.LEGAL_RES_PRI_94 or
T.STUDENT_MALE <> S.STUDENT_MALE or
T.TAX_RETURN_FILED <> S.TAX_RETURN_FILED or
T.ELIG_FOR_1040A_EZ <> S.ELIG_FOR_1040A_EZ or
T.TOTAL_FROM_WKA <> S.TOTAL_FROM_WKA or
T.INV_NET_WORTH <> S.INV_NET_WORTH or
T.BUS_NET_WORTH <> S.BUS_NET_WORTH or
T.FARM_NET_WORTH <> S.FARM_NET_WORTH or
T.STUDENT_HAVE_DL <> S.STUDENT_HAVE_DL or
T.DRUG_OFFENSE_CONV <> S.DRUG_OFFENSE_CONV or
T.LEGAL_RES_PRIOR <> S.LEGAL_RES_PRIOR or
T.DFLT_WSA_TOT_IND <> S.DFLT_WSA_TOT_IND or
T.DFLT_VETERAN_IND <> S.DFLT_VETERAN_IND or
T.DFLT_CITIZEN_IND <> S.DFLT_CITIZEN_IND or
T.IWD_PERM_ADDR02 <> S.IWD_PERM_ADDR02 or
T.IWD_CITY <> S.IWD_CITY or
T.IWD_STATE <> S.IWD_STATE or
T.IWD_ZIP <> S.IWD_ZIP or
T.IWD_PERM_PHONE <> S.IWD_PERM_PHONE or
T.IWD_STD_LAST_NAME <> S.IWD_STD_LAST_NAME or
T.IWD_STD_FIRST_NM02 <> S.IWD_STD_FIRST_NM02 or
T.IWD_STU_MI <> S.IWD_STU_MI or
T.SSN <> S.SSN or
nvl(trim(T.BIRTHDATE),0) <> nvl(trim(S.BIRTHDATE),0) or
T.DRIVERS_LICENSE_NO <> S.DRIVERS_LICENSE_NO or
T.IWD_STU_ALIEN_REG <> S.IWD_STU_ALIEN_REG or
T.CHILDREN <> S.CHILDREN or
T.DFLT_CHILDREN_IND <> S.DFLT_CHILDREN_IND or
T.TOTAL_FROM_WKC <> S.TOTAL_FROM_WKC or
T.DFLT_WKC_TOT_IND <> S.DFLT_WKC_TOT_IND or
T.IWD_STD_EMAIL <> S.IWD_STD_EMAIL or
T.BLANK_AGI <> S.BLANK_AGI or
T.BLANK_TAXES_PAID <> S.BLANK_TAXES_PAID or
T.BLANK_STD_EARN_INC <> S.BLANK_STD_EARN_INC or
T.BLANK_SPS_EARN_INC <> S.BLANK_SPS_EARN_INC or
T.BLANK_TOT_FROM_WS3 <> S.BLANK_TOT_FROM_WS3 or
T.BLANK_TOT_FROM_WKA <> S.BLANK_TOT_FROM_WKA or
T.BLANK_INV_NET_WRTH <> S.BLANK_INV_NET_WRTH or
T.ISIR_STU_ENRL_STAT <> S.ISIR_STU_ENRL_STAT or
T.BLANK_CASH_SAV <> S.BLANK_CASH_SAV or
T.SFA_ACTIVE_DUTY <> S.SFA_ACTIVE_DUTY or
T.SFA_SSI_INCOME <> S.SFA_SSI_INCOME or
T.SFA_FOOD_STAMPS <> S.SFA_FOOD_STAMPS or
T.SFA_SCHL_LUNCH_PRG <> S.SFA_SCHL_LUNCH_PRG or
T.SFA_TANF_BENEFITS <> S.SFA_TANF_BENEFITS or
T.SFA_WIC_BENEFITS <> S.SFA_WIC_BENEFITS or
T.SFA_INTRSTD_IN_WSL <> S.SFA_INTRSTD_IN_WSL or
T.SFA_STDNT_GENDER <> S.SFA_STDNT_GENDER or
T.SFA_HS_DIP_EQUIV <> S.SFA_HS_DIP_EQUIV or
T.SFA_SCHL_CHOICE_7 <> S.SFA_SCHL_CHOICE_7 or
T.SFA_HOUSING_CODE7 <> S.SFA_HOUSING_CODE7 or
T.SFA_SCHL_CHOICE_8 <> S.SFA_SCHL_CHOICE_8 or
T.SFA_HOUSING_CODE8 <> S.SFA_HOUSING_CODE8 or
T.SFA_SCHL_CHOICE_9 <> S.SFA_SCHL_CHOICE_9 or
T.SFA_HOUSING_CODE9 <> S.SFA_HOUSING_CODE9 or
T.SFA_SCHL_CHOICE_10 <> S.SFA_SCHL_CHOICE_10 or
T.SFA_HOUSING_CODE10 <> S.SFA_HOUSING_CODE10 or
T.SFA_TCH_COURSE_WRK <> S.SFA_TCH_COURSE_WRK or
T.SFA_EMANCIPT_MINOR <> S.SFA_EMANCIPT_MINOR or
T.SFA_LEGAL_GUARDIAN <> S.SFA_LEGAL_GUARDIAN or
T.SFA_YOUTH_LIASON <> S.SFA_YOUTH_LIASON or
T.SFA_YOUTH_HUD <> S.SFA_YOUTH_HUD or
T.SFA_RISK_HOMELESS <> S.SFA_RISK_HOMELESS or
T.SFA_DISLOCATE_WRK <> S.SFA_DISLOCATE_WRK or
T.SFA_EDU_CREDITS <> S.SFA_EDU_CREDITS or
T.SFA_CHILD_SUP_PAID <> S.SFA_CHILD_SUP_PAID or
T.SFA_NEED_EMPLOYMNT <> S.SFA_NEED_EMPLOYMNT or
T.SFA_GRANT_AID <> S.SFA_GRANT_AID or
T.SFA_COMBATPAY <> S.SFA_COMBATPAY or
T.SFA_PENSION_PAY <> S.SFA_PENSION_PAY or
T.SFA_IRA_PAY <> S.SFA_IRA_PAY or
T.SFA_CHILD_SUP_RECV <> S.SFA_CHILD_SUP_RECV or
T.SFA_INTERST_INCOME <> S.SFA_INTERST_INCOME or
T.SFA_IRA_DIST <> S.SFA_IRA_DIST or
T.SFA_UNTAX_PENSION <> S.SFA_UNTAX_PENSION or
T.SFA_MILITARY_ALLOW <> S.SFA_MILITARY_ALLOW or
T.SFA_VET_NONEDU_BEN <> S.SFA_VET_NONEDU_BEN or
T.SFA_UNTAX_INCOME <> S.SFA_UNTAX_INCOME or
T.SFA_NON_REP_MONEY <> S.SFA_NON_REP_MONEY or
T.SFA_RECV_VET_BEN <> S.SFA_RECV_VET_BEN or
T.SFA_VET_BEN_TYPE <> S.SFA_VET_BEN_TYPE or
T.SFA_COOP_EARN <> S.SFA_COOP_EARN or
T.SFA_DFLT_YOUTH_SCH <> S.SFA_DFLT_YOUTH_SCH or
T.SFA_DFLT_YOUTH_HUD <> S.SFA_DFLT_YOUTH_HUD or
T.SFA_DFLT_RISK_HOME <> S.SFA_DFLT_RISK_HOME or
T.SFA_BLANK_BUSNET <> S.SFA_BLANK_BUSNET or
T.SFA_BLANK_EDUCREDT <> S.SFA_BLANK_EDUCREDT or
T.SFA_BLANK_CHILDSUP <> S.SFA_BLANK_CHILDSUP or
T.SFA_BLANK_NEEDEMPL <> S.SFA_BLANK_NEEDEMPL or
T.SFA_BLANK_GRANTAID <> S.SFA_BLANK_GRANTAID or
T.SFA_BLANK_COMBAT <> S.SFA_BLANK_COMBAT or
T.SFA_BLANK_COOPEARN <> S.SFA_BLANK_COOPEARN or
T.SFA_BLANK_PENSION <> S.SFA_BLANK_PENSION or
T.SFA_BLANK_IRA_PAY <> S.SFA_BLANK_IRA_PAY or
T.SFA_BLANK_CHILDREC <> S.SFA_BLANK_CHILDREC or
T.SFA_BLANK_INT_INC <> S.SFA_BLANK_INT_INC or
T.SFA_BLANK_IRA_DIST <> S.SFA_BLANK_IRA_DIST or
T.SFA_BLANK_UNTAXPEN <> S.SFA_BLANK_UNTAXPEN or
T.SFA_BLANK_MILITARY <> S.SFA_BLANK_MILITARY or
T.SFA_BLANK_VET_NON <> S.SFA_BLANK_VET_NON or
T.SFA_BLANK_UNTAXINC <> S.SFA_BLANK_UNTAXINC or
T.SFA_BLANK_NON_REP <> S.SFA_BLANK_NON_REP or
T.SFA_HIGH_SCHL_NAME <> S.SFA_HIGH_SCHL_NAME or
T.SFA_HIGH_SCHL_CITY <> S.SFA_HIGH_SCHL_CITY or
T.SFA_HIGH_SCHL_STAT <> S.SFA_HIGH_SCHL_STAT or
T.SFA_HIGH_SCHL_CODE <> S.SFA_HIGH_SCHL_CODE or
T.SFA_STU_ASSET_THRS <> S.SFA_STU_ASSET_THRS or
T.SFA_DFLT_ASM_ASSET <> S.SFA_DFLT_ASM_ASSET or
T.SFA_STU_TAX_RET <> S.SFA_STU_TAX_RET or
T.DATA_ORIGIN = 'D'
when not matched then
insert (
T.EMPLID,
T.INSTITUTION,
T.AID_YEAR,
T.EFFDT,
T.EFFSEQ,
T.TABLE_ID,
T.SRC_SYS_ID,
T.NUM_FAMILY_MEMBERS,
T.DFLT_NUM_FAM_IND,
T.NUMBER_IN_COLLEGE,
T.DFLT_NUM_COLL_IND,
T.DOB_PRIOR,
T.DFLT_DOB_PRIOR_IND,
T.VETERAN,
T.GRADUATE_STUDENT,
T.MARRIED,
T.DFLT_MARRIED_IND,
T.MARITAL_STAT,
T.MAR_STATUS_DT,
T.DFLT_MAR_STAT_IND,
T.ORPHAN,
T.DEPENDENTS,
T.DFLT_DEPEND_IND,
T.TAX_FORM_FILED,
T.NUMBER_EXEMPTIONS,
T.AGI,
T.DFLT_AGI_IND,
T.TAXES_PAID,
T.DFLT_TAXES_PD_IND,
T.STD_EARNED_INCOME,
T.DFLT_STD_INC_IND,
T.SPS_EARNED_INCOME,
T.DFLT_SPS_INC_IND,
T.SOC_SEC_BENEFITS,
T.DFLT_SS_BEN_IND,
T.AFDC_BENEFITS,
T.DFLT_AFDC_BEN_IND,
T.CHILD_SUPPORT,
T.DFLT_CHLD_SPPT_IND,
T.UNTAXED_INCOME,
T.DFLT_UNTXD_INC_IND,
T.CASH_SAVINGS,
T.RE_INVEST_VALUE,
T.RE_INVEST_DEBT,
T.BUSINESS_VALUE,
T.BUSINESS_DEBT,
T.FARM_VALUE,
T.FARM_DEBT,
T.CURRENCY_CD,
T.SCHOOL_CHOICE_1,
T.HOUSING_CODE_1,
T.SCHOOL_CHOICE_2,
T.HOUSING_CODE_2,
T.SCHOOL_CHOICE_3,
T.HOUSING_CODE_3,
T.SCHOOL_CHOICE_4,
T.HOUSING_CODE_4,
T.SCHOOL_CHOICE_5,
T.HOUSING_CODE_5,
T.SCHOOL_CHOICE_6,
T.HOUSING_CODE_6,
T.STATE_AGNCY_RLSE,
T.SEL_SERV_REGISTER,
T.SIGNED_BY_APPLICNT,
T.SIGNED_BY_SPOUSE,
T.SIGNED_BY_FATHER,
T.SIGNED_BY_MOTHER,
T.FIRST_BACH_DEGREE,
T.MONTHLY_VET_BEN,
T.NUM_MONTH_VET_BEN,
T.INTERESTED_IN_WS,
T.INTERESTED_IN_SL,
T.INTERESTED_IN_PLUS,
T.APP_SIGNED_BY,
T.DT_APP_COMPLETED,
T.DT_GED_EARNED,
T.HS_GRAD_DT,
T.ATTEND_SAME_COLL,
T.ENROLL_CURNT_SUM,
T.ENROLL_FALL,
T.ENROLL_WINTER,
T.ENROLL_SPRING,
T.ENROLL_NEXT_SUM,
T.DEGREE_CERTIF,
T.COURSE_OF_STUDY,
T.DT_EXPCT_TO_COMP,
T.CURRENT_GRADE_LVL,
T.PAY_NUM_DEPENDENTS,
T.TOTAL_FROM_WS3,
T.DFLT_WS3_TOT_IND,
T.DEPNDNCY_STAT,
T.PROJECTED_YR_INC,
T.EARLY_ADMISSION,
T.ERND_INC_CREDIT,
T.DFLT_EIC_IND,
T.GRADUATE,
T.EXP_TOT_WS3,
T.DFLT_EXP_WS3_IND,
T.STATE_RESIDENCE,
T.RESIDENCY_DT,
T.DRIV_LIC_STATE,
T.HS_GED_RCVD,
T.FISAP_TOT_INC,
T.CITIZENSHIP_STATUS,
T.LEGAL_RES_PRI_94,
T.STUDENT_MALE,
T.TAX_RETURN_FILED,
T.ELIG_FOR_1040A_EZ,
T.TOTAL_FROM_WKA,
T.INV_NET_WORTH,
T.BUS_NET_WORTH,
T.FARM_NET_WORTH,
T.STUDENT_HAVE_DL,
T.DRUG_OFFENSE_CONV,
T.LEGAL_RES_PRIOR,
T.DFLT_WSA_TOT_IND,
T.DFLT_VETERAN_IND,
T.DFLT_CITIZEN_IND,
T.IWD_PERM_ADDR02,
T.IWD_CITY,
T.IWD_STATE,
T.IWD_ZIP,
T.IWD_PERM_PHONE,
T.IWD_STD_LAST_NAME,
T.IWD_STD_FIRST_NM02,
T.IWD_STU_MI,
T.SSN,
T.BIRTHDATE,
T.DRIVERS_LICENSE_NO,
T.IWD_STU_ALIEN_REG,
T.CHILDREN,
T.DFLT_CHILDREN_IND,
T.TOTAL_FROM_WKC,
T.DFLT_WKC_TOT_IND,
T.IWD_STD_EMAIL,
T.BLANK_AGI,
T.BLANK_TAXES_PAID,
T.BLANK_STD_EARN_INC,
T.BLANK_SPS_EARN_INC,
T.BLANK_TOT_FROM_WS3,
T.BLANK_TOT_FROM_WKA,
T.BLANK_INV_NET_WRTH,
T.ISIR_STU_ENRL_STAT,
T.BLANK_CASH_SAV,
T.SFA_ACTIVE_DUTY,
T.SFA_SSI_INCOME,
T.SFA_FOOD_STAMPS,
T.SFA_SCHL_LUNCH_PRG,
T.SFA_TANF_BENEFITS,
T.SFA_WIC_BENEFITS,
T.SFA_INTRSTD_IN_WSL,
T.SFA_STDNT_GENDER,
T.SFA_HS_DIP_EQUIV,
T.SFA_SCHL_CHOICE_7,
T.SFA_HOUSING_CODE7,
T.SFA_SCHL_CHOICE_8,
T.SFA_HOUSING_CODE8,
T.SFA_SCHL_CHOICE_9,
T.SFA_HOUSING_CODE9,
T.SFA_SCHL_CHOICE_10,
T.SFA_HOUSING_CODE10,
T.SFA_TCH_COURSE_WRK,
T.SFA_EMANCIPT_MINOR,
T.SFA_LEGAL_GUARDIAN,
T.SFA_YOUTH_LIASON,
T.SFA_YOUTH_HUD,
T.SFA_RISK_HOMELESS,
T.SFA_DISLOCATE_WRK,
T.SFA_EDU_CREDITS,
T.SFA_CHILD_SUP_PAID,
T.SFA_NEED_EMPLOYMNT,
T.SFA_GRANT_AID,
T.SFA_COMBATPAY,
T.SFA_PENSION_PAY,
T.SFA_IRA_PAY,
T.SFA_CHILD_SUP_RECV,
T.SFA_INTERST_INCOME,
T.SFA_IRA_DIST,
T.SFA_UNTAX_PENSION,
T.SFA_MILITARY_ALLOW,
T.SFA_VET_NONEDU_BEN,
T.SFA_UNTAX_INCOME,
T.SFA_NON_REP_MONEY,
T.SFA_RECV_VET_BEN,
T.SFA_VET_BEN_TYPE,
T.SFA_COOP_EARN,
T.SFA_DFLT_YOUTH_SCH,
T.SFA_DFLT_YOUTH_HUD,
T.SFA_DFLT_RISK_HOME,
T.SFA_BLANK_BUSNET,
T.SFA_BLANK_EDUCREDT,
T.SFA_BLANK_CHILDSUP,
T.SFA_BLANK_NEEDEMPL,
T.SFA_BLANK_GRANTAID,
T.SFA_BLANK_COMBAT,
T.SFA_BLANK_COOPEARN,
T.SFA_BLANK_PENSION,
T.SFA_BLANK_IRA_PAY,
T.SFA_BLANK_CHILDREC,
T.SFA_BLANK_INT_INC,
T.SFA_BLANK_IRA_DIST,
T.SFA_BLANK_UNTAXPEN,
T.SFA_BLANK_MILITARY,
T.SFA_BLANK_VET_NON,
T.SFA_BLANK_UNTAXINC,
T.SFA_BLANK_NON_REP,
T.SFA_HIGH_SCHL_NAME,
T.SFA_HIGH_SCHL_CITY,
T.SFA_HIGH_SCHL_STAT,
T.SFA_HIGH_SCHL_CODE,
T.SFA_STU_ASSET_THRS,
T.SFA_DFLT_ASM_ASSET,
T.SFA_STU_TAX_RET,
T.LOAD_ERROR,
T.DATA_ORIGIN,
T.CREATED_EW_DTTM,
T.LASTUPD_EW_DTTM,
T.BATCH_SID
)
values (
S.EMPLID,
S.INSTITUTION,
S.AID_YEAR,
S.EFFDT,
S.EFFSEQ,
S.TABLE_ID,
'CS90',
S.NUM_FAMILY_MEMBERS,
S.DFLT_NUM_FAM_IND,
S.NUMBER_IN_COLLEGE,
S.DFLT_NUM_COLL_IND,
S.DOB_PRIOR,
S.DFLT_DOB_PRIOR_IND,
S.VETERAN,
S.GRADUATE_STUDENT,
S.MARRIED,
S.DFLT_MARRIED_IND,
S.MARITAL_STAT,
S.MAR_STATUS_DT,
S.DFLT_MAR_STAT_IND,
S.ORPHAN,
S.DEPENDENTS,
S.DFLT_DEPEND_IND,
S.TAX_FORM_FILED,
S.NUMBER_EXEMPTIONS,
S.AGI,
S.DFLT_AGI_IND,
S.TAXES_PAID,
S.DFLT_TAXES_PD_IND,
S.STD_EARNED_INCOME,
S.DFLT_STD_INC_IND,
S.SPS_EARNED_INCOME,
S.DFLT_SPS_INC_IND,
S.SOC_SEC_BENEFITS,
S.DFLT_SS_BEN_IND,
S.AFDC_BENEFITS,
S.DFLT_AFDC_BEN_IND,
S.CHILD_SUPPORT,
S.DFLT_CHLD_SPPT_IND,
S.UNTAXED_INCOME,
S.DFLT_UNTXD_INC_IND,
S.CASH_SAVINGS,
S.RE_INVEST_VALUE,
S.RE_INVEST_DEBT,
S.BUSINESS_VALUE,
S.BUSINESS_DEBT,
S.FARM_VALUE,
S.FARM_DEBT,
S.CURRENCY_CD,
S.SCHOOL_CHOICE_1,
S.HOUSING_CODE_1,
S.SCHOOL_CHOICE_2,
S.HOUSING_CODE_2,
S.SCHOOL_CHOICE_3,
S.HOUSING_CODE_3,
S.SCHOOL_CHOICE_4,
S.HOUSING_CODE_4,
S.SCHOOL_CHOICE_5,
S.HOUSING_CODE_5,
S.SCHOOL_CHOICE_6,
S.HOUSING_CODE_6,
S.STATE_AGNCY_RLSE,
S.SEL_SERV_REGISTER,
S.SIGNED_BY_APPLICNT,
S.SIGNED_BY_SPOUSE,
S.SIGNED_BY_FATHER,
S.SIGNED_BY_MOTHER,
S.FIRST_BACH_DEGREE,
S.MONTHLY_VET_BEN,
S.NUM_MONTH_VET_BEN,
S.INTERESTED_IN_WS,
S.INTERESTED_IN_SL,
S.INTERESTED_IN_PLUS,
S.APP_SIGNED_BY,
S.DT_APP_COMPLETED,
S.DT_GED_EARNED,
S.HS_GRAD_DT,
S.ATTEND_SAME_COLL,
S.ENROLL_CURNT_SUM,
S.ENROLL_FALL,
S.ENROLL_WINTER,
S.ENROLL_SPRING,
S.ENROLL_NEXT_SUM,
S.DEGREE_CERTIF,
S.COURSE_OF_STUDY,
S.DT_EXPCT_TO_COMP,
S.CURRENT_GRADE_LVL,
S.PAY_NUM_DEPENDENTS,
S.TOTAL_FROM_WS3,
S.DFLT_WS3_TOT_IND,
S.DEPNDNCY_STAT,
S.PROJECTED_YR_INC,
S.EARLY_ADMISSION,
S.ERND_INC_CREDIT,
S.DFLT_EIC_IND,
S.GRADUATE,
S.EXP_TOT_WS3,
S.DFLT_EXP_WS3_IND,
S.STATE_RESIDENCE,
S.RESIDENCY_DT,
S.DRIV_LIC_STATE,
S.HS_GED_RCVD,
S.FISAP_TOT_INC,
S.CITIZENSHIP_STATUS,
S.LEGAL_RES_PRI_94,
S.STUDENT_MALE,
S.TAX_RETURN_FILED,
S.ELIG_FOR_1040A_EZ,
S.TOTAL_FROM_WKA,
S.INV_NET_WORTH,
S.BUS_NET_WORTH,
S.FARM_NET_WORTH,
S.STUDENT_HAVE_DL,
S.DRUG_OFFENSE_CONV,
S.LEGAL_RES_PRIOR,
S.DFLT_WSA_TOT_IND,
S.DFLT_VETERAN_IND,
S.DFLT_CITIZEN_IND,
S.IWD_PERM_ADDR02,
S.IWD_CITY,
S.IWD_STATE,
S.IWD_ZIP,
S.IWD_PERM_PHONE,
S.IWD_STD_LAST_NAME,
S.IWD_STD_FIRST_NM02,
S.IWD_STU_MI,
S.SSN,
S.BIRTHDATE,
S.DRIVERS_LICENSE_NO,
S.IWD_STU_ALIEN_REG,
S.CHILDREN,
S.DFLT_CHILDREN_IND,
S.TOTAL_FROM_WKC,
S.DFLT_WKC_TOT_IND,
S.IWD_STD_EMAIL,
S.BLANK_AGI,
S.BLANK_TAXES_PAID,
S.BLANK_STD_EARN_INC,
S.BLANK_SPS_EARN_INC,
S.BLANK_TOT_FROM_WS3,
S.BLANK_TOT_FROM_WKA,
S.BLANK_INV_NET_WRTH,
S.ISIR_STU_ENRL_STAT,
S.BLANK_CASH_SAV,
S.SFA_ACTIVE_DUTY,
S.SFA_SSI_INCOME,
S.SFA_FOOD_STAMPS,
S.SFA_SCHL_LUNCH_PRG,
S.SFA_TANF_BENEFITS,
S.SFA_WIC_BENEFITS,
S.SFA_INTRSTD_IN_WSL,
S.SFA_STDNT_GENDER,
S.SFA_HS_DIP_EQUIV,
S.SFA_SCHL_CHOICE_7,
S.SFA_HOUSING_CODE7,
S.SFA_SCHL_CHOICE_8,
S.SFA_HOUSING_CODE8,
S.SFA_SCHL_CHOICE_9,
S.SFA_HOUSING_CODE9,
S.SFA_SCHL_CHOICE_10,
S.SFA_HOUSING_CODE10,
S.SFA_TCH_COURSE_WRK,
S.SFA_EMANCIPT_MINOR,
S.SFA_LEGAL_GUARDIAN,
S.SFA_YOUTH_LIASON,
S.SFA_YOUTH_HUD,
S.SFA_RISK_HOMELESS,
S.SFA_DISLOCATE_WRK,
S.SFA_EDU_CREDITS,
S.SFA_CHILD_SUP_PAID,
S.SFA_NEED_EMPLOYMNT,
S.SFA_GRANT_AID,
S.SFA_COMBATPAY,
S.SFA_PENSION_PAY,
S.SFA_IRA_PAY,
S.SFA_CHILD_SUP_RECV,
S.SFA_INTERST_INCOME,
S.SFA_IRA_DIST,
S.SFA_UNTAX_PENSION,
S.SFA_MILITARY_ALLOW,
S.SFA_VET_NONEDU_BEN,
S.SFA_UNTAX_INCOME,
S.SFA_NON_REP_MONEY,
S.SFA_RECV_VET_BEN,
S.SFA_VET_BEN_TYPE,
S.SFA_COOP_EARN,
S.SFA_DFLT_YOUTH_SCH,
S.SFA_DFLT_YOUTH_HUD,
S.SFA_DFLT_RISK_HOME,
S.SFA_BLANK_BUSNET,
S.SFA_BLANK_EDUCREDT,
S.SFA_BLANK_CHILDSUP,
S.SFA_BLANK_NEEDEMPL,
S.SFA_BLANK_GRANTAID,
S.SFA_BLANK_COMBAT,
S.SFA_BLANK_COOPEARN,
S.SFA_BLANK_PENSION,
S.SFA_BLANK_IRA_PAY,
S.SFA_BLANK_CHILDREC,
S.SFA_BLANK_INT_INC,
S.SFA_BLANK_IRA_DIST,
S.SFA_BLANK_UNTAXPEN,
S.SFA_BLANK_MILITARY,
S.SFA_BLANK_VET_NON,
S.SFA_BLANK_UNTAXINC,
S.SFA_BLANK_NON_REP,
S.SFA_HIGH_SCHL_NAME,
S.SFA_HIGH_SCHL_CITY,
S.SFA_HIGH_SCHL_STAT,
S.SFA_HIGH_SCHL_CODE,
S.SFA_STU_ASSET_THRS,
S.SFA_DFLT_ASM_ASSET,
S.SFA_STU_TAX_RET,
'N',
'S',
sysdate,
sysdate,
1234);

strSqlCommand   := 'SET intRowCount';
intRowCount     := SQL%ROWCOUNT;

strSqlCommand := 'commit';
commit;

strMessage01    := '# of PS_ISIR_STUDENT rows merged: ' || TO_CHAR(intRowCount,'999,999,999,999');
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_DETAIL';
COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_DETAIL
        (
                i_TargetTableName   => 'PS_ISIR_STUDENT',
                i_Action            => 'MERGE',
                i_RowCount          => intRowCount
        );


strMessage01    := 'Updating AMSTG_OWNER.UM_STAGE_JOBS';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand   := 'update TABLE_STATUS on AMSTG_OWNER.UM_STAGE_JOBS';
update AMSTG_OWNER.UM_STAGE_JOBS
   set TABLE_STATUS = 'Deleting',
       OLD_MAX_SCN = NEW_MAX_SCN
 where TABLE_NAME = 'PS_ISIR_STUDENT';

strSqlCommand := 'commit';
commit;


strMessage01    := 'Updating DATA_ORIGIN on AMSTG_OWNER.PS_ISIR_STUDENT';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand   := 'update DATA_ORIGIN on AMSTG_OWNER.PS_ISIR_STUDENT';
update AMSTG_OWNER.PS_ISIR_STUDENT T
   set T.DATA_ORIGIN = 'D',
          T.LASTUPD_EW_DTTM = SYSDATE
 where T.DATA_ORIGIN <> 'D'
   and exists 
(select 1 from
(select EMPLID, INSTITUTION, AID_YEAR, EFFDT, EFFSEQ, TABLE_ID
   from AMSTG_OWNER.PS_ISIR_STUDENT T2
  where (select DELETE_FLG from AMSTG_OWNER.UM_STAGE_JOBS where TABLE_NAME = 'PS_ISIR_STUDENT') = 'Y'
  minus
 select nvl(trim(EMPLID),'-'), nvl(trim(INSTITUTION),'-'), nvl(trim(AID_YEAR),'-'), EFFDT, EFFSEQ, nvl(trim(TABLE_ID),'-')
   from SYSADM.PS_ISIR_STUDENT@AMSOURCE S2
  where (select DELETE_FLG from AMSTG_OWNER.UM_STAGE_JOBS where TABLE_NAME = 'PS_ISIR_STUDENT') = 'Y'
   ) S
 where T.EMPLID = S.EMPLID
   and T.INSTITUTION = S.INSTITUTION
   and T.AID_YEAR = S.AID_YEAR
   and T.EFFDT = S.EFFDT
   and T.EFFSEQ = S.EFFSEQ
   and T.TABLE_ID = S.TABLE_ID
   and T.SRC_SYS_ID = 'CS90' 
   ) 
;

strSqlCommand   := 'SET intRowCount';
intRowCount     := SQL%ROWCOUNT;

strSqlCommand := 'commit';
commit;

strMessage01    := '# of PS_ISIR_STUDENT rows updated: ' || TO_CHAR(intRowCount,'999,999,999,999');
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_DETAIL';
COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_DETAIL
        (
                i_TargetTableName   => 'PS_ISIR_STUDENT',
                i_Action            => 'UPDATE',
                i_RowCount          => intRowCount
        );


strMessage01    := 'Updating AMSTG_OWNER.UM_STAGE_JOBS';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand   := 'update END_DT on AMSTG_OWNER.UM_STAGE_JOBS';

update AMSTG_OWNER.UM_STAGE_JOBS
   set TABLE_STATUS = 'Complete',
       END_DT = SYSDATE
 where TABLE_NAME = 'PS_ISIR_STUDENT'
;

strSqlCommand := 'commit';
commit;


strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_SUCCESS';
COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_SUCCESS;

strMessage01    := strProcessName || ' is complete.';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);


EXCEPTION
    WHEN OTHERS THEN
        numSqlCode := SQLCODE;
        strSqlErrm := SQLERRM;

        ROLLBACK;
  
        strMessage01 := 'Error code: ' || TO_CHAR(SQLCODE) || ' Error Message: ' || SQLERRM;
        strMessage02 := TO_CHAR(SQLCODE);
  
        COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_FAILURE
                       (i_SqlCommand    => strSqlCommand,
                        i_ErrorText     => strMessage01,
                        i_ErrorCode     => strMessage02,
                        i_ErrorMessage  => strSqlErrm
                       );
               
        strMessage01 := 'Error...'
                        || strNewLine   || 'SQL Command:   ' || strSqlCommand
                        || strNewLine   || 'Error code:    ' || numSqlCode
                        || strNewLine   || 'Error Message: ' || strSqlErrm;

        COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);
        RAISE_APPLICATION_ERROR( -20001, strMessage01);

END AM_PS_ISIR_STUDENT_P;
/
