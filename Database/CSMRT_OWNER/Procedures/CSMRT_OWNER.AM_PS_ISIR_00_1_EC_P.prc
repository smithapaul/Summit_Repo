DROP PROCEDURE CSMRT_OWNER.AM_PS_ISIR_00_1_EC_P
/

--
-- AM_PS_ISIR_00_1_EC_P  (Procedure) 
--
CREATE OR REPLACE PROCEDURE CSMRT_OWNER.AM_PS_ISIR_00_1_EC_P IS

------------------------------------------------------------------------
-- George Adams
--
-- Loads stage table PS_TERM_FEE_TBL from PeopleSoft table PS_ISIR_00_1_EC.
--
-- V01  SMT-xxxx 04/04/2017,    Jim Doucette
--                              Converted from PS_ISIR_00_1_EC.SQL
--
------------------------------------------------------------------------

        strMartId                       Varchar2(50)    := 'CSW';
        strProcessName                  Varchar2(100)   := 'AM_PS_ISIR_00_1_EC';
        intProcessSid                   Integer;
        dtProcessStart                  Date            := SYSDATE;
        strMessage01                    Varchar2(4000);
        strMessage02                    Varchar2(512);
        strMessage03                    Varchar2(512)   :='';
        strNewLine                      Varchar2(2)     := chr(13) || chr(10);
        strSqlCommand                   Varchar2(32767) :='';
        strSqlDynamic                   Varchar2(32767) :='';
        strClientInfo                   Varchar2(100);
        intRowCount                     Integer;
        intTotalRowCount                Integer         := 0;
        numSqlCode                      Number;
        strSqlErrm                      Varchar2(4000);
        intTries                        Integer;

BEGIN
strSqlCommand := 'DBMS_APPLICATION_INFO.SET_CLIENT_INFO';
DBMS_APPLICATION_INFO.SET_CLIENT_INFO (strProcessName);

strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_INIT';
COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_INIT
        (
                i_MartId                => strMartId,
                i_ProcessName           => strProcessName,
                i_ProcessStartTime      => dtProcessStart,
                o_ProcessSid            => intProcessSid
        );

strMessage01    := 'Updating AMSTG_OWNER.UM_STAGE_JOBS';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);


strSqlCommand   := 'update START_DT on AMSTG_OWNER.UM_STAGE_JOBS';
update AMSTG_OWNER.UM_STAGE_JOBS
   set TABLE_STATUS = 'Reading',
       START_DT = sysdate,
       END_DT = NULL
 where TABLE_NAME = 'PS_ISIR_00_1_EC'
;

strSqlCommand := 'commit';
commit;


strSqlCommand   := 'update NEW_MAX_SCN on AMSTG_OWNER.UM_STAGE_JOBS';
update AMSTG_OWNER.UM_STAGE_JOBS
   set TABLE_STATUS = 'Merging',
       NEW_MAX_SCN = (select /*+ full(S) */ max(ORA_ROWSCN) from SYSADM.PS_ISIR_00_1_EC@AMSOURCE S)
 where TABLE_NAME = 'PS_ISIR_00_1_EC'
;

strSqlCommand := 'commit';
commit;


strMessage01    := 'Merging data into AMSTG_OWNER.PS_ISIR_00_1_EC';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand   := 'merge into AMSTG_OWNER.PS_ISIR_00_1_EC';
merge /*+ use_hash(S,T) */ into AMSTG_OWNER.PS_ISIR_00_1_EC T
using (select /*+ full(S) */
nvl(trim(ECTRANSID),'-') ECTRANSID,
nvl(ECQUEUEINSTANCE,0) ECQUEUEINSTANCE,
nvl(trim(ECTRANSINOUTSW),'-') ECTRANSINOUTSW,
nvl(ISIR_SEQ_NO,0) ISIR_SEQ_NO,
nvl(trim(ISIR_LOAD_STATUS),'-') ISIR_LOAD_STATUS,
nvl(trim(ISIR_LOAD_ACTION),'-') ISIR_LOAD_ACTION,
nvl(trim(ADMIT_LVL),'-') ADMIT_LVL,
nvl(trim(ORIG_SSN),'-') ORIG_SSN,
nvl(trim(NAME_CD),'-') NAME_CD,
nvl(trim(IWD_TRANS_NBR),'-') IWD_TRANS_NBR,
nvl(trim(EMPLID),'-') EMPLID,
nvl(trim(CPS_SCHOOL_CODE),'-') CPS_SCHOOL_CODE,
nvl(trim(IWD_BATCH_YR),'-') IWD_BATCH_YR,
nvl(trim(LAST_NAME_SSN_CHNG),'-') LAST_NAME_SSN_CHNG,
nvl(trim(SSN),'-') SSN,
nvl(trim(IWD_STD_LAST_NAME),'-') IWD_STD_LAST_NAME,
nvl(trim(IWD_STD_FIRST_NM02),'-') IWD_STD_FIRST_NM02,
nvl(trim(IWD_STU_MI),'-') IWD_STU_MI,
nvl(trim(IWD_PERM_ADDR02),'-') IWD_PERM_ADDR02,
nvl(trim(IWD_CITY),'-') IWD_CITY,
nvl(trim(IWD_STATE),'-') IWD_STATE,
nvl(trim(IWD_ZIP),'-') IWD_ZIP,
to_date(to_char(BIRTHDATE,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') BIRTHDATE,
nvl(trim(IWD_PERM_PHONE),'-') IWD_PERM_PHONE,
nvl(trim(IWD_HAVE_DL),'-') IWD_HAVE_DL,
nvl(trim(DRIVERS_LICENSE_NO),'-') DRIVERS_LICENSE_NO,
nvl(trim(IWD_DL_STATE),'-') IWD_DL_STATE,
nvl(trim(CITIZENSHIP_STATUS),'-') CITIZENSHIP_STATUS,
nvl(trim(IWD_STU_ALIEN_REG),'-') IWD_STU_ALIEN_REG,
nvl(trim(MARITAL_STAT),'-') MARITAL_STAT,
nvl(trim(IWD_MAR_STAT_DT),'-') IWD_MAR_STAT_DT,
nvl(trim(ENROLL_CURNT_SUM),'-') ENROLL_CURNT_SUM,
nvl(trim(ENROLL_FALL),'-') ENROLL_FALL,
nvl(trim(ENROLL_WINTER),'-') ENROLL_WINTER,
nvl(trim(ENROLL_SPRING),'-') ENROLL_SPRING,
nvl(trim(ENROLL_NEXT_SUM),'-') ENROLL_NEXT_SUM,
nvl(trim(FATHER_GRADE_LVL),'-') FATHER_GRADE_LVL,
nvl(trim(MOTHER_GRADE_LVL),'-') MOTHER_GRADE_LVL,
nvl(trim(IWD_STATE_RES),'-') IWD_STATE_RES,
nvl(trim(IWD_RES_PRIOR_94),'-') IWD_RES_PRIOR_94,
nvl(trim(IWD_LEGAL_RES_DT),'-') IWD_LEGAL_RES_DT,
nvl(trim(IWD_MALE),'-') IWD_MALE,
nvl(trim(SEL_SERV_REGISTER),'-') SEL_SERV_REGISTER,
nvl(trim(DEGREE_CERTIF),'-') DEGREE_CERTIF,
nvl(trim(IWD_GRADE_LVL),'-') IWD_GRADE_LVL,
nvl(trim(HS_GED_RCVD),'-') HS_GED_RCVD,
nvl(trim(FIRST_BACH_DEGREE),'-') FIRST_BACH_DEGREE,
nvl(trim(INTERESTED_IN_SL),'-') INTERESTED_IN_SL,
nvl(trim(INTERESTED_IN_WS),'-') INTERESTED_IN_WS,
nvl(trim(NUM_MONTH_VET_BEN),'-') NUM_MONTH_VET_BEN,
nvl(trim(IWD_MTHLY_VET_BEN),'-') IWD_MTHLY_VET_BEN,
nvl(trim(TAX_FORM_STU),'-') TAX_FORM_STU,
nvl(trim(TAX_FORM_FILED),'-') TAX_FORM_FILED,
nvl(trim(IWD_ELIG_1040A_EZ),'-') IWD_ELIG_1040A_EZ,
nvl(trim(IWD_STU_AGI),'-') IWD_STU_AGI,
nvl(trim(IWD_STU_TAX_PAID),'-') IWD_STU_TAX_PAID,
nvl(trim(IWD_STU_NBR_EXEMP),'-') IWD_STU_NBR_EXEMP,
nvl(trim(IWD_STU_EIC),'-') IWD_STU_EIC,
nvl(trim(IWD_STU_WORK_INC),'-') IWD_STU_WORK_INC,
nvl(trim(IWD_SPS_WORK_INC),'-') IWD_SPS_WORK_INC,
nvl(trim(IWD_STU_WK_A),'-') IWD_STU_WK_A,
nvl(trim(IWD_STU_WK_B),'-') IWD_STU_WK_B,
nvl(trim(IWD_STU_CASH),'-') IWD_STU_CASH,
nvl(trim(IWD_STU_INVEST),'-') IWD_STU_INVEST,
nvl(trim(IWD_STU_BUS_WORTH),'-') IWD_STU_BUS_WORTH,
nvl(trim(IWD_STU_FARM_WORTH),'-') IWD_STU_FARM_WORTH,
nvl(trim(IWD_BORN_PRIOR_76),'-') IWD_BORN_PRIOR_76,
nvl(trim(GRADUATE_STUDENT),'-') GRADUATE_STUDENT,
nvl(trim(MARRIED),'-') MARRIED,
nvl(trim(ORPHAN),'-') ORPHAN,
nvl(trim(VETERAN),'-') VETERAN,
nvl(trim(DEPENDENTS),'-') DEPENDENTS,
nvl(trim(IWD_STU_FAM_MEM),'-') IWD_STU_FAM_MEM,
nvl(trim(IWD_STU_MEM_COLL),'-') IWD_STU_MEM_COLL,
nvl(trim(TAX_FORM_PAR),'-') TAX_FORM_PAR,
nvl(trim(TAX_FORM_FILED_PAR),'-') TAX_FORM_FILED_PAR,
nvl(trim(IWD_ELIG_1040A_PAR),'-') IWD_ELIG_1040A_PAR,
nvl(trim(IWD_PAR_AGI),'-') IWD_PAR_AGI,
nvl(trim(IWD_PAR_TAX_PAID),'-') IWD_PAR_TAX_PAID,
nvl(trim(IWD_PAR_NBR_EXEMP),'-') IWD_PAR_NBR_EXEMP,
nvl(trim(IWD_PAR_EIC),'-') IWD_PAR_EIC,
nvl(trim(IWD_FATH_WORK_INC),'-') IWD_FATH_WORK_INC,
nvl(trim(IWD_MOM_WORK_INC),'-') IWD_MOM_WORK_INC,
nvl(trim(IWD_PAR_WK_A),'-') IWD_PAR_WK_A,
nvl(trim(IWD_PAR_WK_B),'-') IWD_PAR_WK_B,
nvl(trim(IWD_PAR_CASH),'-') IWD_PAR_CASH,
nvl(trim(IWD_PAR_INVEST),'-') IWD_PAR_INVEST,
nvl(trim(IWD_PAR_BUS_WORTH),'-') IWD_PAR_BUS_WORTH,
nvl(trim(IWD_PAR_FARM_WORTH),'-') IWD_PAR_FARM_WORTH,
nvl(trim(MARITAL_STAT_PAR),'-') MARITAL_STAT_PAR,
nvl(trim(IWD_PAR_FAM_MEM),'-') IWD_PAR_FAM_MEM,
nvl(trim(IWD_PAR_MEM_COLL),'-') IWD_PAR_MEM_COLL,
nvl(trim(IWD_PAR_STATE_RES),'-') IWD_PAR_STATE_RES,
nvl(trim(IWD_PAR_RES_PRI_94),'-') IWD_PAR_RES_PRI_94,
nvl(trim(IWD_PAR_RES_DT),'-') IWD_PAR_RES_DT,
nvl(trim(AGE_OLDER_PARENT),'-') AGE_OLDER_PARENT,
nvl(trim(SCHOOL_CHOICE_1),'-') SCHOOL_CHOICE_1,
nvl(trim(HOUSING_CODE_1),'-') HOUSING_CODE_1,
nvl(trim(SCHOOL_CHOICE_2),'-') SCHOOL_CHOICE_2,
nvl(trim(HOUSING_CODE_2),'-') HOUSING_CODE_2,
nvl(trim(SCHOOL_CHOICE_3),'-') SCHOOL_CHOICE_3,
nvl(trim(HOUSING_CODE_3),'-') HOUSING_CODE_3,
nvl(trim(SCHOOL_CHOICE_4),'-') SCHOOL_CHOICE_4,
nvl(trim(HOUSING_CODE_4),'-') HOUSING_CODE_4,
nvl(trim(SCHOOL_CHOICE_5),'-') SCHOOL_CHOICE_5,
nvl(trim(HOUSING_CODE_5),'-') HOUSING_CODE_5,
nvl(trim(SCHOOL_CHOICE_6),'-') SCHOOL_CHOICE_6,
nvl(trim(HOUSING_CODE_6),'-') HOUSING_CODE_6,
to_date(to_char(DT_APP_COMPLETED,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') DT_APP_COMPLETED,
nvl(trim(IWD_APP_SIGNED_BY),'-') IWD_APP_SIGNED_BY,
nvl(trim(IWD_PREP_SSN),'-') IWD_PREP_SSN,
nvl(trim(IWD_PREP_EIN),'-') IWD_PREP_EIN,
nvl(trim(IWD_PREP_SIGNATURE),'-') IWD_PREP_SIGNATURE,
nvl(trim(DEPENDENCY_OVERIDE),'-') DEPENDENCY_OVERIDE,
nvl(trim(FAA_INSTITUT_NUM),'-') FAA_INSTITUT_NUM,
nvl(trim(FAA_SIGNATURE),'-') FAA_SIGNATURE,
nvl(trim(ADJ_EFC_CALC_REQ),'-') ADJ_EFC_CALC_REQ,
nvl(trim(IWD_DRN),'-') IWD_DRN,
to_date(to_char(TRANS_RECEIPT_DT,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') TRANS_RECEIPT_DT,
nvl(trim(IWD_SERIAL_NO),'-') IWD_SERIAL_NO,
nvl(trim(BATCH_NUMBER),'-') BATCH_NUMBER,
nvl(PROCESS_INSTANCE,0) PROCESS_INSTANCE,
nvl(trim(SUSPEND_REASON),'-') SUSPEND_REASON,
nvl(trim(DISCARD_REASON),'-') DISCARD_REASON,
nvl(trim(ERROR_CODE),'-') ERROR_CODE,
nvl(MAX_MATCH_LEVEL,0) MAX_MATCH_LEVEL,
nvl(trim(ID_OVERRIDE),'-') ID_OVERRIDE,
to_date(to_char(PROCESS_DT,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') PROCESS_DT,
to_date(to_char(ALT_EFFDT,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') ALT_EFFDT,
nvl(trim(IWD_RES_PRIOR),'-') IWD_RES_PRIOR,
nvl(trim(DRUG_OFFENSE_CONV),'-') DRUG_OFFENSE_CONV,
nvl(trim(IWD_BORN_PRIOR),'-') IWD_BORN_PRIOR,
nvl(trim(FATHER_SSN),'-') FATHER_SSN,
nvl(trim(FATHER_LAST_NAME),'-') FATHER_LAST_NAME,
nvl(trim(MOTHER_SSN),'-') MOTHER_SSN,
nvl(trim(MOTHER_LAST_NAME),'-') MOTHER_LAST_NAME,
nvl(trim(IWD_PAR_RES_PRI),'-') IWD_PAR_RES_PRI,
nvl(trim(IWD_INPUT_REC_TYPE),'-') IWD_INPUT_REC_TYPE,
nvl(trim(IWD_STU_WK_C),'-') IWD_STU_WK_C,
nvl(trim(CHILDREN),'-') CHILDREN,
nvl(trim(IWD_PAR_MAR_ST_DT),'-') IWD_PAR_MAR_ST_DT,
nvl(trim(EFC_STATUS_MSG),'-') EFC_STATUS_MSG,
nvl(trim(FATHER_1ST_NM_INIT),'-') FATHER_1ST_NM_INIT,
to_date(to_char(FATHER_DOB,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') FATHER_DOB,
nvl(trim(MOTHER_1ST_NM_INIT),'-') MOTHER_1ST_NM_INIT,
to_date(to_char(MOTHER_DOB,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') MOTHER_DOB,
nvl(trim(ISIR_STU_ENRL_STAT),'-') ISIR_STU_ENRL_STAT,
nvl(trim(IWD_PAR_EMAIL),'-') IWD_PAR_EMAIL,
nvl(trim(SFA_ACTIVE_DUTY),'-') SFA_ACTIVE_DUTY,
nvl(trim(SFA_SSI_INCOME),'-') SFA_SSI_INCOME,
nvl(trim(SFA_FOOD_STAMPS),'-') SFA_FOOD_STAMPS,
nvl(trim(SFA_SCHL_LUNCH_PRG),'-') SFA_SCHL_LUNCH_PRG,
nvl(trim(SFA_TANF_BENEFITS),'-') SFA_TANF_BENEFITS,
nvl(trim(SFA_WIC_BENEFITS),'-') SFA_WIC_BENEFITS,
nvl(trim(SFA_PAR_SSI_INCOME),'-') SFA_PAR_SSI_INCOME,
nvl(trim(SFA_PAR_FOOD_STAMP),'-') SFA_PAR_FOOD_STAMP,
nvl(trim(SFA_PAR_LUNCH_BEN),'-') SFA_PAR_LUNCH_BEN,
nvl(trim(SFA_PAR_TANF_BEN),'-') SFA_PAR_TANF_BEN,
nvl(trim(SFA_PAR_WIC_BEN),'-') SFA_PAR_WIC_BEN,
nvl(trim(SFA_INTRSTD_IN_WSL),'-') SFA_INTRSTD_IN_WSL,
nvl(trim(SFA_STDNT_GENDER),'-') SFA_STDNT_GENDER,
nvl(trim(SFA_HS_DIP_EQUIV),'-') SFA_HS_DIP_EQUIV,
nvl(trim(SFA_SCHL_CHOICE_7),'-') SFA_SCHL_CHOICE_7,
nvl(trim(SFA_HOUSING_CODE7),'-') SFA_HOUSING_CODE7,
nvl(trim(SFA_SCHL_CHOICE_8),'-') SFA_SCHL_CHOICE_8,
nvl(trim(SFA_HOUSING_CODE8),'-') SFA_HOUSING_CODE8,
nvl(trim(SFA_SCHL_CHOICE_9),'-') SFA_SCHL_CHOICE_9,
nvl(trim(SFA_HOUSING_CODE9),'-') SFA_HOUSING_CODE9,
nvl(trim(SFA_SCHL_CHOICE_10),'-') SFA_SCHL_CHOICE_10,
nvl(trim(SFA_HOUSING_CODE10),'-') SFA_HOUSING_CODE10,
nvl(trim(SFA_TCH_COURSE_WRK),'-') SFA_TCH_COURSE_WRK,
nvl(trim(SFA_EMANCIPT_MINOR),'-') SFA_EMANCIPT_MINOR,
nvl(trim(SFA_LEGAL_GUARDIAN),'-') SFA_LEGAL_GUARDIAN,
nvl(trim(SFA_YOUTH_LIASON),'-') SFA_YOUTH_LIASON,
nvl(trim(SFA_YOUTH_HUD),'-') SFA_YOUTH_HUD,
nvl(trim(SFA_RISK_HOMELESS),'-') SFA_RISK_HOMELESS,
nvl(trim(SFA_STU_DISLOC_WRK),'-') SFA_STU_DISLOC_WRK,
nvl(trim(SFA_STU_EDU_CREDIT),'-') SFA_STU_EDU_CREDIT,
nvl(trim(SFA_STU_SUP_PAID),'-') SFA_STU_SUP_PAID,
nvl(trim(SFA_STU_NEED_EMPL),'-') SFA_STU_NEED_EMPL,
nvl(trim(SFA_STU_GRANT_AID),'-') SFA_STU_GRANT_AID,
nvl(trim(SFA_STU_COMBAT_PAY),'-') SFA_STU_COMBAT_PAY,
nvl(trim(SFA_STU_PEN_PAY),'-') SFA_STU_PEN_PAY,
nvl(trim(SFA_STU_IRA_PAY),'-') SFA_STU_IRA_PAY,
nvl(trim(SFA_STU_SUP_RECV),'-') SFA_STU_SUP_RECV,
nvl(trim(SFA_STU_INT_INCOME),'-') SFA_STU_INT_INCOME,
nvl(trim(SFA_STU_IRA_DIST),'-') SFA_STU_IRA_DIST,
nvl(trim(SFA_STU_UNTAX_PEN),'-') SFA_STU_UNTAX_PEN,
nvl(trim(SFA_STU_MIL_ALLOW),'-') SFA_STU_MIL_ALLOW,
nvl(trim(SFA_STU_VET_ED_BEN),'-') SFA_STU_VET_ED_BEN,
nvl(trim(SFA_STU_UNTAX_INC),'-') SFA_STU_UNTAX_INC,
nvl(trim(SFA_STU_NREP_MONEY),'-') SFA_STU_NREP_MONEY,
nvl(trim(SFA_PAR_DISLOC_WRK),'-') SFA_PAR_DISLOC_WRK,
nvl(trim(SFA_PAR_EDU_CREDIT),'-') SFA_PAR_EDU_CREDIT,
nvl(trim(SFA_PAR_SUP_PAID),'-') SFA_PAR_SUP_PAID,
nvl(trim(SFA_PAR_NEED_EMPL),'-') SFA_PAR_NEED_EMPL,
nvl(trim(SFA_PAR_GRANT_AID),'-') SFA_PAR_GRANT_AID,
nvl(trim(SFA_PAR_COMBAT_PAY),'-') SFA_PAR_COMBAT_PAY,
nvl(trim(SFA_PAR_PEN_PAY),'-') SFA_PAR_PEN_PAY,
nvl(trim(SFA_PAR_IRA_PAY),'-') SFA_PAR_IRA_PAY,
nvl(trim(SFA_PAR_SUP_RECV),'-') SFA_PAR_SUP_RECV,
nvl(trim(SFA_PAR_INT_INCOME),'-') SFA_PAR_INT_INCOME,
nvl(trim(SFA_PAR_IRA_DIST),'-') SFA_PAR_IRA_DIST,
nvl(trim(SFA_PAR_UNTAX_PEN),'-') SFA_PAR_UNTAX_PEN,
nvl(trim(SFA_PAR_MIL_ALLOW),'-') SFA_PAR_MIL_ALLOW,
nvl(trim(SFA_PAR_VET_ED_BEN),'-') SFA_PAR_VET_ED_BEN,
nvl(trim(SFA_PAR_UNTAX_INC),'-') SFA_PAR_UNTAX_INC,
nvl(trim(SFA_RECV_VET_BEN),'-') SFA_RECV_VET_BEN,
nvl(trim(SFA_VET_BEN_TYPE),'-') SFA_VET_BEN_TYPE,
nvl(trim(SFA_STU_COOP_EARN),'-') SFA_STU_COOP_EARN,
nvl(trim(SFA_PAR_COOP_EARN),'-') SFA_PAR_COOP_EARN,
nvl(trim(SFA_HIGH_SCHL_NAME),'-') SFA_HIGH_SCHL_NAME,
nvl(trim(SFA_HIGH_SCHL_CITY),'-') SFA_HIGH_SCHL_CITY,
nvl(trim(SFA_HIGH_SCHL_STAT),'-') SFA_HIGH_SCHL_STAT,
nvl(trim(SFA_HIGH_SCHL_CODE),'-') SFA_HIGH_SCHL_CODE,
nvl(trim(SFA_STU_ASSET_THRS),'-') SFA_STU_ASSET_THRS,
nvl(trim(SFA_PAR_ASSET_THRS),'-') SFA_PAR_ASSET_THRS,
nvl(trim(SFA_STU_TAX_RET),'-') SFA_STU_TAX_RET,
nvl(trim(SFA_PAR_TAX_RET),'-') SFA_PAR_TAX_RET
from SYSADM.PS_ISIR_00_1_EC@AMSOURCE S
where ORA_ROWSCN > (select OLD_MAX_SCN from AMSTG_OWNER.UM_STAGE_JOBS where TABLE_NAME = 'PS_ISIR_00_1_EC') ) S
   on (
T.ECTRANSID = S.ECTRANSID and
T.ECQUEUEINSTANCE = S.ECQUEUEINSTANCE and
T.ECTRANSINOUTSW = S.ECTRANSINOUTSW and
T.ISIR_SEQ_NO = S.ISIR_SEQ_NO and
T.SRC_SYS_ID = 'CS90')
when matched then update set
T.ISIR_LOAD_STATUS = S.ISIR_LOAD_STATUS,
T.ISIR_LOAD_ACTION = S.ISIR_LOAD_ACTION,
T.ADMIT_LVL = S.ADMIT_LVL,
T.ORIG_SSN = S.ORIG_SSN,
T.NAME_CD = S.NAME_CD,
T.IWD_TRANS_NBR = S.IWD_TRANS_NBR,
T.EMPLID = S.EMPLID,
T.CPS_SCHOOL_CODE = S.CPS_SCHOOL_CODE,
T.IWD_BATCH_YR = S.IWD_BATCH_YR,
T.LAST_NAME_SSN_CHNG = S.LAST_NAME_SSN_CHNG,
T.SSN = S.SSN,
T.IWD_STD_LAST_NAME = S.IWD_STD_LAST_NAME,
T.IWD_STD_FIRST_NM02 = S.IWD_STD_FIRST_NM02,
T.IWD_STU_MI = S.IWD_STU_MI,
T.IWD_PERM_ADDR02 = S.IWD_PERM_ADDR02,
T.IWD_CITY = S.IWD_CITY,
T.IWD_STATE = S.IWD_STATE,
T.IWD_ZIP = S.IWD_ZIP,
T.BIRTHDATE = S.BIRTHDATE,
T.IWD_PERM_PHONE = S.IWD_PERM_PHONE,
T.IWD_HAVE_DL = S.IWD_HAVE_DL,
T.DRIVERS_LICENSE_NO = S.DRIVERS_LICENSE_NO,
T.IWD_DL_STATE = S.IWD_DL_STATE,
T.CITIZENSHIP_STATUS = S.CITIZENSHIP_STATUS,
T.IWD_STU_ALIEN_REG = S.IWD_STU_ALIEN_REG,
T.MARITAL_STAT = S.MARITAL_STAT,
T.IWD_MAR_STAT_DT = S.IWD_MAR_STAT_DT,
T.ENROLL_CURNT_SUM = S.ENROLL_CURNT_SUM,
T.ENROLL_FALL = S.ENROLL_FALL,
T.ENROLL_WINTER = S.ENROLL_WINTER,
T.ENROLL_SPRING = S.ENROLL_SPRING,
T.ENROLL_NEXT_SUM = S.ENROLL_NEXT_SUM,
T.FATHER_GRADE_LVL = S.FATHER_GRADE_LVL,
T.MOTHER_GRADE_LVL = S.MOTHER_GRADE_LVL,
T.IWD_STATE_RES = S.IWD_STATE_RES,
T.IWD_RES_PRIOR_94 = S.IWD_RES_PRIOR_94,
T.IWD_LEGAL_RES_DT = S.IWD_LEGAL_RES_DT,
T.IWD_MALE = S.IWD_MALE,
T.SEL_SERV_REGISTER = S.SEL_SERV_REGISTER,
T.DEGREE_CERTIF = S.DEGREE_CERTIF,
T.IWD_GRADE_LVL = S.IWD_GRADE_LVL,
T.HS_GED_RCVD = S.HS_GED_RCVD,
T.FIRST_BACH_DEGREE = S.FIRST_BACH_DEGREE,
T.INTERESTED_IN_SL = S.INTERESTED_IN_SL,
T.INTERESTED_IN_WS = S.INTERESTED_IN_WS,
T.NUM_MONTH_VET_BEN = S.NUM_MONTH_VET_BEN,
T.IWD_MTHLY_VET_BEN = S.IWD_MTHLY_VET_BEN,
T.TAX_FORM_STU = S.TAX_FORM_STU,
T.TAX_FORM_FILED = S.TAX_FORM_FILED,
T.IWD_ELIG_1040A_EZ = S.IWD_ELIG_1040A_EZ,
T.IWD_STU_AGI = S.IWD_STU_AGI,
T.IWD_STU_TAX_PAID = S.IWD_STU_TAX_PAID,
T.IWD_STU_NBR_EXEMP = S.IWD_STU_NBR_EXEMP,
T.IWD_STU_EIC = S.IWD_STU_EIC,
T.IWD_STU_WORK_INC = S.IWD_STU_WORK_INC,
T.IWD_SPS_WORK_INC = S.IWD_SPS_WORK_INC,
T.IWD_STU_WK_A = S.IWD_STU_WK_A,
T.IWD_STU_WK_B = S.IWD_STU_WK_B,
T.IWD_STU_CASH = S.IWD_STU_CASH,
T.IWD_STU_INVEST = S.IWD_STU_INVEST,
T.IWD_STU_BUS_WORTH = S.IWD_STU_BUS_WORTH,
T.IWD_STU_FARM_WORTH = S.IWD_STU_FARM_WORTH,
T.IWD_BORN_PRIOR_76 = S.IWD_BORN_PRIOR_76,
T.GRADUATE_STUDENT = S.GRADUATE_STUDENT,
T.MARRIED = S.MARRIED,
T.ORPHAN = S.ORPHAN,
T.VETERAN = S.VETERAN,
T.DEPENDENTS = S.DEPENDENTS,
T.IWD_STU_FAM_MEM = S.IWD_STU_FAM_MEM,
T.IWD_STU_MEM_COLL = S.IWD_STU_MEM_COLL,
T.TAX_FORM_PAR = S.TAX_FORM_PAR,
T.TAX_FORM_FILED_PAR = S.TAX_FORM_FILED_PAR,
T.IWD_ELIG_1040A_PAR = S.IWD_ELIG_1040A_PAR,
T.IWD_PAR_AGI = S.IWD_PAR_AGI,
T.IWD_PAR_TAX_PAID = S.IWD_PAR_TAX_PAID,
T.IWD_PAR_NBR_EXEMP = S.IWD_PAR_NBR_EXEMP,
T.IWD_PAR_EIC = S.IWD_PAR_EIC,
T.IWD_FATH_WORK_INC = S.IWD_FATH_WORK_INC,
T.IWD_MOM_WORK_INC = S.IWD_MOM_WORK_INC,
T.IWD_PAR_WK_A = S.IWD_PAR_WK_A,
T.IWD_PAR_WK_B = S.IWD_PAR_WK_B,
T.IWD_PAR_CASH = S.IWD_PAR_CASH,
T.IWD_PAR_INVEST = S.IWD_PAR_INVEST,
T.IWD_PAR_BUS_WORTH = S.IWD_PAR_BUS_WORTH,
T.IWD_PAR_FARM_WORTH = S.IWD_PAR_FARM_WORTH,
T.MARITAL_STAT_PAR = S.MARITAL_STAT_PAR,
T.IWD_PAR_FAM_MEM = S.IWD_PAR_FAM_MEM,
T.IWD_PAR_MEM_COLL = S.IWD_PAR_MEM_COLL,
T.IWD_PAR_STATE_RES = S.IWD_PAR_STATE_RES,
T.IWD_PAR_RES_PRI_94 = S.IWD_PAR_RES_PRI_94,
T.IWD_PAR_RES_DT = S.IWD_PAR_RES_DT,
T.AGE_OLDER_PARENT = S.AGE_OLDER_PARENT,
T.SCHOOL_CHOICE_1 = S.SCHOOL_CHOICE_1,
T.HOUSING_CODE_1 = S.HOUSING_CODE_1,
T.SCHOOL_CHOICE_2 = S.SCHOOL_CHOICE_2,
T.HOUSING_CODE_2 = S.HOUSING_CODE_2,
T.SCHOOL_CHOICE_3 = S.SCHOOL_CHOICE_3,
T.HOUSING_CODE_3 = S.HOUSING_CODE_3,
T.SCHOOL_CHOICE_4 = S.SCHOOL_CHOICE_4,
T.HOUSING_CODE_4 = S.HOUSING_CODE_4,
T.SCHOOL_CHOICE_5 = S.SCHOOL_CHOICE_5,
T.HOUSING_CODE_5 = S.HOUSING_CODE_5,
T.SCHOOL_CHOICE_6 = S.SCHOOL_CHOICE_6,
T.HOUSING_CODE_6 = S.HOUSING_CODE_6,
T.DT_APP_COMPLETED = S.DT_APP_COMPLETED,
T.IWD_APP_SIGNED_BY = S.IWD_APP_SIGNED_BY,
T.IWD_PREP_SSN = S.IWD_PREP_SSN,
T.IWD_PREP_EIN = S.IWD_PREP_EIN,
T.IWD_PREP_SIGNATURE = S.IWD_PREP_SIGNATURE,
T.DEPENDENCY_OVERIDE = S.DEPENDENCY_OVERIDE,
T.FAA_INSTITUT_NUM = S.FAA_INSTITUT_NUM,
T.FAA_SIGNATURE = S.FAA_SIGNATURE,
T.ADJ_EFC_CALC_REQ = S.ADJ_EFC_CALC_REQ,
T.IWD_DRN = S.IWD_DRN,
T.TRANS_RECEIPT_DT = S.TRANS_RECEIPT_DT,
T.IWD_SERIAL_NO = S.IWD_SERIAL_NO,
T.BATCH_NUMBER = S.BATCH_NUMBER,
T.PROCESS_INSTANCE = S.PROCESS_INSTANCE,
T.SUSPEND_REASON = S.SUSPEND_REASON,
T.DISCARD_REASON = S.DISCARD_REASON,
T.ERROR_CODE = S.ERROR_CODE,
T.MAX_MATCH_LEVEL = S.MAX_MATCH_LEVEL,
T.ID_OVERRIDE = S.ID_OVERRIDE,
T.PROCESS_DT = S.PROCESS_DT,
T.ALT_EFFDT = S.ALT_EFFDT,
T.IWD_RES_PRIOR = S.IWD_RES_PRIOR,
T.DRUG_OFFENSE_CONV = S.DRUG_OFFENSE_CONV,
T.IWD_BORN_PRIOR = S.IWD_BORN_PRIOR,
T.FATHER_SSN = S.FATHER_SSN,
T.FATHER_LAST_NAME = S.FATHER_LAST_NAME,
T.MOTHER_SSN = S.MOTHER_SSN,
T.MOTHER_LAST_NAME = S.MOTHER_LAST_NAME,
T.IWD_PAR_RES_PRI = S.IWD_PAR_RES_PRI,
T.IWD_INPUT_REC_TYPE = S.IWD_INPUT_REC_TYPE,
T.IWD_STU_WK_C = S.IWD_STU_WK_C,
T.CHILDREN = S.CHILDREN,
T.IWD_PAR_MAR_ST_DT = S.IWD_PAR_MAR_ST_DT,
T.EFC_STATUS_MSG = S.EFC_STATUS_MSG,
T.FATHER_1ST_NM_INIT = S.FATHER_1ST_NM_INIT,
T.FATHER_DOB = S.FATHER_DOB,
T.MOTHER_1ST_NM_INIT = S.MOTHER_1ST_NM_INIT,
T.MOTHER_DOB = S.MOTHER_DOB,
T.ISIR_STU_ENRL_STAT = S.ISIR_STU_ENRL_STAT,
T.IWD_PAR_EMAIL = S.IWD_PAR_EMAIL,
T.SFA_ACTIVE_DUTY = S.SFA_ACTIVE_DUTY,
T.SFA_SSI_INCOME = S.SFA_SSI_INCOME,
T.SFA_FOOD_STAMPS = S.SFA_FOOD_STAMPS,
T.SFA_SCHL_LUNCH_PRG = S.SFA_SCHL_LUNCH_PRG,
T.SFA_TANF_BENEFITS = S.SFA_TANF_BENEFITS,
T.SFA_WIC_BENEFITS = S.SFA_WIC_BENEFITS,
T.SFA_PAR_SSI_INCOME = S.SFA_PAR_SSI_INCOME,
T.SFA_PAR_FOOD_STAMP = S.SFA_PAR_FOOD_STAMP,
T.SFA_PAR_LUNCH_BEN = S.SFA_PAR_LUNCH_BEN,
T.SFA_PAR_TANF_BEN = S.SFA_PAR_TANF_BEN,
T.SFA_PAR_WIC_BEN = S.SFA_PAR_WIC_BEN,
T.SFA_INTRSTD_IN_WSL = S.SFA_INTRSTD_IN_WSL,
T.SFA_STDNT_GENDER = S.SFA_STDNT_GENDER,
T.SFA_HS_DIP_EQUIV = S.SFA_HS_DIP_EQUIV,
T.SFA_SCHL_CHOICE_7 = S.SFA_SCHL_CHOICE_7,
T.SFA_HOUSING_CODE7 = S.SFA_HOUSING_CODE7,
T.SFA_SCHL_CHOICE_8 = S.SFA_SCHL_CHOICE_8,
T.SFA_HOUSING_CODE8 = S.SFA_HOUSING_CODE8,
T.SFA_SCHL_CHOICE_9 = S.SFA_SCHL_CHOICE_9,
T.SFA_HOUSING_CODE9 = S.SFA_HOUSING_CODE9,
T.SFA_SCHL_CHOICE_10 = S.SFA_SCHL_CHOICE_10,
T.SFA_HOUSING_CODE10 = S.SFA_HOUSING_CODE10,
T.SFA_TCH_COURSE_WRK = S.SFA_TCH_COURSE_WRK,
T.SFA_EMANCIPT_MINOR = S.SFA_EMANCIPT_MINOR,
T.SFA_LEGAL_GUARDIAN = S.SFA_LEGAL_GUARDIAN,
T.SFA_YOUTH_LIASON = S.SFA_YOUTH_LIASON,
T.SFA_YOUTH_HUD = S.SFA_YOUTH_HUD,
T.SFA_RISK_HOMELESS = S.SFA_RISK_HOMELESS,
T.SFA_STU_DISLOC_WRK = S.SFA_STU_DISLOC_WRK,
T.SFA_STU_EDU_CREDIT = S.SFA_STU_EDU_CREDIT,
T.SFA_STU_SUP_PAID = S.SFA_STU_SUP_PAID,
T.SFA_STU_NEED_EMPL = S.SFA_STU_NEED_EMPL,
T.SFA_STU_GRANT_AID = S.SFA_STU_GRANT_AID,
T.SFA_STU_COMBAT_PAY = S.SFA_STU_COMBAT_PAY,
T.SFA_STU_PEN_PAY = S.SFA_STU_PEN_PAY,
T.SFA_STU_IRA_PAY = S.SFA_STU_IRA_PAY,
T.SFA_STU_SUP_RECV = S.SFA_STU_SUP_RECV,
T.SFA_STU_INT_INCOME = S.SFA_STU_INT_INCOME,
T.SFA_STU_IRA_DIST = S.SFA_STU_IRA_DIST,
T.SFA_STU_UNTAX_PEN = S.SFA_STU_UNTAX_PEN,
T.SFA_STU_MIL_ALLOW = S.SFA_STU_MIL_ALLOW,
T.SFA_STU_VET_ED_BEN = S.SFA_STU_VET_ED_BEN,
T.SFA_STU_UNTAX_INC = S.SFA_STU_UNTAX_INC,
T.SFA_STU_NREP_MONEY = S.SFA_STU_NREP_MONEY,
T.SFA_PAR_DISLOC_WRK = S.SFA_PAR_DISLOC_WRK,
T.SFA_PAR_EDU_CREDIT = S.SFA_PAR_EDU_CREDIT,
T.SFA_PAR_SUP_PAID = S.SFA_PAR_SUP_PAID,
T.SFA_PAR_NEED_EMPL = S.SFA_PAR_NEED_EMPL,
T.SFA_PAR_GRANT_AID = S.SFA_PAR_GRANT_AID,
T.SFA_PAR_COMBAT_PAY = S.SFA_PAR_COMBAT_PAY,
T.SFA_PAR_PEN_PAY = S.SFA_PAR_PEN_PAY,
T.SFA_PAR_IRA_PAY = S.SFA_PAR_IRA_PAY,
T.SFA_PAR_SUP_RECV = S.SFA_PAR_SUP_RECV,
T.SFA_PAR_INT_INCOME = S.SFA_PAR_INT_INCOME,
T.SFA_PAR_IRA_DIST = S.SFA_PAR_IRA_DIST,
T.SFA_PAR_UNTAX_PEN = S.SFA_PAR_UNTAX_PEN,
T.SFA_PAR_MIL_ALLOW = S.SFA_PAR_MIL_ALLOW,
T.SFA_PAR_VET_ED_BEN = S.SFA_PAR_VET_ED_BEN,
T.SFA_PAR_UNTAX_INC = S.SFA_PAR_UNTAX_INC,
T.SFA_RECV_VET_BEN = S.SFA_RECV_VET_BEN,
T.SFA_VET_BEN_TYPE = S.SFA_VET_BEN_TYPE,
T.SFA_STU_COOP_EARN = S.SFA_STU_COOP_EARN,
T.SFA_PAR_COOP_EARN = S.SFA_PAR_COOP_EARN,
T.SFA_HIGH_SCHL_NAME = S.SFA_HIGH_SCHL_NAME,
T.SFA_HIGH_SCHL_CITY = S.SFA_HIGH_SCHL_CITY,
T.SFA_HIGH_SCHL_STAT = S.SFA_HIGH_SCHL_STAT,
T.SFA_HIGH_SCHL_CODE = S.SFA_HIGH_SCHL_CODE,
T.SFA_STU_ASSET_THRS = S.SFA_STU_ASSET_THRS,
T.SFA_PAR_ASSET_THRS = S.SFA_PAR_ASSET_THRS,
T.SFA_STU_TAX_RET = S.SFA_STU_TAX_RET,
T.SFA_PAR_TAX_RET = S.SFA_PAR_TAX_RET,
T.DATA_ORIGIN = 'S',
T.LASTUPD_EW_DTTM = sysdate,
T.BATCH_SID   = 1234
where
T.ISIR_LOAD_STATUS <> S.ISIR_LOAD_STATUS or
T.ISIR_LOAD_ACTION <> S.ISIR_LOAD_ACTION or
T.ADMIT_LVL <> S.ADMIT_LVL or
T.ORIG_SSN <> S.ORIG_SSN or
T.NAME_CD <> S.NAME_CD or
T.IWD_TRANS_NBR <> S.IWD_TRANS_NBR or
T.EMPLID <> S.EMPLID or
T.CPS_SCHOOL_CODE <> S.CPS_SCHOOL_CODE or
T.IWD_BATCH_YR <> S.IWD_BATCH_YR or
T.LAST_NAME_SSN_CHNG <> S.LAST_NAME_SSN_CHNG or
T.SSN <> S.SSN or
T.IWD_STD_LAST_NAME <> S.IWD_STD_LAST_NAME or
T.IWD_STD_FIRST_NM02 <> S.IWD_STD_FIRST_NM02 or
T.IWD_STU_MI <> S.IWD_STU_MI or
T.IWD_PERM_ADDR02 <> S.IWD_PERM_ADDR02 or
T.IWD_CITY <> S.IWD_CITY or
T.IWD_STATE <> S.IWD_STATE or
T.IWD_ZIP <> S.IWD_ZIP or
nvl(trim(T.BIRTHDATE),0) <> nvl(trim(S.BIRTHDATE),0) or
T.IWD_PERM_PHONE <> S.IWD_PERM_PHONE or
T.IWD_HAVE_DL <> S.IWD_HAVE_DL or
T.DRIVERS_LICENSE_NO <> S.DRIVERS_LICENSE_NO or
T.IWD_DL_STATE <> S.IWD_DL_STATE or
T.CITIZENSHIP_STATUS <> S.CITIZENSHIP_STATUS or
T.IWD_STU_ALIEN_REG <> S.IWD_STU_ALIEN_REG or
T.MARITAL_STAT <> S.MARITAL_STAT or
T.IWD_MAR_STAT_DT <> S.IWD_MAR_STAT_DT or
T.ENROLL_CURNT_SUM <> S.ENROLL_CURNT_SUM or
T.ENROLL_FALL <> S.ENROLL_FALL or
T.ENROLL_WINTER <> S.ENROLL_WINTER or
T.ENROLL_SPRING <> S.ENROLL_SPRING or
T.ENROLL_NEXT_SUM <> S.ENROLL_NEXT_SUM or
T.FATHER_GRADE_LVL <> S.FATHER_GRADE_LVL or
T.MOTHER_GRADE_LVL <> S.MOTHER_GRADE_LVL or
T.IWD_STATE_RES <> S.IWD_STATE_RES or
T.IWD_RES_PRIOR_94 <> S.IWD_RES_PRIOR_94 or
T.IWD_LEGAL_RES_DT <> S.IWD_LEGAL_RES_DT or
T.IWD_MALE <> S.IWD_MALE or
T.SEL_SERV_REGISTER <> S.SEL_SERV_REGISTER or
T.DEGREE_CERTIF <> S.DEGREE_CERTIF or
T.IWD_GRADE_LVL <> S.IWD_GRADE_LVL or
T.HS_GED_RCVD <> S.HS_GED_RCVD or
T.FIRST_BACH_DEGREE <> S.FIRST_BACH_DEGREE or
T.INTERESTED_IN_SL <> S.INTERESTED_IN_SL or
T.INTERESTED_IN_WS <> S.INTERESTED_IN_WS or
T.NUM_MONTH_VET_BEN <> S.NUM_MONTH_VET_BEN or
T.IWD_MTHLY_VET_BEN <> S.IWD_MTHLY_VET_BEN or
T.TAX_FORM_STU <> S.TAX_FORM_STU or
T.TAX_FORM_FILED <> S.TAX_FORM_FILED or
T.IWD_ELIG_1040A_EZ <> S.IWD_ELIG_1040A_EZ or
T.IWD_STU_AGI <> S.IWD_STU_AGI or
T.IWD_STU_TAX_PAID <> S.IWD_STU_TAX_PAID or
T.IWD_STU_NBR_EXEMP <> S.IWD_STU_NBR_EXEMP or
T.IWD_STU_EIC <> S.IWD_STU_EIC or
T.IWD_STU_WORK_INC <> S.IWD_STU_WORK_INC or
T.IWD_SPS_WORK_INC <> S.IWD_SPS_WORK_INC or
T.IWD_STU_WK_A <> S.IWD_STU_WK_A or
T.IWD_STU_WK_B <> S.IWD_STU_WK_B or
T.IWD_STU_CASH <> S.IWD_STU_CASH or
T.IWD_STU_INVEST <> S.IWD_STU_INVEST or
T.IWD_STU_BUS_WORTH <> S.IWD_STU_BUS_WORTH or
T.IWD_STU_FARM_WORTH <> S.IWD_STU_FARM_WORTH or
T.IWD_BORN_PRIOR_76 <> S.IWD_BORN_PRIOR_76 or
T.GRADUATE_STUDENT <> S.GRADUATE_STUDENT or
T.MARRIED <> S.MARRIED or
T.ORPHAN <> S.ORPHAN or
T.VETERAN <> S.VETERAN or
T.DEPENDENTS <> S.DEPENDENTS or
T.IWD_STU_FAM_MEM <> S.IWD_STU_FAM_MEM or
T.IWD_STU_MEM_COLL <> S.IWD_STU_MEM_COLL or
T.TAX_FORM_PAR <> S.TAX_FORM_PAR or
T.TAX_FORM_FILED_PAR <> S.TAX_FORM_FILED_PAR or
T.IWD_ELIG_1040A_PAR <> S.IWD_ELIG_1040A_PAR or
T.IWD_PAR_AGI <> S.IWD_PAR_AGI or
T.IWD_PAR_TAX_PAID <> S.IWD_PAR_TAX_PAID or
T.IWD_PAR_NBR_EXEMP <> S.IWD_PAR_NBR_EXEMP or
T.IWD_PAR_EIC <> S.IWD_PAR_EIC or
T.IWD_FATH_WORK_INC <> S.IWD_FATH_WORK_INC or
T.IWD_MOM_WORK_INC <> S.IWD_MOM_WORK_INC or
T.IWD_PAR_WK_A <> S.IWD_PAR_WK_A or
T.IWD_PAR_WK_B <> S.IWD_PAR_WK_B or
T.IWD_PAR_CASH <> S.IWD_PAR_CASH or
T.IWD_PAR_INVEST <> S.IWD_PAR_INVEST or
T.IWD_PAR_BUS_WORTH <> S.IWD_PAR_BUS_WORTH or
T.IWD_PAR_FARM_WORTH <> S.IWD_PAR_FARM_WORTH or
T.MARITAL_STAT_PAR <> S.MARITAL_STAT_PAR or
T.IWD_PAR_FAM_MEM <> S.IWD_PAR_FAM_MEM or
T.IWD_PAR_MEM_COLL <> S.IWD_PAR_MEM_COLL or
T.IWD_PAR_STATE_RES <> S.IWD_PAR_STATE_RES or
T.IWD_PAR_RES_PRI_94 <> S.IWD_PAR_RES_PRI_94 or
T.IWD_PAR_RES_DT <> S.IWD_PAR_RES_DT or
T.AGE_OLDER_PARENT <> S.AGE_OLDER_PARENT or
T.SCHOOL_CHOICE_1 <> S.SCHOOL_CHOICE_1 or
T.HOUSING_CODE_1 <> S.HOUSING_CODE_1 or
T.SCHOOL_CHOICE_2 <> S.SCHOOL_CHOICE_2 or
T.HOUSING_CODE_2 <> S.HOUSING_CODE_2 or
T.SCHOOL_CHOICE_3 <> S.SCHOOL_CHOICE_3 or
T.HOUSING_CODE_3 <> S.HOUSING_CODE_3 or
T.SCHOOL_CHOICE_4 <> S.SCHOOL_CHOICE_4 or
T.HOUSING_CODE_4 <> S.HOUSING_CODE_4 or
T.SCHOOL_CHOICE_5 <> S.SCHOOL_CHOICE_5 or
T.HOUSING_CODE_5 <> S.HOUSING_CODE_5 or
T.SCHOOL_CHOICE_6 <> S.SCHOOL_CHOICE_6 or
T.HOUSING_CODE_6 <> S.HOUSING_CODE_6 or
nvl(trim(T.DT_APP_COMPLETED),0) <> nvl(trim(S.DT_APP_COMPLETED),0) or
T.IWD_APP_SIGNED_BY <> S.IWD_APP_SIGNED_BY or
T.IWD_PREP_SSN <> S.IWD_PREP_SSN or
T.IWD_PREP_EIN <> S.IWD_PREP_EIN or
T.IWD_PREP_SIGNATURE <> S.IWD_PREP_SIGNATURE or
T.DEPENDENCY_OVERIDE <> S.DEPENDENCY_OVERIDE or
T.FAA_INSTITUT_NUM <> S.FAA_INSTITUT_NUM or
T.FAA_SIGNATURE <> S.FAA_SIGNATURE or
T.ADJ_EFC_CALC_REQ <> S.ADJ_EFC_CALC_REQ or
T.IWD_DRN <> S.IWD_DRN or
nvl(trim(T.TRANS_RECEIPT_DT),0) <> nvl(trim(S.TRANS_RECEIPT_DT),0) or
T.IWD_SERIAL_NO <> S.IWD_SERIAL_NO or
T.BATCH_NUMBER <> S.BATCH_NUMBER or
T.PROCESS_INSTANCE <> S.PROCESS_INSTANCE or
T.SUSPEND_REASON <> S.SUSPEND_REASON or
T.DISCARD_REASON <> S.DISCARD_REASON or
T.ERROR_CODE <> S.ERROR_CODE or
T.MAX_MATCH_LEVEL <> S.MAX_MATCH_LEVEL or
T.ID_OVERRIDE <> S.ID_OVERRIDE or
nvl(trim(T.PROCESS_DT),0) <> nvl(trim(S.PROCESS_DT),0) or
nvl(trim(T.ALT_EFFDT),0) <> nvl(trim(S.ALT_EFFDT),0) or
T.IWD_RES_PRIOR <> S.IWD_RES_PRIOR or
T.DRUG_OFFENSE_CONV <> S.DRUG_OFFENSE_CONV or
T.IWD_BORN_PRIOR <> S.IWD_BORN_PRIOR or
T.FATHER_SSN <> S.FATHER_SSN or
T.FATHER_LAST_NAME <> S.FATHER_LAST_NAME or
T.MOTHER_SSN <> S.MOTHER_SSN or
T.MOTHER_LAST_NAME <> S.MOTHER_LAST_NAME or
T.IWD_PAR_RES_PRI <> S.IWD_PAR_RES_PRI or
T.IWD_INPUT_REC_TYPE <> S.IWD_INPUT_REC_TYPE or
T.IWD_STU_WK_C <> S.IWD_STU_WK_C or
T.CHILDREN <> S.CHILDREN or
T.IWD_PAR_MAR_ST_DT <> S.IWD_PAR_MAR_ST_DT or
T.EFC_STATUS_MSG <> S.EFC_STATUS_MSG or
T.FATHER_1ST_NM_INIT <> S.FATHER_1ST_NM_INIT or
nvl(trim(T.FATHER_DOB),0) <> nvl(trim(S.FATHER_DOB),0) or
T.MOTHER_1ST_NM_INIT <> S.MOTHER_1ST_NM_INIT or
nvl(trim(T.MOTHER_DOB),0) <> nvl(trim(S.MOTHER_DOB),0) or
T.ISIR_STU_ENRL_STAT <> S.ISIR_STU_ENRL_STAT or
T.IWD_PAR_EMAIL <> S.IWD_PAR_EMAIL or
T.SFA_ACTIVE_DUTY <> S.SFA_ACTIVE_DUTY or
T.SFA_SSI_INCOME <> S.SFA_SSI_INCOME or
T.SFA_FOOD_STAMPS <> S.SFA_FOOD_STAMPS or
T.SFA_SCHL_LUNCH_PRG <> S.SFA_SCHL_LUNCH_PRG or
T.SFA_TANF_BENEFITS <> S.SFA_TANF_BENEFITS or
T.SFA_WIC_BENEFITS <> S.SFA_WIC_BENEFITS or
T.SFA_PAR_SSI_INCOME <> S.SFA_PAR_SSI_INCOME or
T.SFA_PAR_FOOD_STAMP <> S.SFA_PAR_FOOD_STAMP or
T.SFA_PAR_LUNCH_BEN <> S.SFA_PAR_LUNCH_BEN or
T.SFA_PAR_TANF_BEN <> S.SFA_PAR_TANF_BEN or
T.SFA_PAR_WIC_BEN <> S.SFA_PAR_WIC_BEN or
T.SFA_INTRSTD_IN_WSL <> S.SFA_INTRSTD_IN_WSL or
T.SFA_STDNT_GENDER <> S.SFA_STDNT_GENDER or
T.SFA_HS_DIP_EQUIV <> S.SFA_HS_DIP_EQUIV or
T.SFA_SCHL_CHOICE_7 <> S.SFA_SCHL_CHOICE_7 or
T.SFA_HOUSING_CODE7 <> S.SFA_HOUSING_CODE7 or
T.SFA_SCHL_CHOICE_8 <> S.SFA_SCHL_CHOICE_8 or
T.SFA_HOUSING_CODE8 <> S.SFA_HOUSING_CODE8 or
T.SFA_SCHL_CHOICE_9 <> S.SFA_SCHL_CHOICE_9 or
T.SFA_HOUSING_CODE9 <> S.SFA_HOUSING_CODE9 or
T.SFA_SCHL_CHOICE_10 <> S.SFA_SCHL_CHOICE_10 or
T.SFA_HOUSING_CODE10 <> S.SFA_HOUSING_CODE10 or
T.SFA_TCH_COURSE_WRK <> S.SFA_TCH_COURSE_WRK or
T.SFA_EMANCIPT_MINOR <> S.SFA_EMANCIPT_MINOR or
T.SFA_LEGAL_GUARDIAN <> S.SFA_LEGAL_GUARDIAN or
T.SFA_YOUTH_LIASON <> S.SFA_YOUTH_LIASON or
T.SFA_YOUTH_HUD <> S.SFA_YOUTH_HUD or
T.SFA_RISK_HOMELESS <> S.SFA_RISK_HOMELESS or
T.SFA_STU_DISLOC_WRK <> S.SFA_STU_DISLOC_WRK or
T.SFA_STU_EDU_CREDIT <> S.SFA_STU_EDU_CREDIT or
T.SFA_STU_SUP_PAID <> S.SFA_STU_SUP_PAID or
T.SFA_STU_NEED_EMPL <> S.SFA_STU_NEED_EMPL or
T.SFA_STU_GRANT_AID <> S.SFA_STU_GRANT_AID or
T.SFA_STU_COMBAT_PAY <> S.SFA_STU_COMBAT_PAY or
T.SFA_STU_PEN_PAY <> S.SFA_STU_PEN_PAY or
T.SFA_STU_IRA_PAY <> S.SFA_STU_IRA_PAY or
T.SFA_STU_SUP_RECV <> S.SFA_STU_SUP_RECV or
T.SFA_STU_INT_INCOME <> S.SFA_STU_INT_INCOME or
T.SFA_STU_IRA_DIST <> S.SFA_STU_IRA_DIST or
T.SFA_STU_UNTAX_PEN <> S.SFA_STU_UNTAX_PEN or
T.SFA_STU_MIL_ALLOW <> S.SFA_STU_MIL_ALLOW or
T.SFA_STU_VET_ED_BEN <> S.SFA_STU_VET_ED_BEN or
T.SFA_STU_UNTAX_INC <> S.SFA_STU_UNTAX_INC or
T.SFA_STU_NREP_MONEY <> S.SFA_STU_NREP_MONEY or
T.SFA_PAR_DISLOC_WRK <> S.SFA_PAR_DISLOC_WRK or
T.SFA_PAR_EDU_CREDIT <> S.SFA_PAR_EDU_CREDIT or
T.SFA_PAR_SUP_PAID <> S.SFA_PAR_SUP_PAID or
T.SFA_PAR_NEED_EMPL <> S.SFA_PAR_NEED_EMPL or
T.SFA_PAR_GRANT_AID <> S.SFA_PAR_GRANT_AID or
T.SFA_PAR_COMBAT_PAY <> S.SFA_PAR_COMBAT_PAY or
T.SFA_PAR_PEN_PAY <> S.SFA_PAR_PEN_PAY or
T.SFA_PAR_IRA_PAY <> S.SFA_PAR_IRA_PAY or
T.SFA_PAR_SUP_RECV <> S.SFA_PAR_SUP_RECV or
T.SFA_PAR_INT_INCOME <> S.SFA_PAR_INT_INCOME or
T.SFA_PAR_IRA_DIST <> S.SFA_PAR_IRA_DIST or
T.SFA_PAR_UNTAX_PEN <> S.SFA_PAR_UNTAX_PEN or
T.SFA_PAR_MIL_ALLOW <> S.SFA_PAR_MIL_ALLOW or
T.SFA_PAR_VET_ED_BEN <> S.SFA_PAR_VET_ED_BEN or
T.SFA_PAR_UNTAX_INC <> S.SFA_PAR_UNTAX_INC or
T.SFA_RECV_VET_BEN <> S.SFA_RECV_VET_BEN or
T.SFA_VET_BEN_TYPE <> S.SFA_VET_BEN_TYPE or
T.SFA_STU_COOP_EARN <> S.SFA_STU_COOP_EARN or
T.SFA_PAR_COOP_EARN <> S.SFA_PAR_COOP_EARN or
T.SFA_HIGH_SCHL_NAME <> S.SFA_HIGH_SCHL_NAME or
T.SFA_HIGH_SCHL_CITY <> S.SFA_HIGH_SCHL_CITY or
T.SFA_HIGH_SCHL_STAT <> S.SFA_HIGH_SCHL_STAT or
T.SFA_HIGH_SCHL_CODE <> S.SFA_HIGH_SCHL_CODE or
T.SFA_STU_ASSET_THRS <> S.SFA_STU_ASSET_THRS or
T.SFA_PAR_ASSET_THRS <> S.SFA_PAR_ASSET_THRS or
T.SFA_STU_TAX_RET <> S.SFA_STU_TAX_RET or
T.SFA_PAR_TAX_RET <> S.SFA_PAR_TAX_RET or
T.DATA_ORIGIN = 'D'
when not matched then
insert (
T.ECTRANSID,
T.ECQUEUEINSTANCE,
T.ECTRANSINOUTSW,
T.ISIR_SEQ_NO,
T.SRC_SYS_ID,
T.ISIR_LOAD_STATUS,
T.ISIR_LOAD_ACTION,
T.ADMIT_LVL,
T.ORIG_SSN,
T.NAME_CD,
T.IWD_TRANS_NBR,
T.EMPLID,
T.CPS_SCHOOL_CODE,
T.IWD_BATCH_YR,
T.LAST_NAME_SSN_CHNG,
T.SSN,
T.IWD_STD_LAST_NAME,
T.IWD_STD_FIRST_NM02,
T.IWD_STU_MI,
T.IWD_PERM_ADDR02,
T.IWD_CITY,
T.IWD_STATE,
T.IWD_ZIP,
T.BIRTHDATE,
T.IWD_PERM_PHONE,
T.IWD_HAVE_DL,
T.DRIVERS_LICENSE_NO,
T.IWD_DL_STATE,
T.CITIZENSHIP_STATUS,
T.IWD_STU_ALIEN_REG,
T.MARITAL_STAT,
T.IWD_MAR_STAT_DT,
T.ENROLL_CURNT_SUM,
T.ENROLL_FALL,
T.ENROLL_WINTER,
T.ENROLL_SPRING,
T.ENROLL_NEXT_SUM,
T.FATHER_GRADE_LVL,
T.MOTHER_GRADE_LVL,
T.IWD_STATE_RES,
T.IWD_RES_PRIOR_94,
T.IWD_LEGAL_RES_DT,
T.IWD_MALE,
T.SEL_SERV_REGISTER,
T.DEGREE_CERTIF,
T.IWD_GRADE_LVL,
T.HS_GED_RCVD,
T.FIRST_BACH_DEGREE,
T.INTERESTED_IN_SL,
T.INTERESTED_IN_WS,
T.NUM_MONTH_VET_BEN,
T.IWD_MTHLY_VET_BEN,
T.TAX_FORM_STU,
T.TAX_FORM_FILED,
T.IWD_ELIG_1040A_EZ,
T.IWD_STU_AGI,
T.IWD_STU_TAX_PAID,
T.IWD_STU_NBR_EXEMP,
T.IWD_STU_EIC,
T.IWD_STU_WORK_INC,
T.IWD_SPS_WORK_INC,
T.IWD_STU_WK_A,
T.IWD_STU_WK_B,
T.IWD_STU_CASH,
T.IWD_STU_INVEST,
T.IWD_STU_BUS_WORTH,
T.IWD_STU_FARM_WORTH,
T.IWD_BORN_PRIOR_76,
T.GRADUATE_STUDENT,
T.MARRIED,
T.ORPHAN,
T.VETERAN,
T.DEPENDENTS,
T.IWD_STU_FAM_MEM,
T.IWD_STU_MEM_COLL,
T.TAX_FORM_PAR,
T.TAX_FORM_FILED_PAR,
T.IWD_ELIG_1040A_PAR,
T.IWD_PAR_AGI,
T.IWD_PAR_TAX_PAID,
T.IWD_PAR_NBR_EXEMP,
T.IWD_PAR_EIC,
T.IWD_FATH_WORK_INC,
T.IWD_MOM_WORK_INC,
T.IWD_PAR_WK_A,
T.IWD_PAR_WK_B,
T.IWD_PAR_CASH,
T.IWD_PAR_INVEST,
T.IWD_PAR_BUS_WORTH,
T.IWD_PAR_FARM_WORTH,
T.MARITAL_STAT_PAR,
T.IWD_PAR_FAM_MEM,
T.IWD_PAR_MEM_COLL,
T.IWD_PAR_STATE_RES,
T.IWD_PAR_RES_PRI_94,
T.IWD_PAR_RES_DT,
T.AGE_OLDER_PARENT,
T.SCHOOL_CHOICE_1,
T.HOUSING_CODE_1,
T.SCHOOL_CHOICE_2,
T.HOUSING_CODE_2,
T.SCHOOL_CHOICE_3,
T.HOUSING_CODE_3,
T.SCHOOL_CHOICE_4,
T.HOUSING_CODE_4,
T.SCHOOL_CHOICE_5,
T.HOUSING_CODE_5,
T.SCHOOL_CHOICE_6,
T.HOUSING_CODE_6,
T.DT_APP_COMPLETED,
T.IWD_APP_SIGNED_BY,
T.IWD_PREP_SSN,
T.IWD_PREP_EIN,
T.IWD_PREP_SIGNATURE,
T.DEPENDENCY_OVERIDE,
T.FAA_INSTITUT_NUM,
T.FAA_SIGNATURE,
T.ADJ_EFC_CALC_REQ,
T.IWD_DRN,
T.TRANS_RECEIPT_DT,
T.IWD_SERIAL_NO,
T.BATCH_NUMBER,
T.PROCESS_INSTANCE,
T.SUSPEND_REASON,
T.DISCARD_REASON,
T.ERROR_CODE,
T.MAX_MATCH_LEVEL,
T.ID_OVERRIDE,
T.PROCESS_DT,
T.ALT_EFFDT,
T.IWD_RES_PRIOR,
T.DRUG_OFFENSE_CONV,
T.IWD_BORN_PRIOR,
T.FATHER_SSN,
T.FATHER_LAST_NAME,
T.MOTHER_SSN,
T.MOTHER_LAST_NAME,
T.IWD_PAR_RES_PRI,
T.IWD_INPUT_REC_TYPE,
T.IWD_STU_WK_C,
T.CHILDREN,
T.IWD_PAR_MAR_ST_DT,
T.EFC_STATUS_MSG,
T.FATHER_1ST_NM_INIT,
T.FATHER_DOB,
T.MOTHER_1ST_NM_INIT,
T.MOTHER_DOB,
T.ISIR_STU_ENRL_STAT,
T.IWD_PAR_EMAIL,
T.SFA_ACTIVE_DUTY,
T.SFA_SSI_INCOME,
T.SFA_FOOD_STAMPS,
T.SFA_SCHL_LUNCH_PRG,
T.SFA_TANF_BENEFITS,
T.SFA_WIC_BENEFITS,
T.SFA_PAR_SSI_INCOME,
T.SFA_PAR_FOOD_STAMP,
T.SFA_PAR_LUNCH_BEN,
T.SFA_PAR_TANF_BEN,
T.SFA_PAR_WIC_BEN,
T.SFA_INTRSTD_IN_WSL,
T.SFA_STDNT_GENDER,
T.SFA_HS_DIP_EQUIV,
T.SFA_SCHL_CHOICE_7,
T.SFA_HOUSING_CODE7,
T.SFA_SCHL_CHOICE_8,
T.SFA_HOUSING_CODE8,
T.SFA_SCHL_CHOICE_9,
T.SFA_HOUSING_CODE9,
T.SFA_SCHL_CHOICE_10,
T.SFA_HOUSING_CODE10,
T.SFA_TCH_COURSE_WRK,
T.SFA_EMANCIPT_MINOR,
T.SFA_LEGAL_GUARDIAN,
T.SFA_YOUTH_LIASON,
T.SFA_YOUTH_HUD,
T.SFA_RISK_HOMELESS,
T.SFA_STU_DISLOC_WRK,
T.SFA_STU_EDU_CREDIT,
T.SFA_STU_SUP_PAID,
T.SFA_STU_NEED_EMPL,
T.SFA_STU_GRANT_AID,
T.SFA_STU_COMBAT_PAY,
T.SFA_STU_PEN_PAY,
T.SFA_STU_IRA_PAY,
T.SFA_STU_SUP_RECV,
T.SFA_STU_INT_INCOME,
T.SFA_STU_IRA_DIST,
T.SFA_STU_UNTAX_PEN,
T.SFA_STU_MIL_ALLOW,
T.SFA_STU_VET_ED_BEN,
T.SFA_STU_UNTAX_INC,
T.SFA_STU_NREP_MONEY,
T.SFA_PAR_DISLOC_WRK,
T.SFA_PAR_EDU_CREDIT,
T.SFA_PAR_SUP_PAID,
T.SFA_PAR_NEED_EMPL,
T.SFA_PAR_GRANT_AID,
T.SFA_PAR_COMBAT_PAY,
T.SFA_PAR_PEN_PAY,
T.SFA_PAR_IRA_PAY,
T.SFA_PAR_SUP_RECV,
T.SFA_PAR_INT_INCOME,
T.SFA_PAR_IRA_DIST,
T.SFA_PAR_UNTAX_PEN,
T.SFA_PAR_MIL_ALLOW,
T.SFA_PAR_VET_ED_BEN,
T.SFA_PAR_UNTAX_INC,
T.SFA_RECV_VET_BEN,
T.SFA_VET_BEN_TYPE,
T.SFA_STU_COOP_EARN,
T.SFA_PAR_COOP_EARN,
T.SFA_HIGH_SCHL_NAME,
T.SFA_HIGH_SCHL_CITY,
T.SFA_HIGH_SCHL_STAT,
T.SFA_HIGH_SCHL_CODE,
T.SFA_STU_ASSET_THRS,
T.SFA_PAR_ASSET_THRS,
T.SFA_STU_TAX_RET,
T.SFA_PAR_TAX_RET,
T.LOAD_ERROR,
T.DATA_ORIGIN,
T.CREATED_EW_DTTM,
T.LASTUPD_EW_DTTM,
T.BATCH_SID
)
values (
S.ECTRANSID,
S.ECQUEUEINSTANCE,
S.ECTRANSINOUTSW,
S.ISIR_SEQ_NO,
'CS90',
S.ISIR_LOAD_STATUS,
S.ISIR_LOAD_ACTION,
S.ADMIT_LVL,
S.ORIG_SSN,
S.NAME_CD,
S.IWD_TRANS_NBR,
S.EMPLID,
S.CPS_SCHOOL_CODE,
S.IWD_BATCH_YR,
S.LAST_NAME_SSN_CHNG,
S.SSN,
S.IWD_STD_LAST_NAME,
S.IWD_STD_FIRST_NM02,
S.IWD_STU_MI,
S.IWD_PERM_ADDR02,
S.IWD_CITY,
S.IWD_STATE,
S.IWD_ZIP,
S.BIRTHDATE,
S.IWD_PERM_PHONE,
S.IWD_HAVE_DL,
S.DRIVERS_LICENSE_NO,
S.IWD_DL_STATE,
S.CITIZENSHIP_STATUS,
S.IWD_STU_ALIEN_REG,
S.MARITAL_STAT,
S.IWD_MAR_STAT_DT,
S.ENROLL_CURNT_SUM,
S.ENROLL_FALL,
S.ENROLL_WINTER,
S.ENROLL_SPRING,
S.ENROLL_NEXT_SUM,
S.FATHER_GRADE_LVL,
S.MOTHER_GRADE_LVL,
S.IWD_STATE_RES,
S.IWD_RES_PRIOR_94,
S.IWD_LEGAL_RES_DT,
S.IWD_MALE,
S.SEL_SERV_REGISTER,
S.DEGREE_CERTIF,
S.IWD_GRADE_LVL,
S.HS_GED_RCVD,
S.FIRST_BACH_DEGREE,
S.INTERESTED_IN_SL,
S.INTERESTED_IN_WS,
S.NUM_MONTH_VET_BEN,
S.IWD_MTHLY_VET_BEN,
S.TAX_FORM_STU,
S.TAX_FORM_FILED,
S.IWD_ELIG_1040A_EZ,
S.IWD_STU_AGI,
S.IWD_STU_TAX_PAID,
S.IWD_STU_NBR_EXEMP,
S.IWD_STU_EIC,
S.IWD_STU_WORK_INC,
S.IWD_SPS_WORK_INC,
S.IWD_STU_WK_A,
S.IWD_STU_WK_B,
S.IWD_STU_CASH,
S.IWD_STU_INVEST,
S.IWD_STU_BUS_WORTH,
S.IWD_STU_FARM_WORTH,
S.IWD_BORN_PRIOR_76,
S.GRADUATE_STUDENT,
S.MARRIED,
S.ORPHAN,
S.VETERAN,
S.DEPENDENTS,
S.IWD_STU_FAM_MEM,
S.IWD_STU_MEM_COLL,
S.TAX_FORM_PAR,
S.TAX_FORM_FILED_PAR,
S.IWD_ELIG_1040A_PAR,
S.IWD_PAR_AGI,
S.IWD_PAR_TAX_PAID,
S.IWD_PAR_NBR_EXEMP,
S.IWD_PAR_EIC,
S.IWD_FATH_WORK_INC,
S.IWD_MOM_WORK_INC,
S.IWD_PAR_WK_A,
S.IWD_PAR_WK_B,
S.IWD_PAR_CASH,
S.IWD_PAR_INVEST,
S.IWD_PAR_BUS_WORTH,
S.IWD_PAR_FARM_WORTH,
S.MARITAL_STAT_PAR,
S.IWD_PAR_FAM_MEM,
S.IWD_PAR_MEM_COLL,
S.IWD_PAR_STATE_RES,
S.IWD_PAR_RES_PRI_94,
S.IWD_PAR_RES_DT,
S.AGE_OLDER_PARENT,
S.SCHOOL_CHOICE_1,
S.HOUSING_CODE_1,
S.SCHOOL_CHOICE_2,
S.HOUSING_CODE_2,
S.SCHOOL_CHOICE_3,
S.HOUSING_CODE_3,
S.SCHOOL_CHOICE_4,
S.HOUSING_CODE_4,
S.SCHOOL_CHOICE_5,
S.HOUSING_CODE_5,
S.SCHOOL_CHOICE_6,
S.HOUSING_CODE_6,
S.DT_APP_COMPLETED,
S.IWD_APP_SIGNED_BY,
S.IWD_PREP_SSN,
S.IWD_PREP_EIN,
S.IWD_PREP_SIGNATURE,
S.DEPENDENCY_OVERIDE,
S.FAA_INSTITUT_NUM,
S.FAA_SIGNATURE,
S.ADJ_EFC_CALC_REQ,
S.IWD_DRN,
S.TRANS_RECEIPT_DT,
S.IWD_SERIAL_NO,
S.BATCH_NUMBER,
S.PROCESS_INSTANCE,
S.SUSPEND_REASON,
S.DISCARD_REASON,
S.ERROR_CODE,
S.MAX_MATCH_LEVEL,
S.ID_OVERRIDE,
S.PROCESS_DT,
S.ALT_EFFDT,
S.IWD_RES_PRIOR,
S.DRUG_OFFENSE_CONV,
S.IWD_BORN_PRIOR,
S.FATHER_SSN,
S.FATHER_LAST_NAME,
S.MOTHER_SSN,
S.MOTHER_LAST_NAME,
S.IWD_PAR_RES_PRI,
S.IWD_INPUT_REC_TYPE,
S.IWD_STU_WK_C,
S.CHILDREN,
S.IWD_PAR_MAR_ST_DT,
S.EFC_STATUS_MSG,
S.FATHER_1ST_NM_INIT,
S.FATHER_DOB,
S.MOTHER_1ST_NM_INIT,
S.MOTHER_DOB,
S.ISIR_STU_ENRL_STAT,
S.IWD_PAR_EMAIL,
S.SFA_ACTIVE_DUTY,
S.SFA_SSI_INCOME,
S.SFA_FOOD_STAMPS,
S.SFA_SCHL_LUNCH_PRG,
S.SFA_TANF_BENEFITS,
S.SFA_WIC_BENEFITS,
S.SFA_PAR_SSI_INCOME,
S.SFA_PAR_FOOD_STAMP,
S.SFA_PAR_LUNCH_BEN,
S.SFA_PAR_TANF_BEN,
S.SFA_PAR_WIC_BEN,
S.SFA_INTRSTD_IN_WSL,
S.SFA_STDNT_GENDER,
S.SFA_HS_DIP_EQUIV,
S.SFA_SCHL_CHOICE_7,
S.SFA_HOUSING_CODE7,
S.SFA_SCHL_CHOICE_8,
S.SFA_HOUSING_CODE8,
S.SFA_SCHL_CHOICE_9,
S.SFA_HOUSING_CODE9,
S.SFA_SCHL_CHOICE_10,
S.SFA_HOUSING_CODE10,
S.SFA_TCH_COURSE_WRK,
S.SFA_EMANCIPT_MINOR,
S.SFA_LEGAL_GUARDIAN,
S.SFA_YOUTH_LIASON,
S.SFA_YOUTH_HUD,
S.SFA_RISK_HOMELESS,
S.SFA_STU_DISLOC_WRK,
S.SFA_STU_EDU_CREDIT,
S.SFA_STU_SUP_PAID,
S.SFA_STU_NEED_EMPL,
S.SFA_STU_GRANT_AID,
S.SFA_STU_COMBAT_PAY,
S.SFA_STU_PEN_PAY,
S.SFA_STU_IRA_PAY,
S.SFA_STU_SUP_RECV,
S.SFA_STU_INT_INCOME,
S.SFA_STU_IRA_DIST,
S.SFA_STU_UNTAX_PEN,
S.SFA_STU_MIL_ALLOW,
S.SFA_STU_VET_ED_BEN,
S.SFA_STU_UNTAX_INC,
S.SFA_STU_NREP_MONEY,
S.SFA_PAR_DISLOC_WRK,
S.SFA_PAR_EDU_CREDIT,
S.SFA_PAR_SUP_PAID,
S.SFA_PAR_NEED_EMPL,
S.SFA_PAR_GRANT_AID,
S.SFA_PAR_COMBAT_PAY,
S.SFA_PAR_PEN_PAY,
S.SFA_PAR_IRA_PAY,
S.SFA_PAR_SUP_RECV,
S.SFA_PAR_INT_INCOME,
S.SFA_PAR_IRA_DIST,
S.SFA_PAR_UNTAX_PEN,
S.SFA_PAR_MIL_ALLOW,
S.SFA_PAR_VET_ED_BEN,
S.SFA_PAR_UNTAX_INC,
S.SFA_RECV_VET_BEN,
S.SFA_VET_BEN_TYPE,
S.SFA_STU_COOP_EARN,
S.SFA_PAR_COOP_EARN,
S.SFA_HIGH_SCHL_NAME,
S.SFA_HIGH_SCHL_CITY,
S.SFA_HIGH_SCHL_STAT,
S.SFA_HIGH_SCHL_CODE,
S.SFA_STU_ASSET_THRS,
S.SFA_PAR_ASSET_THRS,
S.SFA_STU_TAX_RET,
S.SFA_PAR_TAX_RET,
'N',
'S',
sysdate,
sysdate,
1234);


strSqlCommand   := 'SET intRowCount';
intRowCount     := SQL%ROWCOUNT;

strSqlCommand := 'commit';
commit;

strMessage01    := '# of PS_ISIR_00_1_EC rows merged: ' || TO_CHAR(intRowCount,'999,999,999,999');
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_DETAIL';
COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_DETAIL
        (
                i_TargetTableName   => 'PS_ISIR_00_1_EC',
                i_Action            => 'MERGE',
                i_RowCount          => intRowCount
        );


strMessage01    := 'Updating AMSTG_OWNER.UM_STAGE_JOBS';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand   := 'update TABLE_STATUS on AMSTG_OWNER.UM_STAGE_JOBS';
update AMSTG_OWNER.UM_STAGE_JOBS
   set TABLE_STATUS = 'Deleting',
       OLD_MAX_SCN = NEW_MAX_SCN
 where TABLE_NAME = 'PS_ISIR_00_1_EC';

strSqlCommand := 'commit';
commit;


strMessage01    := 'Updating DATA_ORIGIN on AMSTG_OWNER.PS_ISIR_00_1_EC';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand   := 'update DATA_ORIGIN on AMSTG_OWNER.PS_ISIR_00_1_EC';
update AMSTG_OWNER.PS_ISIR_00_1_EC T
        set T.DATA_ORIGIN = 'D',
               T.LASTUPD_EW_DTTM = SYSDATE
 where T.DATA_ORIGIN <> 'D'
   and exists 
(select 1 from 
(select ECTRANSID, ECQUEUEINSTANCE, ECTRANSINOUTSW, ISIR_SEQ_NO
   from AMSTG_OWNER.PS_ISIR_00_1_EC T2
  where (select DELETE_FLG from AMSTG_OWNER.UM_STAGE_JOBS where TABLE_NAME = 'PS_ISIR_00_1_EC') = 'Y'
  minus
 select ECTRANSID, ECQUEUEINSTANCE, ECTRANSINOUTSW, ISIR_SEQ_NO
   from SYSADM.PS_ISIR_00_1_EC@AMSOURCE S2
  where (select DELETE_FLG from AMSTG_OWNER.UM_STAGE_JOBS where TABLE_NAME = 'PS_ISIR_00_1_EC') = 'Y'
   ) S
 where T.ECTRANSID = S.ECTRANSID
   and T.ECQUEUEINSTANCE = S.ECQUEUEINSTANCE
   and T.ECTRANSINOUTSW = S.ECTRANSINOUTSW
   and T.ISIR_SEQ_NO = S.ISIR_SEQ_NO
   and T.SRC_SYS_ID = 'CS90' 
   ) 
;

strSqlCommand   := 'SET intRowCount';
intRowCount     := SQL%ROWCOUNT;

strSqlCommand := 'commit';
commit;

strMessage01    := '# of PS_ISIR_00_1_EC rows updated: ' || TO_CHAR(intRowCount,'999,999,999,999');
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_DETAIL';
COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_DETAIL
        (
                i_TargetTableName   => 'PS_ISIR_00_1_EC',
                i_Action            => 'UPDATE',
                i_RowCount          => intRowCount
        );


strMessage01    := 'Updating AMSTG_OWNER.UM_STAGE_JOBS';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand   := 'update END_DT on AMSTG_OWNER.UM_STAGE_JOBS';

update AMSTG_OWNER.UM_STAGE_JOBS
   set TABLE_STATUS = 'Complete',
       END_DT = SYSDATE
 where TABLE_NAME = 'PS_ISIR_00_1_EC'
;

strSqlCommand := 'commit';
commit;


strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_SUCCESS';
COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_SUCCESS;

strMessage01    := strProcessName || ' is complete.';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);


EXCEPTION
    WHEN OTHERS THEN
        numSqlCode := SQLCODE;
        strSqlErrm := SQLERRM;

        ROLLBACK;
  
        strMessage01 := 'Error code: ' || TO_CHAR(SQLCODE) || ' Error Message: ' || SQLERRM;
        strMessage02 := TO_CHAR(SQLCODE);
  
        COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_FAILURE
                       (i_SqlCommand    => strSqlCommand,
                        i_ErrorText     => strMessage01,
                        i_ErrorCode     => strMessage02,
                        i_ErrorMessage  => strSqlErrm
                       );
               
        strMessage01 := 'Error...'
                        || strNewLine   || 'SQL Command:   ' || strSqlCommand
                        || strNewLine   || 'Error code:    ' || numSqlCode
                        || strNewLine   || 'Error Message: ' || strSqlErrm;

        COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);
        RAISE_APPLICATION_ERROR( -20001, strMessage01);

END AM_PS_ISIR_00_1_EC_P;
/
