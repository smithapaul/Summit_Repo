CREATE OR REPLACE PROCEDURE             PS_SFA_SAP_STDNT_P AUTHID CURRENT_USER IS

------------------------------------------------------------------------
-- George Adams
--
-- Loads stage table PS_SFA_SAP_STDNT from PeopleSoft table PS_SFA_SAP_STDNT.
--
-- V01  SMT-xxxx 04/06/2017,    George Adams
--                              Converted from PS_SFA_SAP_STDNT.SQL
--
------------------------------------------------------------------------

        strMartId                       Varchar2(50)    := 'CSW';
        strProcessName                  Varchar2(100)   := 'PS_SFA_SAP_STDNT';
        intProcessSid                   Integer;
        dtProcessStart                  Date            := SYSDATE;
        strMessage01                    Varchar2(4000);
        strMessage02                    Varchar2(512);
        strMessage03                    Varchar2(512)   :='';
        strNewLine                      Varchar2(2)     := chr(13) || chr(10);
        strSqlCommand                   Varchar2(32767) :='';
        strSqlDynamic                   Varchar2(32767) :='';
        strClientInfo                   Varchar2(100);
        intRowCount                     Integer;
        intTotalRowCount                Integer         := 0;
        numSqlCode                      Number;
        strSqlErrm                      Varchar2(4000);
        intTries                        Integer;

BEGIN
strSqlCommand := 'DBMS_APPLICATION_INFO.SET_CLIENT_INFO';
DBMS_APPLICATION_INFO.SET_CLIENT_INFO (strProcessName);

strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_INIT';
COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_INIT
        (
                i_MartId                => strMartId,
                i_ProcessName           => strProcessName,
                i_ProcessStartTime      => dtProcessStart,
                o_ProcessSid            => intProcessSid
        );

strMessage01    := 'Updating CSSTG_OWNER.UM_STAGE_JOBS';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);


strSqlCommand   := 'update START_DT on CSSTG_OWNER.UM_STAGE_JOBS';
update CSSTG_OWNER.UM_STAGE_JOBS
   set TABLE_STATUS = 'Reading',
       START_DT = SYSDATE,
       END_DT = NULL
 where TABLE_NAME = 'PS_SFA_SAP_STDNT'
;

strSqlCommand := 'commit';
commit;


strSqlCommand   := 'update TABLE_STATUS on CSSTG_OWNER.UM_STAGE_JOBS';
update CSSTG_OWNER.UM_STAGE_JOBS
   set TABLE_STATUS = 'Truncating',
       NEW_MAX_SCN = (select /*+ full(S) */ max(ORA_ROWSCN) from SYSADM.PS_SFA_SAP_STDNT@SASOURCE S)
 where TABLE_NAME = 'PS_SFA_SAP_STDNT'
;

strSqlCommand := 'commit';
commit;


strSqlDynamic   := 'truncate table CSSTG_OWNER.PS_T_SFA_SAP_STDNT';
strSqlCommand   := 'SMT_UTILITY.EXECUTE_IMMEDIATE: ' || strSqlDynamic;
COMMON_OWNER.SMT_UTILITY.EXECUTE_IMMEDIATE
                (
                i_SqlStatement          => strSqlDynamic,
                i_MaxTries              => 10,
                i_WaitSeconds           => 10,
                o_Tries                 => intTries
                );


strSqlCommand   := 'Loading temp table for CSSTG_OWNER.UM_STAGE_JOBS';
update CSSTG_OWNER.UM_STAGE_JOBS
   set TABLE_STATUS = 'Loading'
 where TABLE_NAME = 'PS_SFA_SAP_STDNT'
;

strSqlCommand := 'commit';
commit;


strSqlCommand := 'insert';
insert /*+ append */  into CSSTG_OWNER.PS_T_SFA_SAP_STDNT
select /*+ full(S) */
nvl(trim(EMPLID),'-') EMPLID,
nvl(trim(INSTITUTION),'-') INSTITUTION,
nvl(trim(ACAD_CAREER),'-') ACAD_CAREER,
nvl(trim(AID_YEAR),'-') AID_YEAR,
nvl(trim(STRM),'-') STRM,
PROCESS_DTTM,
'CS90' SRC_SYS_ID,
ACAD_PROG,
STDNT_CAR_NBR,
ACAD_PLAN,
ACAD_STANDING,
SFA_INUSE_FLAG1,
SFA_SAP_STATUS_C1,
SFA_FAIL_FLAG1,
SFA_EXCPT_USED1,
SFA_SAP_ACST_TERM,
UNT_TAKEN,
SFA_SAP_MAX_ATTUNT,
SFA_SAP_MAX_ATTFRM,
SFA_SAP_MAX_ATTMPT,
SFA_INUSE_FLAG2,
SFA_SAP_STATUS_C2,
SFA_FAIL_FLAG2,
SFA_EXCPT_USED2,
CUM_RESIDENT_TERMS,
SFA_SAP_MAX_TRMFRM,
SFA_SAP_MAX_TERMS,
SFA_INUSE_FLAG3,
SFA_SAP_STATUS_C3,
SFA_FAIL_FLAG3,
SFA_EXCPT_USED3,
CUR_GPA,
SFA_SAP_MIN_TRMFRM,
SFA_SAP_MIN_TERM,
SFA_INUSE_FLAG4,
SFA_SAP_STATUS_C4,
SFA_FAIL_FLAG4,
SFA_EXCPT_USED4,
CUM_GPA,
SFA_SAP_MIN_CUMFRM,
SFA_SAP_MIN_CUM,
SFA_INUSE_FLAG5,
SFA_SAP_STATUS_C5,
SFA_FAIL_FLAG5,
SFA_EXCPT_USED5,
SFA_CUR_ATT_UNITS,
SFA_CUR_ERN_UNITS,
SFA_SAP_TRM_ERNEDF,
SFA_SAP_TRM_ERNPCF,
SFA_SAP_TRM_EARNED,
SFA_SAP_TRM_EARNPC,
SFA_INUSE_FLAG6,
SFA_SAP_STATUS_C6,
SFA_FAIL_FLAG6,
SFA_EXCPT_USED6,
SFA_CUM_ATT_UNITS,
SFA_CUM_ERN_UNITS,
SFA_SAP_CUM_ERNEDF,
SFA_SAP_CUM_ERNPCF,
SFA_SAP_CUM_EARNED,
SFA_SAP_CUM_EARNPC,
SFA_INUSE_FLAG7,
SFA_SAP_STATUS_C7,
SFA_FAIL_FLAG7,
SFA_EXCPT_USED7,
SFA_SAP_NBR_TERMS,
SFA_SAP_2YR_GPA,
SFA_SAP_CUMGPA_FRM,
SFA_SAP_CUMGPA_TO,
SFA_INUSE_FLAG8,
SFA_SAP_STATUS_C8,
SFA_FAIL_FLAG8,
SFA_EXCPT_USED8,
SFA_SAP_CURERN_PCT,
SFA_SAP_CUMERN_PCT,
SFA_SAP_STATUS,
SFA_SAP_STAT_CALC,
SFA_UPDT_OPRID,
SFA_UPDT_DTTM,
SFA_PROCESS_OPRID,
SFA_SAP_PROCMSG,
substr(to_char(trim(SFA_SAP_COMMENTS)),1,4000) SFA_SAP_COMMENTS,
to_number(ORA_ROWSCN) SRC_SCN
  from SYSADM.PS_SFA_SAP_STDNT@SASOURCE S
 where EMPLID between '00000000' and '99999999'
   and length(EMPLID) = 8
;

strSqlCommand := 'commit';
commit;


strSqlCommand   := 'update TABLE_STATUS on CSSTG_OWNER.UM_STAGE_JOBS';
update CSSTG_OWNER.UM_STAGE_JOBS
   set TABLE_STATUS = 'Merging'
 where TABLE_NAME = 'PS_SFA_SAP_STDNT'
;

strSqlCommand := 'commit';
commit;


strMessage01    := 'Merging data into CSSTG_OWNER.PS_SFA_SAP_STDNT';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand   := 'merge into CSSTG_OWNER.PS_SFA_SAP_STDNT';
merge /*+ use_hash(S,T) */ into CSSTG_OWNER.PS_SFA_SAP_STDNT T
using (select /*+ full(S) */
nvl(trim(EMPLID),'-') EMPLID,
nvl(trim(INSTITUTION),'-') INSTITUTION,
nvl(trim(ACAD_CAREER),'-') ACAD_CAREER,
nvl(trim(AID_YEAR),'-') AID_YEAR,
nvl(trim(STRM),'-') STRM,
--to_date(to_char(case when PROCESS_DTTM < '01-JAN-1800' then NULL else PROCESS_DTTM end,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') PROCESS_DTTM,
PROCESS_DTTM,
nvl(trim(ACAD_PROG),'-') ACAD_PROG,
nvl(STDNT_CAR_NBR,0) STDNT_CAR_NBR,
nvl(trim(ACAD_PLAN),'-') ACAD_PLAN,
nvl(trim(ACAD_STANDING),'-') ACAD_STANDING,
nvl(trim(SFA_INUSE_FLAG1),'-') SFA_INUSE_FLAG1,
nvl(trim(SFA_SAP_STATUS_C1),'-') SFA_SAP_STATUS_C1,
nvl(trim(SFA_FAIL_FLAG1),'-') SFA_FAIL_FLAG1,
nvl(trim(SFA_EXCPT_USED1),'-') SFA_EXCPT_USED1,
nvl(trim(SFA_SAP_ACST_TERM),'-') SFA_SAP_ACST_TERM,
nvl(UNT_TAKEN,0) UNT_TAKEN,
nvl(SFA_SAP_MAX_ATTUNT,0) SFA_SAP_MAX_ATTUNT,
nvl(SFA_SAP_MAX_ATTFRM,0) SFA_SAP_MAX_ATTFRM,
nvl(SFA_SAP_MAX_ATTMPT,0) SFA_SAP_MAX_ATTMPT,
nvl(trim(SFA_INUSE_FLAG2),'-') SFA_INUSE_FLAG2,
nvl(trim(SFA_SAP_STATUS_C2),'-') SFA_SAP_STATUS_C2,
nvl(trim(SFA_FAIL_FLAG2),'-') SFA_FAIL_FLAG2,
nvl(trim(SFA_EXCPT_USED2),'-') SFA_EXCPT_USED2,
nvl(CUM_RESIDENT_TERMS,0) CUM_RESIDENT_TERMS,
nvl(SFA_SAP_MAX_TRMFRM,0) SFA_SAP_MAX_TRMFRM,
nvl(SFA_SAP_MAX_TERMS,0) SFA_SAP_MAX_TERMS,
nvl(trim(SFA_INUSE_FLAG3),'-') SFA_INUSE_FLAG3,
nvl(trim(SFA_SAP_STATUS_C3),'-') SFA_SAP_STATUS_C3,
nvl(trim(SFA_FAIL_FLAG3),'-') SFA_FAIL_FLAG3,
nvl(trim(SFA_EXCPT_USED3),'-') SFA_EXCPT_USED3,
nvl(CUR_GPA,0) CUR_GPA,
nvl(SFA_SAP_MIN_TRMFRM,0) SFA_SAP_MIN_TRMFRM,
nvl(SFA_SAP_MIN_TERM,0) SFA_SAP_MIN_TERM,
nvl(trim(SFA_INUSE_FLAG4),'-') SFA_INUSE_FLAG4,
nvl(trim(SFA_SAP_STATUS_C4),'-') SFA_SAP_STATUS_C4,
nvl(trim(SFA_FAIL_FLAG4),'-') SFA_FAIL_FLAG4,
nvl(trim(SFA_EXCPT_USED4),'-') SFA_EXCPT_USED4,
nvl(CUM_GPA,0) CUM_GPA,
nvl(SFA_SAP_MIN_CUMFRM,0) SFA_SAP_MIN_CUMFRM,
nvl(SFA_SAP_MIN_CUM,0) SFA_SAP_MIN_CUM,
nvl(trim(SFA_INUSE_FLAG5),'-') SFA_INUSE_FLAG5,
nvl(trim(SFA_SAP_STATUS_C5),'-') SFA_SAP_STATUS_C5,
nvl(trim(SFA_FAIL_FLAG5),'-') SFA_FAIL_FLAG5,
nvl(trim(SFA_EXCPT_USED5),'-') SFA_EXCPT_USED5,
nvl(SFA_CUR_ATT_UNITS,0) SFA_CUR_ATT_UNITS,
nvl(SFA_CUR_ERN_UNITS,0) SFA_CUR_ERN_UNITS,
nvl(SFA_SAP_TRM_ERNEDF,0) SFA_SAP_TRM_ERNEDF,
nvl(SFA_SAP_TRM_ERNPCF,0) SFA_SAP_TRM_ERNPCF,
nvl(SFA_SAP_TRM_EARNED,0) SFA_SAP_TRM_EARNED,
nvl(SFA_SAP_TRM_EARNPC,0) SFA_SAP_TRM_EARNPC,
nvl(trim(SFA_INUSE_FLAG6),'-') SFA_INUSE_FLAG6,
nvl(trim(SFA_SAP_STATUS_C6),'-') SFA_SAP_STATUS_C6,
nvl(trim(SFA_FAIL_FLAG6),'-') SFA_FAIL_FLAG6,
nvl(trim(SFA_EXCPT_USED6),'-') SFA_EXCPT_USED6,
nvl(SFA_CUM_ATT_UNITS,0) SFA_CUM_ATT_UNITS,
nvl(SFA_CUM_ERN_UNITS,0) SFA_CUM_ERN_UNITS,
nvl(SFA_SAP_CUM_ERNEDF,0) SFA_SAP_CUM_ERNEDF,
nvl(SFA_SAP_CUM_ERNPCF,0) SFA_SAP_CUM_ERNPCF,
nvl(SFA_SAP_CUM_EARNED,0) SFA_SAP_CUM_EARNED,
nvl(SFA_SAP_CUM_EARNPC,0) SFA_SAP_CUM_EARNPC,
nvl(trim(SFA_INUSE_FLAG7),'-') SFA_INUSE_FLAG7,
nvl(trim(SFA_SAP_STATUS_C7),'-') SFA_SAP_STATUS_C7,
nvl(trim(SFA_FAIL_FLAG7),'-') SFA_FAIL_FLAG7,
nvl(trim(SFA_EXCPT_USED7),'-') SFA_EXCPT_USED7,
nvl(SFA_SAP_NBR_TERMS,0) SFA_SAP_NBR_TERMS,
nvl(SFA_SAP_2YR_GPA,0) SFA_SAP_2YR_GPA,
nvl(SFA_SAP_CUMGPA_FRM,0) SFA_SAP_CUMGPA_FRM,
nvl(SFA_SAP_CUMGPA_TO,0) SFA_SAP_CUMGPA_TO,
nvl(trim(SFA_INUSE_FLAG8),'-') SFA_INUSE_FLAG8,
nvl(trim(SFA_SAP_STATUS_C8),'-') SFA_SAP_STATUS_C8,
nvl(trim(SFA_FAIL_FLAG8),'-') SFA_FAIL_FLAG8,
nvl(trim(SFA_EXCPT_USED8),'-') SFA_EXCPT_USED8,
nvl(SFA_SAP_CURERN_PCT,0) SFA_SAP_CURERN_PCT,
nvl(SFA_SAP_CUMERN_PCT,0) SFA_SAP_CUMERN_PCT,
nvl(trim(SFA_SAP_STATUS),'-') SFA_SAP_STATUS,
nvl(trim(SFA_SAP_STAT_CALC),'-') SFA_SAP_STAT_CALC,
nvl(trim(SFA_UPDT_OPRID),'-') SFA_UPDT_OPRID,
to_date(to_char(case when SFA_UPDT_DTTM < '01-JAN-1800' then NULL else SFA_UPDT_DTTM end,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS') SFA_UPDT_DTTM,
nvl(trim(SFA_PROCESS_OPRID),'-') SFA_PROCESS_OPRID,
nvl(trim(SFA_SAP_PROCMSG),'-') SFA_SAP_PROCMSG,
SFA_SAP_COMMENTS SFA_SAP_COMMENTS
from CSSTG_OWNER.PS_T_SFA_SAP_STDNT S
where SRC_SCN > (select OLD_MAX_SCN from CSSTG_OWNER.UM_STAGE_JOBS where TABLE_NAME = 'PS_SFA_SAP_STDNT') ) S
   on (
T.EMPLID = S.EMPLID and
T.INSTITUTION = S.INSTITUTION and
T.ACAD_CAREER = S.ACAD_CAREER and
T.AID_YEAR = S.AID_YEAR and
T.STRM = S.STRM and
T.PROCESS_DTTM = S.PROCESS_DTTM and
T.SRC_SYS_ID = 'CS90')
when matched then update set
T.ACAD_PROG = S.ACAD_PROG,
T.STDNT_CAR_NBR = S.STDNT_CAR_NBR,
T.ACAD_PLAN = S.ACAD_PLAN,
T.ACAD_STANDING = S.ACAD_STANDING,
T.SFA_INUSE_FLAG1 = S.SFA_INUSE_FLAG1,
T.SFA_SAP_STATUS_C1 = S.SFA_SAP_STATUS_C1,
T.SFA_FAIL_FLAG1 = S.SFA_FAIL_FLAG1,
T.SFA_EXCPT_USED1 = S.SFA_EXCPT_USED1,
T.SFA_SAP_ACST_TERM = S.SFA_SAP_ACST_TERM,
T.UNT_TAKEN = S.UNT_TAKEN,
T.SFA_SAP_MAX_ATTUNT = S.SFA_SAP_MAX_ATTUNT,
T.SFA_SAP_MAX_ATTFRM = S.SFA_SAP_MAX_ATTFRM,
T.SFA_SAP_MAX_ATTMPT = S.SFA_SAP_MAX_ATTMPT,
T.SFA_INUSE_FLAG2 = S.SFA_INUSE_FLAG2,
T.SFA_SAP_STATUS_C2 = S.SFA_SAP_STATUS_C2,
T.SFA_FAIL_FLAG2 = S.SFA_FAIL_FLAG2,
T.SFA_EXCPT_USED2 = S.SFA_EXCPT_USED2,
T.CUM_RESIDENT_TERMS = S.CUM_RESIDENT_TERMS,
T.SFA_SAP_MAX_TRMFRM = S.SFA_SAP_MAX_TRMFRM,
T.SFA_SAP_MAX_TERMS = S.SFA_SAP_MAX_TERMS,
T.SFA_INUSE_FLAG3 = S.SFA_INUSE_FLAG3,
T.SFA_SAP_STATUS_C3 = S.SFA_SAP_STATUS_C3,
T.SFA_FAIL_FLAG3 = S.SFA_FAIL_FLAG3,
T.SFA_EXCPT_USED3 = S.SFA_EXCPT_USED3,
T.CUR_GPA = S.CUR_GPA,
T.SFA_SAP_MIN_TRMFRM = S.SFA_SAP_MIN_TRMFRM,
T.SFA_SAP_MIN_TERM = S.SFA_SAP_MIN_TERM,
T.SFA_INUSE_FLAG4 = S.SFA_INUSE_FLAG4,
T.SFA_SAP_STATUS_C4 = S.SFA_SAP_STATUS_C4,
T.SFA_FAIL_FLAG4 = S.SFA_FAIL_FLAG4,
T.SFA_EXCPT_USED4 = S.SFA_EXCPT_USED4,
T.CUM_GPA = S.CUM_GPA,
T.SFA_SAP_MIN_CUMFRM = S.SFA_SAP_MIN_CUMFRM,
T.SFA_SAP_MIN_CUM = S.SFA_SAP_MIN_CUM,
T.SFA_INUSE_FLAG5 = S.SFA_INUSE_FLAG5,
T.SFA_SAP_STATUS_C5 = S.SFA_SAP_STATUS_C5,
T.SFA_FAIL_FLAG5 = S.SFA_FAIL_FLAG5,
T.SFA_EXCPT_USED5 = S.SFA_EXCPT_USED5,
T.SFA_CUR_ATT_UNITS = S.SFA_CUR_ATT_UNITS,
T.SFA_CUR_ERN_UNITS = S.SFA_CUR_ERN_UNITS,
T.SFA_SAP_TRM_ERNEDF = S.SFA_SAP_TRM_ERNEDF,
T.SFA_SAP_TRM_ERNPCF = S.SFA_SAP_TRM_ERNPCF,
T.SFA_SAP_TRM_EARNED = S.SFA_SAP_TRM_EARNED,
T.SFA_SAP_TRM_EARNPC = S.SFA_SAP_TRM_EARNPC,
T.SFA_INUSE_FLAG6 = S.SFA_INUSE_FLAG6,
T.SFA_SAP_STATUS_C6 = S.SFA_SAP_STATUS_C6,
T.SFA_FAIL_FLAG6 = S.SFA_FAIL_FLAG6,
T.SFA_EXCPT_USED6 = S.SFA_EXCPT_USED6,
T.SFA_CUM_ATT_UNITS = S.SFA_CUM_ATT_UNITS,
T.SFA_CUM_ERN_UNITS = S.SFA_CUM_ERN_UNITS,
T.SFA_SAP_CUM_ERNEDF = S.SFA_SAP_CUM_ERNEDF,
T.SFA_SAP_CUM_ERNPCF = S.SFA_SAP_CUM_ERNPCF,
T.SFA_SAP_CUM_EARNED = S.SFA_SAP_CUM_EARNED,
T.SFA_SAP_CUM_EARNPC = S.SFA_SAP_CUM_EARNPC,
T.SFA_INUSE_FLAG7 = S.SFA_INUSE_FLAG7,
T.SFA_SAP_STATUS_C7 = S.SFA_SAP_STATUS_C7,
T.SFA_FAIL_FLAG7 = S.SFA_FAIL_FLAG7,
T.SFA_EXCPT_USED7 = S.SFA_EXCPT_USED7,
T.SFA_SAP_NBR_TERMS = S.SFA_SAP_NBR_TERMS,
T.SFA_SAP_2YR_GPA = S.SFA_SAP_2YR_GPA,
T.SFA_SAP_CUMGPA_FRM = S.SFA_SAP_CUMGPA_FRM,
T.SFA_SAP_CUMGPA_TO = S.SFA_SAP_CUMGPA_TO,
T.SFA_INUSE_FLAG8 = S.SFA_INUSE_FLAG8,
T.SFA_SAP_STATUS_C8 = S.SFA_SAP_STATUS_C8,
T.SFA_FAIL_FLAG8 = S.SFA_FAIL_FLAG8,
T.SFA_EXCPT_USED8 = S.SFA_EXCPT_USED8,
T.SFA_SAP_CURERN_PCT = S.SFA_SAP_CURERN_PCT,
T.SFA_SAP_CUMERN_PCT = S.SFA_SAP_CUMERN_PCT,
T.SFA_SAP_STATUS = S.SFA_SAP_STATUS,
T.SFA_SAP_STAT_CALC = S.SFA_SAP_STAT_CALC,
T.SFA_UPDT_OPRID = S.SFA_UPDT_OPRID,
T.SFA_UPDT_DTTM = S.SFA_UPDT_DTTM,
T.SFA_PROCESS_OPRID = S.SFA_PROCESS_OPRID,
T.SFA_SAP_PROCMSG = S.SFA_SAP_PROCMSG,
T.SFA_SAP_COMMENTS = S.SFA_SAP_COMMENTS,
T.DATA_ORIGIN = 'S',
T.LASTUPD_EW_DTTM = sysdate,
T.BATCH_SID   = 1234
where
T.ACAD_PROG <> S.ACAD_PROG or
T.STDNT_CAR_NBR <> S.STDNT_CAR_NBR or
T.ACAD_PLAN <> S.ACAD_PLAN or
T.ACAD_STANDING <> S.ACAD_STANDING or
T.SFA_INUSE_FLAG1 <> S.SFA_INUSE_FLAG1 or
T.SFA_SAP_STATUS_C1 <> S.SFA_SAP_STATUS_C1 or
T.SFA_FAIL_FLAG1 <> S.SFA_FAIL_FLAG1 or
T.SFA_EXCPT_USED1 <> S.SFA_EXCPT_USED1 or
T.SFA_SAP_ACST_TERM <> S.SFA_SAP_ACST_TERM or
T.UNT_TAKEN <> S.UNT_TAKEN or
T.SFA_SAP_MAX_ATTUNT <> S.SFA_SAP_MAX_ATTUNT or
T.SFA_SAP_MAX_ATTFRM <> S.SFA_SAP_MAX_ATTFRM or
T.SFA_SAP_MAX_ATTMPT <> S.SFA_SAP_MAX_ATTMPT or
T.SFA_INUSE_FLAG2 <> S.SFA_INUSE_FLAG2 or
T.SFA_SAP_STATUS_C2 <> S.SFA_SAP_STATUS_C2 or
T.SFA_FAIL_FLAG2 <> S.SFA_FAIL_FLAG2 or
T.SFA_EXCPT_USED2 <> S.SFA_EXCPT_USED2 or
T.CUM_RESIDENT_TERMS <> S.CUM_RESIDENT_TERMS or
T.SFA_SAP_MAX_TRMFRM <> S.SFA_SAP_MAX_TRMFRM or
T.SFA_SAP_MAX_TERMS <> S.SFA_SAP_MAX_TERMS or
T.SFA_INUSE_FLAG3 <> S.SFA_INUSE_FLAG3 or
T.SFA_SAP_STATUS_C3 <> S.SFA_SAP_STATUS_C3 or
T.SFA_FAIL_FLAG3 <> S.SFA_FAIL_FLAG3 or
T.SFA_EXCPT_USED3 <> S.SFA_EXCPT_USED3 or
T.CUR_GPA <> S.CUR_GPA or
T.SFA_SAP_MIN_TRMFRM <> S.SFA_SAP_MIN_TRMFRM or
T.SFA_SAP_MIN_TERM <> S.SFA_SAP_MIN_TERM or
T.SFA_INUSE_FLAG4 <> S.SFA_INUSE_FLAG4 or
T.SFA_SAP_STATUS_C4 <> S.SFA_SAP_STATUS_C4 or
T.SFA_FAIL_FLAG4 <> S.SFA_FAIL_FLAG4 or
T.SFA_EXCPT_USED4 <> S.SFA_EXCPT_USED4 or
T.CUM_GPA <> S.CUM_GPA or
T.SFA_SAP_MIN_CUMFRM <> S.SFA_SAP_MIN_CUMFRM or
T.SFA_SAP_MIN_CUM <> S.SFA_SAP_MIN_CUM or
T.SFA_INUSE_FLAG5 <> S.SFA_INUSE_FLAG5 or
T.SFA_SAP_STATUS_C5 <> S.SFA_SAP_STATUS_C5 or
T.SFA_FAIL_FLAG5 <> S.SFA_FAIL_FLAG5 or
T.SFA_EXCPT_USED5 <> S.SFA_EXCPT_USED5 or
T.SFA_CUR_ATT_UNITS <> S.SFA_CUR_ATT_UNITS or
T.SFA_CUR_ERN_UNITS <> S.SFA_CUR_ERN_UNITS or
T.SFA_SAP_TRM_ERNEDF <> S.SFA_SAP_TRM_ERNEDF or
T.SFA_SAP_TRM_ERNPCF <> S.SFA_SAP_TRM_ERNPCF or
T.SFA_SAP_TRM_EARNED <> S.SFA_SAP_TRM_EARNED or
T.SFA_SAP_TRM_EARNPC <> S.SFA_SAP_TRM_EARNPC or
T.SFA_INUSE_FLAG6 <> S.SFA_INUSE_FLAG6 or
T.SFA_SAP_STATUS_C6 <> S.SFA_SAP_STATUS_C6 or
T.SFA_FAIL_FLAG6 <> S.SFA_FAIL_FLAG6 or
T.SFA_EXCPT_USED6 <> S.SFA_EXCPT_USED6 or
T.SFA_CUM_ATT_UNITS <> S.SFA_CUM_ATT_UNITS or
T.SFA_CUM_ERN_UNITS <> S.SFA_CUM_ERN_UNITS or
T.SFA_SAP_CUM_ERNEDF <> S.SFA_SAP_CUM_ERNEDF or
T.SFA_SAP_CUM_ERNPCF <> S.SFA_SAP_CUM_ERNPCF or
T.SFA_SAP_CUM_EARNED <> S.SFA_SAP_CUM_EARNED or
T.SFA_SAP_CUM_EARNPC <> S.SFA_SAP_CUM_EARNPC or
T.SFA_INUSE_FLAG7 <> S.SFA_INUSE_FLAG7 or
T.SFA_SAP_STATUS_C7 <> S.SFA_SAP_STATUS_C7 or
T.SFA_FAIL_FLAG7 <> S.SFA_FAIL_FLAG7 or
T.SFA_EXCPT_USED7 <> S.SFA_EXCPT_USED7 or
T.SFA_SAP_NBR_TERMS <> S.SFA_SAP_NBR_TERMS or
T.SFA_SAP_2YR_GPA <> S.SFA_SAP_2YR_GPA or
T.SFA_SAP_CUMGPA_FRM <> S.SFA_SAP_CUMGPA_FRM or
T.SFA_SAP_CUMGPA_TO <> S.SFA_SAP_CUMGPA_TO or
T.SFA_INUSE_FLAG8 <> S.SFA_INUSE_FLAG8 or
T.SFA_SAP_STATUS_C8 <> S.SFA_SAP_STATUS_C8 or
T.SFA_FAIL_FLAG8 <> S.SFA_FAIL_FLAG8 or
T.SFA_EXCPT_USED8 <> S.SFA_EXCPT_USED8 or
T.SFA_SAP_CURERN_PCT <> S.SFA_SAP_CURERN_PCT or
T.SFA_SAP_CUMERN_PCT <> S.SFA_SAP_CUMERN_PCT or
T.SFA_SAP_STATUS <> S.SFA_SAP_STATUS or
T.SFA_SAP_STAT_CALC <> S.SFA_SAP_STAT_CALC or
T.SFA_UPDT_OPRID <> S.SFA_UPDT_OPRID or
nvl(trim(T.SFA_UPDT_DTTM),0) <> nvl(trim(S.SFA_UPDT_DTTM),0) or
T.SFA_PROCESS_OPRID <> S.SFA_PROCESS_OPRID or
T.SFA_SAP_PROCMSG <> S.SFA_SAP_PROCMSG or
nvl(trim(T.SFA_SAP_COMMENTS),0) <> nvl(trim(S.SFA_SAP_COMMENTS),0) or
T.DATA_ORIGIN = 'D'
when not matched then
insert (
T.EMPLID,
T.INSTITUTION,
T.ACAD_CAREER,
T.AID_YEAR,
T.STRM,
T.PROCESS_DTTM,
T.SRC_SYS_ID,
T.ACAD_PROG,
T.STDNT_CAR_NBR,
T.ACAD_PLAN,
T.ACAD_STANDING,
T.SFA_INUSE_FLAG1,
T.SFA_SAP_STATUS_C1,
T.SFA_FAIL_FLAG1,
T.SFA_EXCPT_USED1,
T.SFA_SAP_ACST_TERM,
T.UNT_TAKEN,
T.SFA_SAP_MAX_ATTUNT,
T.SFA_SAP_MAX_ATTFRM,
T.SFA_SAP_MAX_ATTMPT,
T.SFA_INUSE_FLAG2,
T.SFA_SAP_STATUS_C2,
T.SFA_FAIL_FLAG2,
T.SFA_EXCPT_USED2,
T.CUM_RESIDENT_TERMS,
T.SFA_SAP_MAX_TRMFRM,
T.SFA_SAP_MAX_TERMS,
T.SFA_INUSE_FLAG3,
T.SFA_SAP_STATUS_C3,
T.SFA_FAIL_FLAG3,
T.SFA_EXCPT_USED3,
T.CUR_GPA,
T.SFA_SAP_MIN_TRMFRM,
T.SFA_SAP_MIN_TERM,
T.SFA_INUSE_FLAG4,
T.SFA_SAP_STATUS_C4,
T.SFA_FAIL_FLAG4,
T.SFA_EXCPT_USED4,
T.CUM_GPA,
T.SFA_SAP_MIN_CUMFRM,
T.SFA_SAP_MIN_CUM,
T.SFA_INUSE_FLAG5,
T.SFA_SAP_STATUS_C5,
T.SFA_FAIL_FLAG5,
T.SFA_EXCPT_USED5,
T.SFA_CUR_ATT_UNITS,
T.SFA_CUR_ERN_UNITS,
T.SFA_SAP_TRM_ERNEDF,
T.SFA_SAP_TRM_ERNPCF,
T.SFA_SAP_TRM_EARNED,
T.SFA_SAP_TRM_EARNPC,
T.SFA_INUSE_FLAG6,
T.SFA_SAP_STATUS_C6,
T.SFA_FAIL_FLAG6,
T.SFA_EXCPT_USED6,
T.SFA_CUM_ATT_UNITS,
T.SFA_CUM_ERN_UNITS,
T.SFA_SAP_CUM_ERNEDF,
T.SFA_SAP_CUM_ERNPCF,
T.SFA_SAP_CUM_EARNED,
T.SFA_SAP_CUM_EARNPC,
T.SFA_INUSE_FLAG7,
T.SFA_SAP_STATUS_C7,
T.SFA_FAIL_FLAG7,
T.SFA_EXCPT_USED7,
T.SFA_SAP_NBR_TERMS,
T.SFA_SAP_2YR_GPA,
T.SFA_SAP_CUMGPA_FRM,
T.SFA_SAP_CUMGPA_TO,
T.SFA_INUSE_FLAG8,
T.SFA_SAP_STATUS_C8,
T.SFA_FAIL_FLAG8,
T.SFA_EXCPT_USED8,
T.SFA_SAP_CURERN_PCT,
T.SFA_SAP_CUMERN_PCT,
T.SFA_SAP_STATUS,
T.SFA_SAP_STAT_CALC,
T.SFA_UPDT_OPRID,
T.SFA_UPDT_DTTM,
T.SFA_PROCESS_OPRID,
T.SFA_SAP_PROCMSG,
T.LOAD_ERROR,
T.DATA_ORIGIN,
T.CREATED_EW_DTTM,
T.LASTUPD_EW_DTTM,
T.BATCH_SID,
T.SFA_SAP_COMMENTS
)
values (
S.EMPLID,
S.INSTITUTION,
S.ACAD_CAREER,
S.AID_YEAR,
S.STRM,
S.PROCESS_DTTM,
'CS90',
S.ACAD_PROG,
S.STDNT_CAR_NBR,
S.ACAD_PLAN,
S.ACAD_STANDING,
S.SFA_INUSE_FLAG1,
S.SFA_SAP_STATUS_C1,
S.SFA_FAIL_FLAG1,
S.SFA_EXCPT_USED1,
S.SFA_SAP_ACST_TERM,
S.UNT_TAKEN,
S.SFA_SAP_MAX_ATTUNT,
S.SFA_SAP_MAX_ATTFRM,
S.SFA_SAP_MAX_ATTMPT,
S.SFA_INUSE_FLAG2,
S.SFA_SAP_STATUS_C2,
S.SFA_FAIL_FLAG2,
S.SFA_EXCPT_USED2,
S.CUM_RESIDENT_TERMS,
S.SFA_SAP_MAX_TRMFRM,
S.SFA_SAP_MAX_TERMS,
S.SFA_INUSE_FLAG3,
S.SFA_SAP_STATUS_C3,
S.SFA_FAIL_FLAG3,
S.SFA_EXCPT_USED3,
S.CUR_GPA,
S.SFA_SAP_MIN_TRMFRM,
S.SFA_SAP_MIN_TERM,
S.SFA_INUSE_FLAG4,
S.SFA_SAP_STATUS_C4,
S.SFA_FAIL_FLAG4,
S.SFA_EXCPT_USED4,
S.CUM_GPA,
S.SFA_SAP_MIN_CUMFRM,
S.SFA_SAP_MIN_CUM,
S.SFA_INUSE_FLAG5,
S.SFA_SAP_STATUS_C5,
S.SFA_FAIL_FLAG5,
S.SFA_EXCPT_USED5,
S.SFA_CUR_ATT_UNITS,
S.SFA_CUR_ERN_UNITS,
S.SFA_SAP_TRM_ERNEDF,
S.SFA_SAP_TRM_ERNPCF,
S.SFA_SAP_TRM_EARNED,
S.SFA_SAP_TRM_EARNPC,
S.SFA_INUSE_FLAG6,
S.SFA_SAP_STATUS_C6,
S.SFA_FAIL_FLAG6,
S.SFA_EXCPT_USED6,
S.SFA_CUM_ATT_UNITS,
S.SFA_CUM_ERN_UNITS,
S.SFA_SAP_CUM_ERNEDF,
S.SFA_SAP_CUM_ERNPCF,
S.SFA_SAP_CUM_EARNED,
S.SFA_SAP_CUM_EARNPC,
S.SFA_INUSE_FLAG7,
S.SFA_SAP_STATUS_C7,
S.SFA_FAIL_FLAG7,
S.SFA_EXCPT_USED7,
S.SFA_SAP_NBR_TERMS,
S.SFA_SAP_2YR_GPA,
S.SFA_SAP_CUMGPA_FRM,
S.SFA_SAP_CUMGPA_TO,
S.SFA_INUSE_FLAG8,
S.SFA_SAP_STATUS_C8,
S.SFA_FAIL_FLAG8,
S.SFA_EXCPT_USED8,
S.SFA_SAP_CURERN_PCT,
S.SFA_SAP_CUMERN_PCT,
S.SFA_SAP_STATUS,
S.SFA_SAP_STAT_CALC,
S.SFA_UPDT_OPRID,
S.SFA_UPDT_DTTM,
S.SFA_PROCESS_OPRID,
S.SFA_SAP_PROCMSG,
'N',
'S',
SYSDATE,
SYSDATE,
1234,
S.SFA_SAP_COMMENTS
);

strSqlCommand   := 'SET intRowCount';
intRowCount     := SQL%ROWCOUNT;

strSqlCommand := 'commit';
commit;


strMessage01    := '# of PS_SFA_SAP_STDNT rows merged: ' || TO_CHAR(intRowCount,'999,999,999,999');
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_DETAIL';
COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_DETAIL
        (
                i_TargetTableName   => 'PS_SFA_SAP_STDNT',
                i_Action            => 'MERGE',
                i_RowCount          => intRowCount
        );


strMessage01    := 'Updating CSSTG_OWNER.UM_STAGE_JOBS';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand   := 'update TABLE_STATUS on CSSTG_OWNER.UM_STAGE_JOBS';
update CSSTG_OWNER.UM_STAGE_JOBS
   set TABLE_STATUS = 'Deleting',
       OLD_MAX_SCN = NEW_MAX_SCN
 where TABLE_NAME = 'PS_SFA_SAP_STDNT';

strSqlCommand := 'commit';
commit;


strMessage01    := 'Updating DATA_ORIGIN on CSSTG_OWNER.PS_SFA_SAP_STDNT';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand   := 'update DATA_ORIGIN on CSSTG_OWNER.PS_SFA_SAP_STDNT';
update CSSTG_OWNER.PS_SFA_SAP_STDNT T
   set T.DATA_ORIGIN = 'D',
          T.LASTUPD_EW_DTTM = SYSDATE
 where T.DATA_ORIGIN <> 'D'
   and exists 
(select 1 from
(select EMPLID, INSTITUTION, ACAD_CAREER, AID_YEAR, STRM, PROCESS_DTTM
   from CSSTG_OWNER.PS_SFA_SAP_STDNT T2
  where (select DELETE_FLG from CSSTG_OWNER.UM_STAGE_JOBS where TABLE_NAME = 'PS_SFA_SAP_STDNT') = 'Y'
  minus
 select nvl(trim(EMPLID),'-') EMPLID,
    nvl(trim(INSTITUTION),'-') INSTITUTION,
    nvl(trim(ACAD_CAREER),'-') ACAD_CAREER,
    nvl(trim(AID_YEAR),'-') AID_YEAR,
    nvl(trim(STRM),'-') STRM,
    PROCESS_DTTM
   from SYSADM.PS_SFA_SAP_STDNT@SASOURCE S2
  where (select DELETE_FLG from CSSTG_OWNER.UM_STAGE_JOBS where TABLE_NAME = 'PS_SFA_SAP_STDNT') = 'Y'
   ) S
 where T.EMPLID = S.EMPLID
   and T.INSTITUTION = S.INSTITUTION
   and T.ACAD_CAREER = S.ACAD_CAREER
   and T.AID_YEAR = S.AID_YEAR
   and T.STRM = S.STRM
   and T.PROCESS_DTTM = S.PROCESS_DTTM
   and T.SRC_SYS_ID = 'CS90' 
   ) 
;

strSqlCommand   := 'SET intRowCount';
intRowCount     := SQL%ROWCOUNT;

strSqlCommand := 'commit';
commit;

strMessage01    := '# of PS_SFA_SAP_STDNT rows updated: ' || TO_CHAR(intRowCount,'999,999,999,999');
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_DETAIL';
COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_DETAIL
        (
                i_TargetTableName   => 'PS_SFA_SAP_STDNT',
                i_Action            => 'UPDATE',
                i_RowCount          => intRowCount
        );


strMessage01    := 'Updating CSSTG_OWNER.UM_STAGE_JOBS';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);

strSqlCommand   := 'update END_DT on CSSTG_OWNER.UM_STAGE_JOBS';

update CSSTG_OWNER.UM_STAGE_JOBS
   set TABLE_STATUS = 'Complete',
       END_DT = SYSDATE
 where TABLE_NAME = 'PS_SFA_SAP_STDNT'
;

strSqlCommand := 'commit';
commit;


strSqlCommand := 'SMT_PROCESS_LOG.PROCESS_SUCCESS';
COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_SUCCESS;

strMessage01    := strProcessName || ' is complete.';
COMMON_OWNER.SMT_LOG.PUT_MESSAGE(i_Message => strMessage01);


EXCEPTION
    WHEN OTHERS THEN

        COMMON_OWNER.SMT_PROCESS_LOG.PROCESS_EXCEPTION
                (
                        i_SqlCommand   => strSqlCommand,
                        i_SqlCode      => SQLCODE,
                        i_SqlErrm      => SQLERRM
                );

END PS_SFA_SAP_STDNT_P;
/
